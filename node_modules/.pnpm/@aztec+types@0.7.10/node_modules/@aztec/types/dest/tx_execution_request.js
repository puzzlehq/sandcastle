import { AztecAddress, FunctionData, TxContext, TxRequest, Vector } from '@aztec/circuits.js';
import { BufferReader, serializeToBuffer } from '@aztec/circuits.js/utils';
import { AuthWitness } from './auth_witness.js';
import { PackedArguments } from './packed_arguments.js';
/**
 * Request to execute a transaction. Similar to TxRequest, but has the full args.
 */
export class TxExecutionRequest {
    constructor(
    /**
     * Sender.
     */
    origin, 
    /**
     * Function data representing the function to call.
     */
    functionData, 
    /**
     * The hash of the entry point arguments.
     */
    argsHash, 
    /**
     * Transaction context.
     */
    txContext, 
    /**
     * These packed arguments will be used during transaction simulation.
     * For example, a call to an account contract might contain as many packed arguments
     * as relayed function calls, and one for the entrypoint.
     */
    packedArguments, 
    /**
     * Transient authorization witnesses for authorizing the execution of one or more actions during this tx.
     * These witnesses are not expected to be stored in the local witnesses database of the RPC server.
     */
    authWitnesses) {
        this.origin = origin;
        this.functionData = functionData;
        this.argsHash = argsHash;
        this.txContext = txContext;
        this.packedArguments = packedArguments;
        this.authWitnesses = authWitnesses;
    }
    toTxRequest() {
        return new TxRequest(this.origin, this.functionData, this.argsHash, this.txContext);
    }
    static getFields(fields) {
        return [
            fields.origin,
            fields.functionData,
            fields.argsHash,
            fields.txContext,
            fields.packedArguments,
            fields.authWitnesses,
        ];
    }
    static from(fields) {
        return new TxExecutionRequest(...TxExecutionRequest.getFields(fields));
    }
    /**
     * Serialize as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.origin, this.functionData, this.argsHash, this.txContext, new Vector(this.packedArguments), new Vector(this.authWitnesses));
    }
    /**
     * Serialize as a string.
     * @returns The string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer to read from.
     * @returns The deserialised TxRequest object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new TxExecutionRequest(reader.readObject(AztecAddress), reader.readObject(FunctionData), reader.readFr(), reader.readObject(TxContext), reader.readVector(PackedArguments), reader.readVector(AuthWitness));
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns The deserialised TxRequest object.
     */
    static fromString(str) {
        return TxExecutionRequest.fromBuffer(Buffer.from(str, 'hex'));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhfZXhlY3V0aW9uX3JlcXVlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHhfZXhlY3V0aW9uX3JlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBZ0IsWUFBWSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUcsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTNFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBQzdCO0lBQ0U7O09BRUc7SUFDSSxNQUFvQjtJQUMzQjs7T0FFRztJQUNJLFlBQTBCO0lBQ2pDOztPQUVHO0lBQ0ksUUFBWTtJQUNuQjs7T0FFRztJQUNJLFNBQW9CO0lBQzNCOzs7O09BSUc7SUFDSSxlQUFrQztJQUN6Qzs7O09BR0c7SUFDSSxhQUE0QjtRQXZCNUIsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQUlwQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUkxQixhQUFRLEdBQVIsUUFBUSxDQUFJO1FBSVosY0FBUyxHQUFULFNBQVMsQ0FBVztRQU1wQixvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFLbEMsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFDbEMsQ0FBQztJQUVKLFdBQVc7UUFDVCxPQUFPLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFvQztRQUNuRCxPQUFPO1lBQ0wsTUFBTSxDQUFDLE1BQU07WUFDYixNQUFNLENBQUMsWUFBWTtZQUNuQixNQUFNLENBQUMsUUFBUTtZQUNmLE1BQU0sQ0FBQyxTQUFTO1lBQ2hCLE1BQU0sQ0FBQyxlQUFlO1lBQ3RCLE1BQU0sQ0FBQyxhQUFhO1NBQ1osQ0FBQztJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQW9DO1FBQzlDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FDdEIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUNoQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksa0JBQWtCLENBQzNCLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQy9CLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQy9CLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFDZixNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUM1QixNQUFNLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsT0FBTyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBQ0YifQ==