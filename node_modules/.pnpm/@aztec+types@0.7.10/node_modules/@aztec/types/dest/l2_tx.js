import { MAX_NEW_COMMITMENTS_PER_TX, MAX_NEW_CONTRACTS_PER_TX, MAX_NEW_L2_TO_L1_MSGS_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, } from '@aztec/circuits.js';
import { serializeToBuffer } from '@aztec/circuits.js/utils';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, numToUInt32BE } from '@aztec/foundation/serialize';
import times from 'lodash.times';
import { ContractData } from './contract_data.js';
import { PublicDataWrite } from './public_data_write.js';
import { TxHash } from './tx/tx_hash.js';
/**
 * Represents an L2 transaction.
 */
export class L2Tx {
    constructor(
    /**
     * New commitments created by the transaction.
     */
    newCommitments, 
    /**
     * New nullifiers created by the transaction.
     */
    newNullifiers, 
    /**
     * New public data writes created by the transaction.
     */
    newPublicDataWrites, 
    /**
     * New L2 to L1 messages created by the transaction.
     */
    newL2ToL1Msgs, 
    /**
     * New contracts leafs created by the transaction to be inserted into the contract tree.
     */
    newContracts, 
    /**
     * New contract data created by the transaction.
     */
    newContractData, 
    /**
     * The unique identifier of the block containing the transaction.
     */
    blockHash, 
    /**
     * The block number in which the transaction was included.
     */
    blockNumber) {
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.newPublicDataWrites = newPublicDataWrites;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.newContracts = newContracts;
        this.newContractData = newContractData;
        this.blockHash = blockHash;
        this.blockNumber = blockNumber;
        this.txHash = new TxHash(this.newNullifiers[0].toBuffer());
    }
    /**
     * Deserializes the L2Tx object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of L2Tx.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new L2Tx(reader.readArray(MAX_NEW_COMMITMENTS_PER_TX, Fr), reader.readArray(MAX_NEW_NULLIFIERS_PER_TX, Fr), reader.readArray(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataWrite), reader.readArray(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr), reader.readArray(MAX_NEW_CONTRACTS_PER_TX, Fr), reader.readArray(MAX_NEW_CONTRACTS_PER_TX, ContractData), reader.readBytes(32), reader.readNumber());
    }
    /**
     * Serializes the Tx object into a Buffer.
     * @returns Buffer representation of the Tx object.
     */
    toBuffer() {
        return serializeToBuffer([
            this.newCommitments,
            this.newNullifiers,
            this.newPublicDataWrites,
            this.newL2ToL1Msgs,
            this.newContracts,
            this.newContractData,
            this.blockHash,
            numToUInt32BE(this.blockNumber),
        ]);
    }
    static random() {
        return new L2Tx(times(MAX_NEW_COMMITMENTS_PER_TX, Fr.random), times(MAX_NEW_NULLIFIERS_PER_TX, Fr.random), times(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataWrite.random), times(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr.random), times(MAX_NEW_CONTRACTS_PER_TX, Fr.random), times(MAX_NEW_CONTRACTS_PER_TX, ContractData.random), Fr.random().toBuffer(), 123);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfdHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbDJfdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLDBCQUEwQixFQUMxQix3QkFBd0IsRUFDeEIsNEJBQTRCLEVBQzVCLHlCQUF5QixFQUN6QixzQ0FBc0MsR0FDdkMsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUxRSxPQUFPLEtBQUssTUFBTSxjQUFjLENBQUM7QUFFakMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sSUFBSTtJQU9mO0lBQ0U7O09BRUc7SUFDSSxjQUFvQjtJQUMzQjs7T0FFRztJQUNJLGFBQW1CO0lBQzFCOztPQUVHO0lBQ0ksbUJBQXNDO0lBQzdDOztPQUVHO0lBQ0ksYUFBbUI7SUFDMUI7O09BRUc7SUFDSSxZQUFrQjtJQUN6Qjs7T0FFRztJQUNJLGVBQStCO0lBQ3RDOztPQUVHO0lBQ0ksU0FBaUI7SUFDeEI7O09BRUc7SUFDSSxXQUFtQjtRQTVCbkIsbUJBQWMsR0FBZCxjQUFjLENBQU07UUFJcEIsa0JBQWEsR0FBYixhQUFhLENBQU07UUFJbkIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFtQjtRQUl0QyxrQkFBYSxHQUFiLGFBQWEsQ0FBTTtRQUluQixpQkFBWSxHQUFaLFlBQVksQ0FBTTtRQUlsQixvQkFBZSxHQUFmLGVBQWUsQ0FBZ0I7UUFJL0IsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUlqQixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQUUxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksSUFBSSxDQUNiLE1BQU0sQ0FBQyxTQUFTLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxDQUFDLEVBQ2hELE1BQU0sQ0FBQyxTQUFTLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLEVBQy9DLE1BQU0sQ0FBQyxTQUFTLENBQUMsc0NBQXNDLEVBQUUsZUFBZSxDQUFDLEVBQ3pFLE1BQU0sQ0FBQyxTQUFTLENBQUMsNEJBQTRCLEVBQUUsRUFBRSxDQUFDLEVBQ2xELE1BQU0sQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxDQUFDLEVBQzlDLE1BQU0sQ0FBQyxTQUFTLENBQUMsd0JBQXdCLEVBQUUsWUFBWSxDQUFDLEVBQ3hELE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQ3BCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FDcEIsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQztZQUN2QixJQUFJLENBQUMsY0FBYztZQUNuQixJQUFJLENBQUMsYUFBYTtZQUNsQixJQUFJLENBQUMsbUJBQW1CO1lBQ3hCLElBQUksQ0FBQyxhQUFhO1lBQ2xCLElBQUksQ0FBQyxZQUFZO1lBQ2pCLElBQUksQ0FBQyxlQUFlO1lBQ3BCLElBQUksQ0FBQyxTQUFTO1lBQ2QsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNO1FBQ1gsT0FBTyxJQUFJLElBQUksQ0FDYixLQUFLLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUM1QyxLQUFLLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUMzQyxLQUFLLENBQUMsc0NBQXNDLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxFQUNyRSxLQUFLLENBQUMsNEJBQTRCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUM5QyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUMxQyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUNwRCxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQ3RCLEdBQUcsQ0FDSixDQUFDO0lBQ0osQ0FBQztDQUNGIn0=