import { assertMemberLength } from '@aztec/circuits.js';
import { deserializeBigInt, serializeBigInt } from '@aztec/foundation/serialize';
/**
 * A class representing hash of Aztec transaction.
 */
export class TxHash {
    constructor(
    /**
     * The buffer containing the hash.
     */
    buffer) {
        this.buffer = buffer;
        assertMemberLength(this, 'buffer', TxHash.SIZE);
    }
    /**
     * Checks if this hash and another hash are equal.
     * @param hash - A hash to compare with.
     * @returns True if the hashes are equal, false otherwise.
     */
    equals(hash) {
        return this.buffer.equals(hash.buffer);
    }
    /**
     * Returns true if this hash is zero.
     * @returns True if this hash is zero.
     */
    isZero() {
        return this.buffer.equals(Buffer.alloc(32, 0));
    }
    /**
     * Convert this hash to a hex string.
     * @returns The hex string.
     */
    toString() {
        return this.buffer.toString('hex');
    }
    /**
     * Convert this hash to a big int.
     * @returns The big int.
     */
    toBigInt() {
        return deserializeBigInt(this.buffer, 0, TxHash.SIZE).elem;
    }
    /**
     * Creates a tx hash from a bigint.
     * @param hash - The tx hash as a big int.
     * @returns The TxHash.
     */
    static fromBigInt(hash) {
        return new TxHash(serializeBigInt(hash, TxHash.SIZE));
    }
    /**
     * Converts this hash from a buffer of 28 bytes.
     * Verifies the input is 28 bytes.
     * @param buffer - The 28 byte buffer to construct from.
     * @returns A TxHash created from the input buffer with 4 bytes 0 padding at the front.
     */
    static fromBuffer28(buffer) {
        if (buffer.length != 28) {
            throw new Error(`Expected TxHash input buffer to be 28 bytes`);
        }
        const padded = Buffer.concat([Buffer.alloc(this.SIZE - 28), buffer]);
        return new TxHash(padded);
    }
    /**
     * Converts a string into a TxHash object.
     * @param str - The TX hash in string format.
     * @returns A new TxHash object.
     */
    static fromString(str) {
        return new TxHash(Buffer.from(str, 'hex'));
    }
}
/**
 * The size of the hash in bytes.
 */
TxHash.SIZE = 32;
/**
 * TxHash with value zero.
 */
TxHash.ZERO = new TxHash(Buffer.alloc(TxHash.SIZE));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhfaGFzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eC90eF9oYXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVqRjs7R0FFRztBQUNILE1BQU0sT0FBTyxNQUFNO0lBV2pCO0lBQ0U7O09BRUc7SUFDSSxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUVyQixrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxJQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7O09BR0c7SUFDSSxRQUFRO1FBQ2IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksUUFBUTtRQUNiLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM3RCxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBWTtRQUNuQyxPQUFPLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFjO1FBQ3ZDLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDbEMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7O0FBaEZEOztHQUVHO0FBQ1csV0FBSSxHQUFHLEVBQUUsQ0FBQztBQUV4Qjs7R0FFRztBQUNXLFdBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDIn0=