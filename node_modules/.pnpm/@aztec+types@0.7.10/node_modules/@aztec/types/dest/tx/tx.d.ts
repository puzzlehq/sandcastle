/// <reference types="node" resolution-mode="require"/>
import { MAX_NEW_CONTRACTS_PER_TX, PrivateKernelPublicInputsFinal, Proof, PublicCallRequest } from '@aztec/circuits.js';
import { BufferReader, Tuple } from '@aztec/foundation/serialize';
import { ExtendedContractData } from '../contract_data.js';
import { TxL2Logs } from '../logs/tx_l2_logs.js';
import { TxHash } from './tx_hash.js';
/**
 * The interface of an L2 transaction.
 */
export declare class Tx {
    /**
     * Output of the private kernel circuit for this tx.
     */
    readonly data: PrivateKernelPublicInputsFinal;
    /**
     * Proof from the private kernel circuit.
     */
    readonly proof: Proof;
    /**
     * Encrypted logs generated by the tx.
     */
    readonly encryptedLogs: TxL2Logs;
    /**
     * Unencrypted logs generated by the tx.
     */
    readonly unencryptedLogs: TxL2Logs;
    /**
     * Enqueued public functions from the private circuit to be run by the sequencer.
     * Preimages of the public call stack entries from the private kernel circuit output.
     */
    readonly enqueuedPublicFunctionCalls: PublicCallRequest[];
    /**
     * Contracts deployed in this tx.
     * Note: Portal address is always set to zero in the tx's new contracts.
     */
    readonly newContracts: Tuple<ExtendedContractData, typeof MAX_NEW_CONTRACTS_PER_TX>;
    constructor(
    /**
     * Output of the private kernel circuit for this tx.
     */
    data: PrivateKernelPublicInputsFinal, 
    /**
     * Proof from the private kernel circuit.
     */
    proof: Proof, 
    /**
     * Encrypted logs generated by the tx.
     */
    encryptedLogs: TxL2Logs, 
    /**
     * Unencrypted logs generated by the tx.
     */
    unencryptedLogs: TxL2Logs, 
    /**
     * Enqueued public functions from the private circuit to be run by the sequencer.
     * Preimages of the public call stack entries from the private kernel circuit output.
     */
    enqueuedPublicFunctionCalls: PublicCallRequest[], 
    /**
     * Contracts deployed in this tx.
     * Note: Portal address is always set to zero in the tx's new contracts.
     */
    newContracts: Tuple<ExtendedContractData, typeof MAX_NEW_CONTRACTS_PER_TX>);
    /**
     * Deserializes the Tx object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of Tx.
     */
    static fromBuffer(buffer: Buffer | BufferReader): Tx;
    /**
     * Serializes the Tx object into a Buffer.
     * @returns Buffer representation of the Tx object.
     */
    toBuffer(): Buffer;
    /**
     * Convert a Tx class object to a plain JSON object.
     * @returns A plain object with Tx properties.
     */
    toJSON(): {
        data: string;
        encryptedLogs: string;
        unencryptedLogs: string;
        proof: string;
        enqueuedPublicFunctions: string[];
        newContracts: string[];
    };
    /**
     * Convert a plain JSON object to a Tx class object.
     * @param obj - A plain Tx JSON object.
     * @returns A Tx class object.
     */
    static fromJSON(obj: any): Tx;
    /**
     * Construct & return transaction hash.
     * @returns The transaction's hash.
     */
    getTxHash(): Promise<TxHash>;
    /**
     * Convenience function to get array of hashes for an array of txs.
     * @param txs - The txs to get the hashes from.
     * @returns The corresponding array of hashes.
     */
    static getHashes(txs: Tx[]): Promise<TxHash[]>;
    /**
     * Clones a tx, making a deep copy of all fields.
     * @param tx - The transaction to be cloned.
     * @returns The cloned transaction.
     */
    static clone(tx: Tx): Tx;
}
//# sourceMappingURL=tx.d.ts.map