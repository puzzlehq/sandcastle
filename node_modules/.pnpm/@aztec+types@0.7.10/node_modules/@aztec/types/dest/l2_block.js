import { AppendOnlyTreeSnapshot, GlobalVariables, MAX_NEW_COMMITMENTS_PER_TX, MAX_NEW_CONTRACTS_PER_TX, MAX_NEW_L2_TO_L1_MSGS_PER_TX, MAX_NEW_NULLIFIERS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP, } from '@aztec/circuits.js';
import { makeAppendOnlyTreeSnapshot, makeGlobalVariables } from '@aztec/circuits.js/factories';
import { BufferReader, serializeToBuffer } from '@aztec/circuits.js/utils';
import { keccak, sha256, sha256ToField } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { createDebugLogger } from '@aztec/foundation/log';
import times from 'lodash.times';
import { ContractData, L2Tx, LogType, PublicDataWrite } from './index.js';
import { L2BlockL2Logs } from './logs/l2_block_l2_logs.js';
/**
 * The data that makes up the rollup proof, with encoder decoder functions.
 * TODO: Reuse data types and serialization functions from circuits package.
 */
export class L2Block {
    constructor(
    /**
     * The number of the L2 block.
     */
    number, 
    /**
     * The global variables for the L2 block.
     */
    globalVariables, 
    /**
     * The tree snapshot of the private data tree at the start of the rollup.
     */
    startPrivateDataTreeSnapshot, 
    /**
     * The tree snapshot of the nullifier tree at the start of the rollup.
     */
    startNullifierTreeSnapshot, 
    /**
     * The tree snapshot of the contract tree at the start of the rollup.
     */
    startContractTreeSnapshot, 
    /**
     * The tree root of the public data tree at the start of the rollup.
     */
    startPublicDataTreeRoot, 
    /**
     * The tree snapshot of the L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot, 
    /**
     * The tree snapshot of the historic blocks tree at the start of the rollup.
     */
    startHistoricBlocksTreeSnapshot = AppendOnlyTreeSnapshot.empty(), 
    /**
     * The tree snapshot of the private data tree at the end of the rollup.
     */
    endPrivateDataTreeSnapshot, 
    /**
     * The tree snapshot of the nullifier tree at the end of the rollup.
     */
    endNullifierTreeSnapshot, 
    /**
     * The tree snapshot of the contract tree at the end of the rollup.
     */
    endContractTreeSnapshot, 
    /**
     * The tree root of the public data tree at the end of the rollup.
     */
    endPublicDataTreeRoot, 
    /**
     * The tree snapshot of the L2 message tree at the end of the rollup.
     */
    endL1ToL2MessagesTreeSnapshot, 
    /**
     * The tree snapshot of the historic blocks tree at the end of the rollup.
     */
    endHistoricBlocksTreeSnapshot, 
    /**
     * The commitments to be inserted into the private data tree.
     */
    newCommitments, 
    /**
     * The nullifiers to be inserted into the nullifier tree.
     */
    newNullifiers, 
    /**
     * The public data writes to be inserted into the public data tree.
     */
    newPublicDataWrites, 
    /**
     * The L2 to L1 messages to be inserted into the messagebox on L1.
     */
    newL2ToL1Msgs, 
    /**
     * The contracts leafs to be inserted into the contract tree.
     */
    newContracts, 
    /**
     * The aztec address and ethereum address for the deployed contract and its portal contract.
     */
    newContractData, 
    /**
     * The L1 to L2 messages to be inserted into the L2 toL2 message tree.
     */
    newL1ToL2Messages = [], newEncryptedLogs, newUnencryptedLogs, blockHash) {
        this.number = number;
        this.globalVariables = globalVariables;
        this.startPrivateDataTreeSnapshot = startPrivateDataTreeSnapshot;
        this.startNullifierTreeSnapshot = startNullifierTreeSnapshot;
        this.startContractTreeSnapshot = startContractTreeSnapshot;
        this.startPublicDataTreeRoot = startPublicDataTreeRoot;
        this.startL1ToL2MessagesTreeSnapshot = startL1ToL2MessagesTreeSnapshot;
        this.startHistoricBlocksTreeSnapshot = startHistoricBlocksTreeSnapshot;
        this.endPrivateDataTreeSnapshot = endPrivateDataTreeSnapshot;
        this.endNullifierTreeSnapshot = endNullifierTreeSnapshot;
        this.endContractTreeSnapshot = endContractTreeSnapshot;
        this.endPublicDataTreeRoot = endPublicDataTreeRoot;
        this.endL1ToL2MessagesTreeSnapshot = endL1ToL2MessagesTreeSnapshot;
        this.endHistoricBlocksTreeSnapshot = endHistoricBlocksTreeSnapshot;
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.newPublicDataWrites = newPublicDataWrites;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.newContracts = newContracts;
        this.newContractData = newContractData;
        this.newL1ToL2Messages = newL1ToL2Messages;
        this.blockHash = blockHash;
        if (newCommitments.length % MAX_NEW_COMMITMENTS_PER_TX !== 0) {
            throw new Error(`The number of new commitments must be a multiple of ${MAX_NEW_COMMITMENTS_PER_TX}.`);
        }
        if (newEncryptedLogs) {
            this.attachLogs(newEncryptedLogs, LogType.ENCRYPTED);
        }
        if (newUnencryptedLogs) {
            this.attachLogs(newUnencryptedLogs, LogType.UNENCRYPTED);
        }
        this.numberOfTxs = Math.floor(this.newCommitments.length / MAX_NEW_COMMITMENTS_PER_TX);
    }
    /**
     * Creates an L2 block containing random data.
     * @param l2BlockNum - The number of the L2 block.
     * @param txsPerBlock - The number of transactions to include in the block.
     * @param numPrivateFunctionCalls - The number of private function calls to include in each transaction.
     * @param numPublicFunctionCalls - The number of public function calls to include in each transaction.
     * @param numEncryptedLogs - The number of encrypted logs to include in each transaction.
     * @param numUnencryptedLogs - The number of unencrypted logs to include in each transaction.
     * @returns The L2 block.
     */
    static random(l2BlockNum, txsPerBlock = 4, numPrivateFunctionCalls = 2, numPublicFunctionCalls = 3, numEncryptedLogs = 2, numUnencryptedLogs = 1) {
        const newNullifiers = times(MAX_NEW_NULLIFIERS_PER_TX * txsPerBlock, Fr.random);
        const newCommitments = times(MAX_NEW_COMMITMENTS_PER_TX * txsPerBlock, Fr.random);
        const newContracts = times(MAX_NEW_CONTRACTS_PER_TX * txsPerBlock, Fr.random);
        const newContractData = times(MAX_NEW_CONTRACTS_PER_TX * txsPerBlock, ContractData.random);
        const newPublicDataWrites = times(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * txsPerBlock, PublicDataWrite.random);
        const newL1ToL2Messages = times(NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP, Fr.random);
        const newL2ToL1Msgs = times(MAX_NEW_L2_TO_L1_MSGS_PER_TX, Fr.random);
        const newEncryptedLogs = L2BlockL2Logs.random(txsPerBlock, numPrivateFunctionCalls, numEncryptedLogs);
        const newUnencryptedLogs = L2BlockL2Logs.random(txsPerBlock, numPublicFunctionCalls, numUnencryptedLogs);
        return L2Block.fromFields({
            number: l2BlockNum,
            globalVariables: makeGlobalVariables(0, l2BlockNum),
            startPrivateDataTreeSnapshot: makeAppendOnlyTreeSnapshot(0),
            startNullifierTreeSnapshot: makeAppendOnlyTreeSnapshot(0),
            startContractTreeSnapshot: makeAppendOnlyTreeSnapshot(0),
            startPublicDataTreeRoot: Fr.random(),
            startL1ToL2MessagesTreeSnapshot: makeAppendOnlyTreeSnapshot(0),
            startHistoricBlocksTreeSnapshot: makeAppendOnlyTreeSnapshot(0),
            endPrivateDataTreeSnapshot: makeAppendOnlyTreeSnapshot(newCommitments.length),
            endNullifierTreeSnapshot: makeAppendOnlyTreeSnapshot(newNullifiers.length),
            endContractTreeSnapshot: makeAppendOnlyTreeSnapshot(newContracts.length),
            endPublicDataTreeRoot: Fr.random(),
            endL1ToL2MessagesTreeSnapshot: makeAppendOnlyTreeSnapshot(1),
            endHistoricBlocksTreeSnapshot: makeAppendOnlyTreeSnapshot(1),
            newCommitments,
            newNullifiers,
            newContracts,
            newContractData,
            newPublicDataWrites,
            newL1ToL2Messages,
            newL2ToL1Msgs,
            newEncryptedLogs,
            newUnencryptedLogs,
        });
    }
    /**
     * Constructs a new instance from named fields.
     * @param fields - Fields to pass to the constructor.
     * @param blockHash - Hash of the block.
     * @returns A new instance.
     */
    static fromFields(fields, blockHash) {
        return new this(fields.number, fields.globalVariables, fields.startPrivateDataTreeSnapshot, fields.startNullifierTreeSnapshot, fields.startContractTreeSnapshot, fields.startPublicDataTreeRoot, fields.startL1ToL2MessagesTreeSnapshot, fields.startHistoricBlocksTreeSnapshot, fields.endPrivateDataTreeSnapshot, fields.endNullifierTreeSnapshot, fields.endContractTreeSnapshot, fields.endPublicDataTreeRoot, fields.endL1ToL2MessagesTreeSnapshot, fields.endHistoricBlocksTreeSnapshot, fields.newCommitments, fields.newNullifiers, fields.newPublicDataWrites, fields.newL2ToL1Msgs, fields.newContracts, fields.newContractData, fields.newL1ToL2Messages, fields.newEncryptedLogs, fields.newUnencryptedLogs, blockHash);
    }
    /**
     * Encode the L2 block data into a buffer that can be pushed to the rollup contract.
     * @returns The encoded L2 block data.
     */
    encode() {
        if (this.newEncryptedLogs === undefined || this.newUnencryptedLogs === undefined) {
            throw new Error('newEncryptedLogs and newUnencryptedLogs must be defined when encoding L2BlockData');
        }
        return serializeToBuffer(this.globalVariables, this.startPrivateDataTreeSnapshot, this.startNullifierTreeSnapshot, this.startContractTreeSnapshot, this.startPublicDataTreeRoot, this.startL1ToL2MessagesTreeSnapshot, this.startHistoricBlocksTreeSnapshot, this.endPrivateDataTreeSnapshot, this.endNullifierTreeSnapshot, this.endContractTreeSnapshot, this.endPublicDataTreeRoot, this.endL1ToL2MessagesTreeSnapshot, this.endHistoricBlocksTreeSnapshot, this.newCommitments.length, this.newCommitments, this.newNullifiers.length, this.newNullifiers, this.newPublicDataWrites.length, this.newPublicDataWrites, this.newL2ToL1Msgs.length, this.newL2ToL1Msgs, this.newContracts.length, this.newContracts, this.newContractData, this.newL1ToL2Messages.length, this.newL1ToL2Messages, this.newEncryptedLogs, this.newUnencryptedLogs);
    }
    /**
     * Alias for encode.
     * @returns The encoded L2 block data.
     */
    toBuffer() {
        return this.encode();
    }
    /**
     * Decode the L2 block data from a buffer.
     * @param encoded - The encoded L2 block data.
     * @returns The decoded L2 block data.
     */
    static decode(encoded) {
        const reader = BufferReader.asReader(encoded);
        const globalVariables = reader.readObject(GlobalVariables);
        const number = Number(globalVariables.blockNumber.value);
        const startPrivateDataTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const startNullifierTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const startContractTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const startPublicDataTreeRoot = reader.readObject(Fr);
        const startL1ToL2MessagesTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const startHistoricBlocksTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const endPrivateDataTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const endNullifierTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const endContractTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const endPublicDataTreeRoot = reader.readObject(Fr);
        const endL1ToL2MessagesTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const endHistoricBlocksTreeSnapshot = reader.readObject(AppendOnlyTreeSnapshot);
        const newCommitments = reader.readVector(Fr);
        const newNullifiers = reader.readVector(Fr);
        const newPublicDataWrites = reader.readVector(PublicDataWrite);
        const newL2ToL1Msgs = reader.readVector(Fr);
        const newContracts = reader.readVector(Fr);
        const newContractData = reader.readArray(newContracts.length, ContractData);
        // TODO(sean): could an optimisation of this be that it is encoded such that zeros are assumed
        const newL1ToL2Messages = reader.readVector(Fr);
        const newEncryptedLogs = reader.readObject(L2BlockL2Logs);
        const newUnencryptedLogs = reader.readObject(L2BlockL2Logs);
        return L2Block.fromFields({
            number,
            globalVariables,
            startPrivateDataTreeSnapshot,
            startNullifierTreeSnapshot,
            startContractTreeSnapshot,
            startPublicDataTreeRoot,
            startL1ToL2MessagesTreeSnapshot: startL1ToL2MessagesTreeSnapshot,
            startHistoricBlocksTreeSnapshot,
            endPrivateDataTreeSnapshot,
            endNullifierTreeSnapshot,
            endContractTreeSnapshot,
            endPublicDataTreeRoot,
            endL1ToL2MessagesTreeSnapshot,
            endHistoricBlocksTreeSnapshot,
            newCommitments,
            newNullifiers,
            newPublicDataWrites,
            newL2ToL1Msgs,
            newContracts,
            newContractData,
            newL1ToL2Messages,
            newEncryptedLogs,
            newUnencryptedLogs,
        });
    }
    /**
     * Helper function to attach logs related to a block.
     * @param logs - The logs to be attached to a block.
     * @param logType - The type of logs to be attached.
     * @remarks Here, because we can have L2 blocks without logs and those logs can be attached later.
     */
    attachLogs(logs, logType) {
        const logFieldName = logType === LogType.ENCRYPTED ? 'newEncryptedLogs' : 'newUnencryptedLogs';
        if (this[logFieldName]) {
            if (this[logFieldName] === logs) {
                // Comparing objects only by references is enough in this case since this should occur only when exactly
                // the same object is passed in and not a copy.
                L2Block.logger(`${logFieldName} logs already attached`);
                return;
            }
            throw new Error(`Trying to attach different ${logFieldName} logs to block ${this.number}.`);
        }
        L2Block.logger(`Attaching ${logFieldName} logs`);
        const numTxs = this.newCommitments.length / MAX_NEW_COMMITMENTS_PER_TX;
        if (numTxs !== logs.txLogs.length) {
            throw new Error(`Number of txLogs within ${logFieldName} does not match number of transactions. Expected: ${numTxs} Got: ${logs.txLogs.length}`);
        }
        this[logFieldName] = logs;
    }
    /**
     * Returns the block's hash.
     * @returns The block's hash.
     */
    getBlockHash() {
        if (!this.blockHash) {
            this.blockHash = keccak(this.encode());
        }
        return this.blockHash;
    }
    /**
     * Computes the public inputs hash for the L2 block.
     * The same output as the hash of RootRollupPublicInputs.
     * @returns The public input hash for the L2 block as a field element.
     */
    getPublicInputsHash() {
        const buf = serializeToBuffer(this.globalVariables, this.startPrivateDataTreeSnapshot, this.startNullifierTreeSnapshot, this.startContractTreeSnapshot, this.startPublicDataTreeRoot, this.startL1ToL2MessagesTreeSnapshot, this.startHistoricBlocksTreeSnapshot, this.endPrivateDataTreeSnapshot, this.endNullifierTreeSnapshot, this.endContractTreeSnapshot, this.endPublicDataTreeRoot, this.endL1ToL2MessagesTreeSnapshot, this.endHistoricBlocksTreeSnapshot, this.getCalldataHash(), this.getL1ToL2MessagesHash());
        return sha256ToField(buf);
    }
    /**
     * Computes the start state hash (should equal contract data before block).
     * @returns The start state hash for the L2 block.
     */
    getStartStateHash() {
        const inputValue = serializeToBuffer(new Fr(this.number - 1), this.startPrivateDataTreeSnapshot, this.startNullifierTreeSnapshot, this.startContractTreeSnapshot, this.startPublicDataTreeRoot, this.startL1ToL2MessagesTreeSnapshot, this.startHistoricBlocksTreeSnapshot);
        return sha256(inputValue);
    }
    /**
     * Computes the end state hash (should equal contract data after block).
     * @returns The end state hash for the L2 block.
     */
    getEndStateHash() {
        const inputValue = serializeToBuffer(this.globalVariables.blockNumber, this.endPrivateDataTreeSnapshot, this.endNullifierTreeSnapshot, this.endContractTreeSnapshot, this.endPublicDataTreeRoot, this.endL1ToL2MessagesTreeSnapshot, this.endHistoricBlocksTreeSnapshot);
        return sha256(inputValue);
    }
    /**
     * Computes the calldata hash for the L2 block
     * This calldata hash is also computed by the rollup contract when the block is submitted,
     * and inside the circuit, it is part of the public inputs.
     * @returns The calldata hash.
     */
    getCalldataHash() {
        if (this.newEncryptedLogs === undefined) {
            throw new Error('Encrypted logs has to be attached before calling "getCalldataHash"');
        }
        if (this.newUnencryptedLogs === undefined) {
            throw new Error('Unencrypted logs has to be attached before calling "getCalldataHash"');
        }
        const computeRoot = (leafs) => {
            const layers = [leafs];
            let activeLayer = 0;
            while (layers[activeLayer].length > 1) {
                const layer = [];
                const layerLength = layers[activeLayer].length;
                for (let i = 0; i < layerLength; i += 2) {
                    const left = layers[activeLayer][i];
                    const right = layers[activeLayer][i + 1];
                    layer.push(sha256(Buffer.concat([left, right])));
                }
                layers.push(layer);
                activeLayer++;
            }
            return layers[layers.length - 1][0];
        };
        const leafCount = this.newCommitments.length / (MAX_NEW_COMMITMENTS_PER_TX * 2);
        const leafs = [];
        for (let i = 0; i < leafCount; i++) {
            const commitmentsPerBase = MAX_NEW_COMMITMENTS_PER_TX * 2;
            const nullifiersPerBase = MAX_NEW_NULLIFIERS_PER_TX * 2;
            const publicDataUpdateRequestsPerBase = MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * 2;
            const l2ToL1MsgsPerBase = MAX_NEW_L2_TO_L1_MSGS_PER_TX * 2;
            const commitmentsBuffer = Buffer.concat(this.newCommitments.slice(i * commitmentsPerBase, (i + 1) * commitmentsPerBase).map(x => x.toBuffer()));
            const nullifiersBuffer = Buffer.concat(this.newNullifiers.slice(i * nullifiersPerBase, (i + 1) * nullifiersPerBase).map(x => x.toBuffer()));
            const publicDataUpdateRequestsBuffer = Buffer.concat(this.newPublicDataWrites
                .slice(i * publicDataUpdateRequestsPerBase, (i + 1) * publicDataUpdateRequestsPerBase)
                .map(x => x.toBuffer()));
            const newL2ToL1MsgsBuffer = Buffer.concat(this.newL2ToL1Msgs.slice(i * l2ToL1MsgsPerBase, (i + 1) * l2ToL1MsgsPerBase).map(x => x.toBuffer()));
            const encryptedLogsHashKernel0 = L2Block.computeKernelLogsHash(this.newEncryptedLogs.txLogs[i * 2]);
            const encryptedLogsHashKernel1 = L2Block.computeKernelLogsHash(this.newEncryptedLogs.txLogs[i * 2 + 1]);
            const unencryptedLogsHashKernel0 = L2Block.computeKernelLogsHash(this.newUnencryptedLogs.txLogs[i * 2]);
            const unencryptedLogsHashKernel1 = L2Block.computeKernelLogsHash(this.newUnencryptedLogs.txLogs[i * 2 + 1]);
            const inputValue = Buffer.concat([
                commitmentsBuffer,
                nullifiersBuffer,
                publicDataUpdateRequestsBuffer,
                newL2ToL1MsgsBuffer,
                this.newContracts[i * 2].toBuffer(),
                this.newContracts[i * 2 + 1].toBuffer(),
                this.newContractData[i * 2].contractAddress.toBuffer(),
                this.newContractData[i * 2].portalContractAddress.toBuffer32(),
                this.newContractData[i * 2 + 1].contractAddress.toBuffer(),
                this.newContractData[i * 2 + 1].portalContractAddress.toBuffer32(),
                encryptedLogsHashKernel0,
                encryptedLogsHashKernel1,
                unencryptedLogsHashKernel0,
                unencryptedLogsHashKernel1,
            ]);
            leafs.push(sha256(inputValue));
        }
        return computeRoot(leafs);
    }
    /**
     * Compute the hash of all of this blocks l1 to l2 messages,
     * The hash is also calculated within the contract when the block is submitted.
     * @returns The hash of all of the l1 to l2 messages.
     */
    getL1ToL2MessagesHash() {
        // Create a long buffer of all of the l1 to l2 messages
        const l1ToL2Messages = Buffer.concat(this.newL1ToL2Messages.map(message => message.toBuffer()));
        return sha256(l1ToL2Messages);
    }
    /**
     * Get the ith transaction in an L2 block.
     * @param txIndex - The index of the tx in the block.
     * @returns The tx.
     */
    getTx(txIndex) {
        if (txIndex >= this.numberOfTxs) {
            throw new Error(`Failed to get tx ${txIndex}. Block ${this.globalVariables.blockNumber} only has ${this.numberOfTxs} txs.`);
        }
        const newCommitments = this.newCommitments.slice(MAX_NEW_COMMITMENTS_PER_TX * txIndex, MAX_NEW_COMMITMENTS_PER_TX * (txIndex + 1));
        const newNullifiers = this.newNullifiers.slice(MAX_NEW_NULLIFIERS_PER_TX * txIndex, MAX_NEW_NULLIFIERS_PER_TX * (txIndex + 1));
        const newPublicDataWrites = this.newPublicDataWrites.slice(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * txIndex, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * (txIndex + 1));
        const newL2ToL1Msgs = this.newL2ToL1Msgs.slice(MAX_NEW_L2_TO_L1_MSGS_PER_TX * txIndex, MAX_NEW_L2_TO_L1_MSGS_PER_TX * (txIndex + 1));
        const newContracts = this.newContracts.slice(MAX_NEW_CONTRACTS_PER_TX * txIndex, MAX_NEW_CONTRACTS_PER_TX * (txIndex + 1));
        const newContractData = this.newContractData.slice(MAX_NEW_CONTRACTS_PER_TX * txIndex, MAX_NEW_CONTRACTS_PER_TX * (txIndex + 1));
        return new L2Tx(newCommitments, newNullifiers, newPublicDataWrites, newL2ToL1Msgs, newContracts, newContractData, this.getBlockHash(), this.number);
    }
    /**
     * Get all the transaction in an L2 block.
     * @returns The txx.
     */
    getTxs() {
        return Array(this.numberOfTxs)
            .fill(0)
            .map((_, i) => this.getTx(i));
    }
    /**
     * Inspect for debugging purposes..
     * @param maxBufferSize - The number of bytes to be extracted from buffer.
     * @returns A human-friendly string representation of the l2Block.
     */
    inspect(maxBufferSize = 4) {
        const inspectHex = (fr) => `0x${fr.toBuffer().subarray(0, maxBufferSize).toString('hex')}`;
        const inspectArray = (arr, inspector) => '[' + arr.map(inspector).join(', ') + ']';
        const inspectTreeSnapshot = (s) => `(${s.nextAvailableLeafIndex}, ${inspectHex(s.root)})`;
        const inspectGlobalVariables = (gv) => {
            return `(${gv.chainId}, ${gv.version}, ${gv.blockNumber}, ${gv.timestamp}))`;
        };
        const inspectFrArray = (arr) => inspectArray(arr, inspectHex);
        const inspectContractDataArray = (arr) => inspectArray(arr, cd => `(${inspectHex(cd.contractAddress)}, ${inspectHex(cd.portalContractAddress)})`);
        const inspectPublicDataWriteArray = (arr) => inspectArray(arr, pdw => `(${inspectHex(pdw.leafIndex)}, ${inspectHex(pdw.newValue)})`);
        return [
            `L2Block`,
            `number: ${this.number}`,
            `globalVariables: ${inspectGlobalVariables(this.globalVariables)}`,
            `startPrivateDataTreeSnapshot: ${inspectTreeSnapshot(this.startPrivateDataTreeSnapshot)}`,
            `startNullifierTreeSnapshot: ${inspectTreeSnapshot(this.startNullifierTreeSnapshot)}`,
            `startContractTreeSnapshot: ${inspectTreeSnapshot(this.startContractTreeSnapshot)}`,
            `startPublicDataTreeRoot: ${this.startPublicDataTreeRoot.toString()}`,
            `startL1ToL2MessagesTreeSnapshot: ${inspectTreeSnapshot(this.startL1ToL2MessagesTreeSnapshot)}`,
            `startHistoricBlocksTreeSnapshot: ${inspectTreeSnapshot(this.startHistoricBlocksTreeSnapshot)}`,
            `endPrivateDataTreeSnapshot: ${inspectTreeSnapshot(this.endPrivateDataTreeSnapshot)}`,
            `endNullifierTreeSnapshot: ${inspectTreeSnapshot(this.endNullifierTreeSnapshot)}`,
            `endContractTreeSnapshot: ${inspectTreeSnapshot(this.endContractTreeSnapshot)}`,
            `endPublicDataTreeRoot: ${this.endPublicDataTreeRoot.toString()}`,
            `endPublicDataTreeRoot: ${this.endPublicDataTreeRoot.toString()}`,
            `endL1ToL2MessagesTreeSnapshot: ${inspectTreeSnapshot(this.endL1ToL2MessagesTreeSnapshot)}`,
            `endHistoricBlocksTreeSnapshot: ${inspectTreeSnapshot(this.endHistoricBlocksTreeSnapshot)}`,
            `newCommitments: ${inspectFrArray(this.newCommitments)}`,
            `newNullifiers: ${inspectFrArray(this.newNullifiers)}`,
            `newPublicDataWrite: ${inspectPublicDataWriteArray(this.newPublicDataWrites)}`,
            `newL2ToL1Msgs: ${inspectFrArray(this.newL2ToL1Msgs)}`,
            `newContracts: ${inspectFrArray(this.newContracts)}`,
            `newContractData: ${inspectContractDataArray(this.newContractData)}`,
            `newPublicDataWrite: ${inspectPublicDataWriteArray(this.newPublicDataWrites)}`,
            `newL1ToL2Messages: ${inspectFrArray(this.newL1ToL2Messages)}`,
        ].join('\n');
    }
    /**
     * Computes logs hash as is done in the kernel and app circuits.
     * @param logs - Logs to be hashed.
     * @returns The hash of the logs.
     * Note: This is a TS implementation of `computeKernelLogsHash` function in Decoder.sol. See that function documentation
     *       for more details.
     */
    static computeKernelLogsHash(logs) {
        const logsHashes = [Buffer.alloc(32), Buffer.alloc(32)];
        let kernelPublicInputsLogsHash = Buffer.alloc(32);
        for (const functionLogs of logs.functionLogs) {
            logsHashes[0] = kernelPublicInputsLogsHash;
            logsHashes[1] = functionLogs.hash(); // privateCircuitPublicInputsLogsHash
            // Hash logs hash from the public inputs of previous kernel iteration and logs hash from private circuit public inputs
            kernelPublicInputsLogsHash = sha256(Buffer.concat(logsHashes));
        }
        return kernelPublicInputsLogsHash;
    }
}
/* Having logger static to avoid issues with comparing 2 block */
L2Block.logger = createDebugLogger('aztec:l2_block');
//# sourceMappingURL=data:application/json;base64,