import { BufferReader, serializeToBuffer } from '@aztec/circuits.js/utils';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
/**
 * The format of an L1 to L2 Message.
 */
export class L1ToL2Message {
    constructor(
    /**
     * The sender of the message on L1.
     */
    sender, 
    /**
     * The recipient of the message on L2.
     */
    recipient, 
    /**
     * The message content.
     */
    content, 
    /**
     * The hash of the spending secret.
     */
    secretHash, 
    /**
     * The deadline for the message.
     */
    deadline, 
    /**
     * The fee for the message.
     */
    fee, 
    /**
     * The entry key for the message - optional.
     */
    entryKey) {
        this.sender = sender;
        this.recipient = recipient;
        this.content = content;
        this.secretHash = secretHash;
        this.deadline = deadline;
        this.fee = fee;
        this.entryKey = entryKey;
    }
    /**
     * Returns each element within its own field so that it can be consumed by an acvm oracle call.
     * @returns The message as an array of fields (in order).
     */
    toFieldArray() {
        return [
            ...this.sender.toFieldArray(),
            ...this.recipient.toFieldArray(),
            this.content,
            this.secretHash,
            new Fr(BigInt(this.deadline)),
            new Fr(BigInt(this.fee)),
        ];
    }
    toBuffer() {
        return serializeToBuffer(this.sender, this.recipient, this.content, this.secretHash, this.deadline, this.fee);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const sender = reader.readObject(L1Actor);
        const recipient = reader.readObject(L2Actor);
        const content = reader.readFr();
        const secretHash = reader.readFr();
        const deadline = reader.readNumber();
        const fee = reader.readNumber();
        return new L1ToL2Message(sender, recipient, content, secretHash, deadline, fee);
    }
    static empty() {
        return new L1ToL2Message(L1Actor.empty(), L2Actor.empty(), Fr.ZERO, Fr.ZERO, 0, 0);
    }
    static random() {
        return new L1ToL2Message(L1Actor.random(), L2Actor.random(), Fr.random(), Fr.random(), Math.floor(Math.random() * 1000), Math.floor(Math.random() * 1000));
    }
}
/**
 * The sender of an L1 to L2 message.
 */
export class L1Actor {
    constructor(
    /**
     * The sender of the message.
     */
    sender, 
    /**
     * The chain id on which the message was sent.
     */
    chainId) {
        this.sender = sender;
        this.chainId = chainId;
    }
    static empty() {
        return new L1Actor(EthAddress.ZERO, 0);
    }
    toFieldArray() {
        return [this.sender.toField(), new Fr(BigInt(this.chainId))];
    }
    toBuffer() {
        return serializeToBuffer(this.sender, this.chainId);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const ethAddr = new EthAddress(reader.readBytes(32));
        const chainId = reader.readNumber();
        return new L1Actor(ethAddr, chainId);
    }
    static random() {
        return new L1Actor(EthAddress.random(), Math.floor(Math.random() * 1000));
    }
}
/**
 * The recipient of an L2 message.
 */
export class L2Actor {
    constructor(
    /**
     * The recipient of the message.
     */
    recipient, 
    /**
     * The version of the protocol.
     */
    version) {
        this.recipient = recipient;
        this.version = version;
    }
    static empty() {
        return new L2Actor(AztecAddress.ZERO, 0);
    }
    toFieldArray() {
        return [this.recipient.toField(), new Fr(BigInt(this.version))];
    }
    toBuffer() {
        return serializeToBuffer(this.recipient, this.version);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const aztecAddr = AztecAddress.fromBuffer(reader);
        const version = reader.readNumber();
        return new L2Actor(aztecAddr, version);
    }
    static random() {
        return new L2Actor(AztecAddress.random(), Math.floor(Math.random() * 1000));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDFfdG9fbDJfbWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sMV90b19sMl9tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQW9DOUM7O0dBRUc7QUFDSCxNQUFNLE9BQU8sYUFBYTtJQUN4QjtJQUNFOztPQUVHO0lBQ2EsTUFBZTtJQUMvQjs7T0FFRztJQUNhLFNBQWtCO0lBQ2xDOztPQUVHO0lBQ2EsT0FBVztJQUMzQjs7T0FFRztJQUNhLFVBQWM7SUFDOUI7O09BRUc7SUFDYSxRQUFnQjtJQUNoQzs7T0FFRztJQUNhLEdBQVc7SUFDM0I7O09BRUc7SUFDYSxRQUFhO1FBeEJiLFdBQU0sR0FBTixNQUFNLENBQVM7UUFJZixjQUFTLEdBQVQsU0FBUyxDQUFTO1FBSWxCLFlBQU8sR0FBUCxPQUFPLENBQUk7UUFJWCxlQUFVLEdBQVYsVUFBVSxDQUFJO1FBSWQsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUloQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBSVgsYUFBUSxHQUFSLFFBQVEsQ0FBSztJQUM1QixDQUFDO0lBRUo7OztPQUdHO0lBQ0gsWUFBWTtRQUNWLE9BQU87WUFDTCxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO1lBQzdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU87WUFDWixJQUFJLENBQUMsVUFBVTtZQUNmLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFD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