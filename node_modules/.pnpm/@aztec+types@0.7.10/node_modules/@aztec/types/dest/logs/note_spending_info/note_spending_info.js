import { AztecAddress } from '@aztec/circuits.js';
import { serializeToBuffer } from '@aztec/circuits.js/utils';
import { Fr, GrumpkinScalar } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { decryptBuffer, encryptBuffer } from './encrypt_buffer.js';
import { NotePreimage } from './note_preimage.js';
/**
 * A class which wraps the data required to compute a nullifier/to spend a note. Along with that this class contains
 * the necessary functionality to encrypt and decrypt the data.
 */
export class NoteSpendingInfo {
    constructor(
    /**
     * Preimage which can be used along with private key to compute nullifier.
     */
    notePreimage, 
    /**
     * Address of the contract this tx is interacting with.
     */
    contractAddress, 
    /**
     * Storage slot of the contract this tx is interacting with.
     */
    storageSlot) {
        this.notePreimage = notePreimage;
        this.contractAddress = contractAddress;
        this.storageSlot = storageSlot;
    }
    /**
     * Deserializes the NoteSpendingInfo object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of NoteSpendingInfo.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new NoteSpendingInfo(reader.readObject(NotePreimage), reader.readObject(AztecAddress), reader.readFr());
    }
    /**
     * Serializes the NoteSpendingInfo object into a Buffer.
     * @returns Buffer representation of the NoteSpendingInfo object.
     */
    toBuffer() {
        return serializeToBuffer([this.notePreimage, this.contractAddress, this.storageSlot]);
    }
    /**
     * Encrypt the NoteSpendingInfo object using the owner's public key and the ephemeral private key.
     * @param ownerPubKey - Public key of the owner of the NoteSpendingInfo object.
     * @param curve - The curve instance to use.
     * @returns The encrypted NoteSpendingInfo object.
     */
    toEncryptedBuffer(ownerPubKey, curve) {
        const ephPrivKey = GrumpkinScalar.random();
        return encryptBuffer(this.toBuffer(), ownerPubKey, ephPrivKey, curve);
    }
    /**
     * Decrypts the NoteSpendingInfo object using the owner's private key.
     * @param data - Encrypted NoteSpendingInfo object.
     * @param ownerPrivKey - Private key of the owner of the NoteSpendingInfo object.
     * @param curve - The curve instance to use.
     * @returns Instance of NoteSpendingInfo if the decryption was successful, undefined otherwise.
     */
    static fromEncryptedBuffer(data, ownerPrivKey, curve) {
        const buf = decryptBuffer(data, ownerPrivKey, curve);
        if (!buf) {
            return;
        }
        return NoteSpendingInfo.fromBuffer(buf);
    }
    /**
     * Create a random NoteSpendingInfo object (useful for testing purposes).
     * @returns A random NoteSpendingInfo object.
     */
    static random() {
        return new NoteSpendingInfo(NotePreimage.random(), AztecAddress.random(), Fr.random());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZV9zcGVuZGluZ19pbmZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xvZ3Mvbm90ZV9zcGVuZGluZ19pbmZvL25vdGVfc3BlbmRpbmdfaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFpQyxNQUFNLG9CQUFvQixDQUFDO0FBRWpGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxFQUFFLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNELE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxEOzs7R0FHRztBQUNILE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0I7SUFDRTs7T0FFRztJQUNJLFlBQTBCO0lBQ2pDOztPQUVHO0lBQ0ksZUFBNkI7SUFDcEM7O09BRUc7SUFDSSxXQUFlO1FBUmYsaUJBQVksR0FBWixZQUFZLENBQWM7UUFJMUIsb0JBQWUsR0FBZixlQUFlLENBQWM7UUFJN0IsZ0JBQVcsR0FBWCxXQUFXLENBQUk7SUFDckIsQ0FBQztJQUVKOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNqSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksaUJBQWlCLENBQUMsV0FBc0IsRUFBRSxLQUFlO1FBQzlELE1BQU0sVUFBVSxHQUF1QixjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDL0QsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxtQkFBbUIsQ0FDeEIsSUFBWSxFQUNaLFlBQWdDLEVBQ2hDLEtBQWU7UUFFZixNQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTztTQUNSO1FBQ0QsT0FBTyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxNQUFNO1FBQ1gsT0FBTyxJQUFJLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDekYsQ0FBQztDQUNGIn0=