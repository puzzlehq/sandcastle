/// <reference types="node" resolution-mode="require"/>
import { BufferReader } from '@aztec/foundation/serialize';
import { FunctionL2Logs } from './function_l2_logs.js';
/**
 * Data container of logs emitted in 1 tx.
 */
export declare class TxL2Logs {
    /**
     * An array containing logs emitted in individual function invocations in this tx.
     */
    readonly functionLogs: FunctionL2Logs[];
    constructor(
    /**
     * An array containing logs emitted in individual function invocations in this tx.
     */
    functionLogs: FunctionL2Logs[]);
    /**
     * Serializes logs into a buffer.
     * @returns A buffer containing the serialized logs.
     */
    toBuffer(): Buffer;
    /**
     * Get the total length of serialized data.
     * @returns Total length of serialized data.
     */
    getSerializedLength(): number;
    /**
     * Adds function logs to the existing logs.
     * @param functionLogs - The function logs to add
     * @remarks Used by sequencer to append unencrypted logs emitted in public function calls.
     */
    addFunctionLogs(functionLogs: FunctionL2Logs[]): void;
    /**
     * Deserializes logs from a buffer.
     * @param buf - The buffer containing the serialized logs.
     * @param isLengthPrefixed - Whether the buffer is prefixed with 4 bytes for its total length.
     * @returns A new L2Logs object.
     */
    static fromBuffer(buf: Buffer | BufferReader, isLengthPrefixed?: boolean): TxL2Logs;
    /**
     * Creates a new `TxL2Logs` object with `numFunctionInvocations` function logs and `numLogsIn1Invocation` logs
     * in each invocation.
     * @param numFunctionInvocations - The number of function invocations in the tx.
     * @param numLogsIn1Invocation - The number of logs emitted in each function invocation.
     * @returns A new `TxL2Logs` object.
     */
    static random(numFunctionInvocations: number, numLogsIn1Invocation: number): TxL2Logs;
    /**
     * Convert a TxL2Logs class object to a plain JSON object.
     * @returns A plain object with TxL2Logs properties.
     */
    toJSON(): {
        functionLogs: {
            logs: string[];
        }[];
    };
    /**
     * Convert a plain JSON object to a TxL2Logs class object.
     * @param obj - A plain TxL2Logs JSON object.
     * @returns A TxL2Logs class object.
     */
    static fromJSON(obj: any): TxL2Logs;
}
//# sourceMappingURL=tx_l2_logs.d.ts.map