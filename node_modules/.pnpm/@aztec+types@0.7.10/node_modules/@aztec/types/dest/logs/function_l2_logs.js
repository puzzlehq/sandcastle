import { sha256 } from '@aztec/foundation/crypto';
import { Point } from '@aztec/foundation/fields';
import { BufferReader, serializeBufferToVector } from '@aztec/foundation/serialize';
import { randomBytes } from 'crypto';
/**
 * Data container of logs emitted in 1 function invocation (corresponds to 1 kernel iteration).
 */
export class FunctionL2Logs {
    constructor(
    /**
     * An array of logs.
     */
    logs) {
        this.logs = logs;
    }
    /**
     * Serializes all function logs into a buffer.
     * @returns A buffer containing the serialized logs.
     * @remarks Each log is prefixed with 4 bytes for its length, then all the serialized logs are concatenated and
     *          the resulting buffer is prefixed with 4 bytes for its total length.
     */
    toBuffer() {
        const serializedLogs = this.logs.map(buffer => serializeBufferToVector(buffer));
        return serializeBufferToVector(Buffer.concat(serializedLogs));
    }
    /**
     * Get the total length of all serialized data
     * @returns Total length of serialized data.
     */
    getSerializedLength() {
        // Adding 4 to each log's length to account for the size stored in the serialized buffer and then one more time
        // adding 4 for the resulting buffer length.
        return this.logs.reduce((acc, log) => acc + log.length + 4, 0) + 4;
    }
    /**
     * Calculates hash of serialized logs.
     * @returns 2 fields containing all 256 bits of information of sha256 hash.
     */
    hash() {
        // Remove first 4 bytes that are occupied by length which is not part of the preimage in contracts and L2Blocks
        const preimage = this.toBuffer().subarray(4);
        return sha256(preimage);
    }
    /**
     * Deserializes logs from a buffer.
     * @param buf - The buffer containing the serialized logs.
     * @param isLengthPrefixed - Whether the buffer is prefixed with 4 bytes for its total length.
     * @returns Deserialized instance of `FunctionL2Logs`.
     */
    static fromBuffer(buf, isLengthPrefixed = true) {
        const reader = new BufferReader(buf, 0);
        // If the buffer is length prefixed use the length to read the array. Otherwise, the entire buffer is consumed.
        const logsBufLength = isLengthPrefixed ? reader.readNumber() : -1;
        const logs = reader.readBufferArray(logsBufLength);
        return new FunctionL2Logs(logs);
    }
    /**
     * Creates a new L2Logs object with `numLogs` logs.
     * @param numLogs - The number of logs to create.
     * @returns A new FunctionL2Logs object.
     */
    static random(numLogs) {
        const logs = [];
        for (let i = 0; i < numLogs; i++) {
            const randomEphPubKey = Point.random();
            const randomLogContent = randomBytes(144 - Point.SIZE_IN_BYTES);
            logs.push(Buffer.concat([randomLogContent, randomEphPubKey.toBuffer()]));
        }
        return new FunctionL2Logs(logs);
    }
    /**
     * Creates an empty L2Logs object with no logs.
     * @returns A new FunctionL2Logs object with no logs.
     */
    static empty() {
        return new FunctionL2Logs([]);
    }
    /**
     * Convert a FunctionL2Logs class object to a plain JSON object.
     * @returns A plain object with FunctionL2Logs properties.
     */
    toJSON() {
        return {
            logs: this.logs.map(log => log.toString('hex')),
        };
    }
    /**
     * Convert a plain JSON object to a FunctionL2Logs class object.
     * @param obj - A plain FunctionL2Logs JSON object.
     * @returns A FunctionL2Logs class object.
     */
    static fromJSON(obj) {
        const logs = obj.logs.map((log) => Buffer.from(log, 'hex'));
        return new FunctionL2Logs(logs);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25fbDJfbG9ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dzL2Z1bmN0aW9uX2wyX2xvZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFcEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVyQzs7R0FFRztBQUNILE1BQU0sT0FBTyxjQUFjO0lBQ3pCO0lBQ0U7O09BRUc7SUFDYSxJQUFjO1FBQWQsU0FBSSxHQUFKLElBQUksQ0FBVTtJQUM3QixDQUFDO0lBRUo7Ozs7O09BS0c7SUFDSSxRQUFRO1FBQ2IsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLE9BQU8sdUJBQXVCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7O09BR0c7SUFDSSxtQkFBbUI7UUFDeEIsK0dBQStHO1FBQy9HLDRDQUE0QztRQUM1QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksSUFBSTtRQUNULCtHQUErRztRQUMvRyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVyxFQUFFLGdCQUFnQixHQUFHLElBQUk7UUFDM0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXhDLCtHQUErRztRQUMvRyxNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRW5ELE9BQU8sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQWU7UUFDbEMsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDaEMsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDaEUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFFO1FBQ0QsT0FBTyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLEtBQUs7UUFDakIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTTtRQUNYLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2hELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBUTtRQUM3QixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNwRSxPQUFPLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRiJ9