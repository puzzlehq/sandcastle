/// <reference types="node" resolution-mode="require"/>
import { AztecAddress, GrumpkinPrivateKey, PublicKey } from '@aztec/circuits.js';
import { Grumpkin } from '@aztec/circuits.js/barretenberg';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { NotePreimage } from './note_preimage.js';
/**
 * A class which wraps the data required to compute a nullifier/to spend a note. Along with that this class contains
 * the necessary functionality to encrypt and decrypt the data.
 */
export declare class NoteSpendingInfo {
    /**
     * Preimage which can be used along with private key to compute nullifier.
     */
    notePreimage: NotePreimage;
    /**
     * Address of the contract this tx is interacting with.
     */
    contractAddress: AztecAddress;
    /**
     * Storage slot of the contract this tx is interacting with.
     */
    storageSlot: Fr;
    constructor(
    /**
     * Preimage which can be used along with private key to compute nullifier.
     */
    notePreimage: NotePreimage, 
    /**
     * Address of the contract this tx is interacting with.
     */
    contractAddress: AztecAddress, 
    /**
     * Storage slot of the contract this tx is interacting with.
     */
    storageSlot: Fr);
    /**
     * Deserializes the NoteSpendingInfo object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of NoteSpendingInfo.
     */
    static fromBuffer(buffer: Buffer | BufferReader): NoteSpendingInfo;
    /**
     * Serializes the NoteSpendingInfo object into a Buffer.
     * @returns Buffer representation of the NoteSpendingInfo object.
     */
    toBuffer(): Buffer;
    /**
     * Encrypt the NoteSpendingInfo object using the owner's public key and the ephemeral private key.
     * @param ownerPubKey - Public key of the owner of the NoteSpendingInfo object.
     * @param curve - The curve instance to use.
     * @returns The encrypted NoteSpendingInfo object.
     */
    toEncryptedBuffer(ownerPubKey: PublicKey, curve: Grumpkin): Buffer;
    /**
     * Decrypts the NoteSpendingInfo object using the owner's private key.
     * @param data - Encrypted NoteSpendingInfo object.
     * @param ownerPrivKey - Private key of the owner of the NoteSpendingInfo object.
     * @param curve - The curve instance to use.
     * @returns Instance of NoteSpendingInfo if the decryption was successful, undefined otherwise.
     */
    static fromEncryptedBuffer(data: Buffer, ownerPrivKey: GrumpkinPrivateKey, curve: Grumpkin): NoteSpendingInfo | undefined;
    /**
     * Create a random NoteSpendingInfo object (useful for testing purposes).
     * @returns A random NoteSpendingInfo object.
     */
    static random(): NoteSpendingInfo;
}
//# sourceMappingURL=note_spending_info.d.ts.map