import { FunctionSelector, FunctionType } from '@aztec/foundation/abi';
import { EncodedContractFunction } from './contract_data.js';
/**
 * Converts the given contract ABI into a ContractDao object that includes additional properties
 * such as the address, portal contract, and function selectors.
 *
 * @param abi - The contract ABI.
 * @param completeAddress - The AztecAddress representing the contract's address.
 * @param portalContract - The EthAddress representing the address of the associated portal contract.
 * @returns A ContractDao object containing the provided information along with generated function selectors.
 */
export function toContractDao(abi, completeAddress, portalContract) {
    const functions = abi.functions.map(f => ({
        ...f,
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
    }));
    return {
        ...abi,
        completeAddress,
        functions,
        portalContract,
    };
}
/**
 * Return public functions from the newly deployed contract to be injected into the tx object.
 * @param newContract - The new contract
 * @returns List of EncodedContractFunction.
 */
export function getNewContractPublicFunctions(newContract) {
    return newContract.functions
        .filter(c => c.functionType === FunctionType.OPEN)
        .map(fn => new EncodedContractFunction(FunctionSelector.fromNameAndParameters(fn.name, fn.parameters), fn.isInternal ?? false, Buffer.from(fn.bytecode, 'base64')));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfZGFvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnRyYWN0X2Rhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHcEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFzQjdEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsR0FBZ0IsRUFDaEIsZUFBZ0MsRUFDaEMsY0FBMEI7SUFFMUIsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQztRQUNKLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUM7S0FDdkUsQ0FBQyxDQUFDLENBQUM7SUFDSixPQUFPO1FBQ0wsR0FBRyxHQUFHO1FBQ04sZUFBZTtRQUNmLFNBQVM7UUFDVCxjQUFjO0tBQ2YsQ0FBQztBQUNKLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLDZCQUE2QixDQUFDLFdBQXdCO0lBQ3BFLE9BQU8sV0FBVyxDQUFDLFNBQVM7U0FDekIsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksS0FBSyxZQUFZLENBQUMsSUFBSSxDQUFDO1NBQ2pELEdBQUcsQ0FDRixFQUFFLENBQUMsRUFBRSxDQUNILElBQUksdUJBQXVCLENBQ3pCLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUM5RCxFQUFFLENBQUMsVUFBVSxJQUFJLEtBQUssRUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUNuQyxDQUNKLENBQUM7QUFDTixDQUFDIn0=