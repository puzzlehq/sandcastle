import { serializeToBuffer } from '@aztec/circuits.js/utils';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
/**
 * Write operations on the public state tree.
 */
export class PublicDataWrite {
    constructor(
    /**
     * Index of the updated leaf.
     */
    leafIndex, 
    /**
     * New value of the leaf.
     */
    newValue) {
        this.leafIndex = leafIndex;
        this.newValue = newValue;
    }
    /**
     * Creates a new public data write operation from the given arguments.
     * @param args - Arguments containing info used to create a new public data write operation.
     * @returns A new public data write operation instance.
     */
    static from(args) {
        return new PublicDataWrite(args.leafIndex, args.newValue);
    }
    /**
     * Serializes the public data write operation to a buffer.
     * @returns A buffer containing the serialized public data write operation.
     */
    toBuffer() {
        return serializeToBuffer(this.leafIndex, this.newValue);
    }
    /**
     * Checks if the public data write operation is empty.
     * @returns True if the public data write operation is empty, false otherwise.
     */
    isEmpty() {
        return this.leafIndex.isZero() && this.newValue.isZero();
    }
    /**
     * Creates a new public data write operation from the given buffer.
     * @param buffer - Buffer containing the serialized public data write operation.
     * @returns A new public data write operation instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicDataWrite(reader.readFr(), reader.readFr());
    }
    /**
     * Creates an empty public data write operation.
     * @returns A new public data write operation instance.
     */
    static empty() {
        return new PublicDataWrite(Fr.ZERO, Fr.ZERO);
    }
    /**
     * Creates a random public data write operation.
     * @returns A new public data write operation instance.
     */
    static random() {
        return new PublicDataWrite(Fr.random(), Fr.random());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2RhdGFfd3JpdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcHVibGljX2RhdGFfd3JpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUzRDs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCO0lBQ0U7O09BRUc7SUFDYSxTQUFhO0lBQzdCOztPQUVHO0lBQ2EsUUFBWTtRQUpaLGNBQVMsR0FBVCxTQUFTLENBQUk7UUFJYixhQUFRLEdBQVIsUUFBUSxDQUFJO0lBQzNCLENBQUM7SUFFSjs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxJQVNYO1FBQ0MsT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLEtBQUs7UUFDVixPQUFPLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsTUFBTTtRQUNYLE9BQU8sSUFBSSxlQUFlLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDRiJ9