import { MemoryFifo, Semaphore, SerialQueue } from '@aztec/foundation/fifo';
import { createDebugLogger } from '@aztec/foundation/log';
import { InterruptableSleep } from '@aztec/foundation/sleep';
import { INITIAL_L2_BLOCK_NUM } from '../index.js';
const log = createDebugLogger('aztec:l2_block_downloader');
/**
 * Downloads L2 blocks from a L2BlockSource.
 * The blocks are stored in a queue and can be retrieved using the getBlocks method.
 * The queue size is limited by the maxQueueSize parameter.
 * The downloader will pause when the queue is full or when the L2BlockSource is out of blocks.
 */
export class L2BlockDownloader {
    constructor(l2BlockSource, maxQueueSize, pollIntervalMS = 10000) {
        this.l2BlockSource = l2BlockSource;
        this.pollIntervalMS = pollIntervalMS;
        this.running = false;
        this.from = 0;
        this.interruptableSleep = new InterruptableSleep();
        this.jobQueue = new SerialQueue();
        this.blockQueue = new MemoryFifo();
        this.semaphore = new Semaphore(maxQueueSize);
    }
    /**
     * Starts the downloader.
     * @param from - The block number to start downloading from. Defaults to INITIAL_L2_BLOCK_NUM.
     */
    start(from = INITIAL_L2_BLOCK_NUM) {
        if (this.running) {
            this.interruptableSleep.interrupt();
            return;
        }
        this.from = from;
        this.running = true;
        const fn = async () => {
            while (this.running) {
                try {
                    await this.jobQueue.put(() => this.collectBlocks());
                    await this.interruptableSleep.sleep(this.pollIntervalMS);
                }
                catch (err) {
                    log.error(err);
                    await this.interruptableSleep.sleep(this.pollIntervalMS);
                }
            }
        };
        this.jobQueue.start();
        this.runningPromise = fn();
    }
    /**
     * Repeatedly queries the block source and adds the received blocks to the block queue.
     * Stops when no further blocks are received.
     * @returns The total number of blocks added to the block queue.
     */
    async collectBlocks() {
        let totalBlocks = 0;
        while (true) {
            const blocks = await this.l2BlockSource.getL2Blocks(this.from, 10);
            if (!blocks.length) {
                return totalBlocks;
            }
            await this.semaphore.acquire();
            this.blockQueue.put(blocks);
            this.from += blocks.length;
            totalBlocks += blocks.length;
        }
    }
    /**
     * Stops the downloader.
     */
    async stop() {
        this.running = false;
        this.interruptableSleep.interrupt();
        await this.jobQueue.cancel();
        this.blockQueue.cancel();
        await this.runningPromise;
    }
    /**
     * Gets the next batch of blocks from the queue.
     * @param timeout - optional timeout value to prevent permanent blocking
     * @returns The next batch of blocks from the queue.
     */
    async getL2Blocks(timeout) {
        try {
            const blocks = await this.blockQueue.get(timeout);
            if (!blocks) {
                return [];
            }
            this.semaphore.release();
            return blocks;
        }
        catch (err) {
            // nothing to do
            return [];
        }
    }
    /**
     * Forces an immediate request for blocks.
     * @returns A promise that fulfills once the poll is complete
     */
    pollImmediate() {
        return this.jobQueue.put(() => this.collectBlocks());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfYmxvY2tfZG93bmxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sMl9ibG9ja19kb3dubG9hZGVyL2wyX2Jsb2NrX2Rvd25sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFN0QsT0FBTyxFQUFFLG9CQUFvQixFQUEwQixNQUFNLGFBQWEsQ0FBQztBQUUzRSxNQUFNLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBRTNEOzs7OztHQUtHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQVM1QixZQUFvQixhQUE0QixFQUFFLFlBQW9CLEVBQVUsaUJBQWlCLEtBQUs7UUFBbEYsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFBZ0MsbUJBQWMsR0FBZCxjQUFjLENBQVE7UUFQOUYsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixTQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ1QsdUJBQWtCLEdBQUcsSUFBSSxrQkFBa0IsRUFBRSxDQUFDO1FBRTlDLGFBQVEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQzdCLGVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBYSxDQUFDO1FBRy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7T0FHRztJQUNJLEtBQUssQ0FBQyxJQUFJLEdBQUcsb0JBQW9CO1FBQ3RDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDcEMsT0FBTztTQUNSO1FB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