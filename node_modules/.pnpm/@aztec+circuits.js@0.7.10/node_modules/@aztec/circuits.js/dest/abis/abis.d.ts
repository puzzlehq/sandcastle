/// <reference types="node" resolution-mode="require"/>
import { IWasmModule } from '@aztec/foundation/wasm';
import { Buffer } from 'buffer';
import { AztecAddress, Fr, FunctionData, FunctionLeafPreimage, GlobalVariables, NewContractData, PrivateCallStackItem, PublicCallStackItem, PublicKey, TxRequest } from '../index.js';
/**
 * Synchronously calls a wasm function.
 * @param wasm - The wasm wrapper.
 * @param fnName - The name of the function to call.
 * @param input - The input buffer or object serializable to a buffer.
 * @param expectedOutputLength - The expected length of the output buffer.
 * @returns The output buffer.
 */
export declare function wasmSyncCall(wasm: IWasmModule, fnName: string, input: Buffer | {
    /**
     * Signature of the target serialization function.
     */
    toBuffer: () => Buffer;
}, expectedOutputLength: number): Buffer;
/**
 * Writes input buffers to wasm memory, calls a wasm function, and returns the output buffer.
 * @param wasm - A module providing low-level wasm access.
 * @param fnName - The name of the function to call.
 * @param inputBuffers - Buffers to write to wasm memory.
 * @param expectedOutputLength - The expected length of the output buffer.
 * @returns The output buffer.
 */
export declare function inputBuffersToOutputBuffer(wasm: IWasmModule, fnName: string, inputBuffers: Buffer[], expectedOutputLength: number): Buffer;
/**
 * Computes a hash of a transaction request.
 * @param wasm - A module providing low-level wasm access.
 * @param txRequest - The transaction request.
 * @returns The hash of the transaction request.
 */
export declare function hashTxRequest(wasm: IWasmModule, txRequest: TxRequest): Buffer;
/**
 * Computes a function selector from a given function signature.
 * @param wasm - A module providing low-level wasm access.
 * @param funcSig - The function signature.
 * @returns The function selector.
 */
export declare function computeFunctionSelector(wasm: IWasmModule, funcSig: string): Buffer;
/**
 * Computes a hash of a given verification key.
 * @param wasm - A module providing low-level wasm access.
 * @param vkBuf - The verification key.
 * @returns The hash of the verification key.
 */
export declare function hashVK(wasm: IWasmModule, vkBuf: Buffer): Buffer;
/**
 * Computes a function leaf from a given preimage.
 * @param wasm - A module providing low-level wasm access.
 * @param fnLeaf - The function leaf preimage.
 * @returns The function leaf.
 */
export declare function computeFunctionLeaf(wasm: IWasmModule, fnLeaf: FunctionLeafPreimage): Fr;
/**
 * Computes a function tree root from function leaves.
 * @param wasm - A module providing low-level wasm access.
 * @param fnLeaves - The function leaves to be included in the contract function tree.
 * @returns The function tree root.
 */
export declare function computeFunctionTreeRoot(wasm: IWasmModule, fnLeaves: Fr[]): Fr;
/**
 * Computes a constructor hash.
 * @param wasm - A module providing low-level wasm access.
 * @param functionData - Constructor's function data.
 * @param argsHash - Constructor's arguments hashed.
 * @param constructorVKHash - Hash of the constructor's verification key.
 * @returns The constructor hash.
 */
export declare function hashConstructor(wasm: IWasmModule, functionData: FunctionData, argsHash: Fr, constructorVKHash: Buffer): Fr;
/**
 * Computes a contract address.
 * @param wasm - A module providing low-level wasm access.
 * @param deployerPubKey - The pubkey of the contract deployer.
 * @param contractAddrSalt - The salt used as one of the inputs of the contract address computation.
 * @param fnTreeRoot - The function tree root of the contract being deployed.
 * @param constructorHash - The hash of the constructor.
 * @returns The contract address.
 */
export declare function computeContractAddress(wasm: IWasmModule, deployerPubKey: PublicKey, contractAddrSalt: Fr, fnTreeRoot: Fr, constructorHash: Fr): AztecAddress;
/**
 * Computes a partial address. Consists of all contract address components except the deployer public key.
 * @param wasm - A module providing low-level wasm access.
 * @param contractAddrSalt - The salt used as one of the inputs of the contract address computation.
 * @param fnTreeRoot - The function tree root of the contract being deployed.
 * @param constructorHash - The hash of the constructor.
 * @returns The partially constructed contract address.
 */
export declare function computePartialAddress(wasm: IWasmModule, contractAddrSalt: Fr, fnTreeRoot: Fr, constructorHash: Fr): Fr;
/**
 * Computes a contract address from its partial address and the pubkey.
 * @param wasm - A module providing low-level wasm access.
 * @param partial - The salt used as one of the inputs of the contract address computation.
 * @param fnTreeRoot - The function tree root of the contract being deployed.
 * @param constructorHash - The hash of the constructor.
 * @returns The partially constructed contract address.
 */
export declare function computeContractAddressFromPartial(wasm: IWasmModule, pubKey: PublicKey, partialAddress: Fr): AztecAddress;
/**
 * Computes a commitment nonce, which will be used to create a unique commitment.
 * @param wasm - A module providing low-level wasm access.
 * @param nullifierZero - The first nullifier in the tx.
 * @param commitmentIndex - The index of the commitment.
 * @returns A commitment nonce.
 */
export declare function computeCommitmentNonce(wasm: IWasmModule, nullifierZero: Fr, commitmentIndex: number): Fr;
/**
 * Computes a siloed commitment, given the contract address and the commitment itself.
 * A siloed commitment effectively namespaces a commitment to a specific contract.
 * @param wasm - A module providing low-level wasm access.
 * @param contract - The contract address
 * @param innerCommitment - The commitment to silo.
 * @returns A siloed commitment.
 */
export declare function siloCommitment(wasm: IWasmModule, contract: AztecAddress, innerCommitment: Fr): Fr;
/**
 * Computes a unique commitment. It includes a nonce which contains data that guarantees the commiment will be unique.
 * @param wasm - A module providing low-level wasm access.
 * @param nonce - The contract address.
 * @param siloedCommitment - An siloed commitment.
 * @returns A unique commitment.
 */
export declare function computeUniqueCommitment(wasm: IWasmModule, nonce: Fr, siloedCommitment: Fr): Fr;
/**
 * Computes a siloed nullifier, given the contract address and the inner nullifier.
 * A siloed nullifier effectively namespaces a nullifier to a specific contract.
 * @param wasm - A module providing low-level wasm access.
 * @param contract - The contract address.
 * @param innerNullifier - The nullifier to silo.
 * @returns A siloed nullifier.
 */
export declare function siloNullifier(wasm: IWasmModule, contract: AztecAddress, innerNullifier: Fr): Fr;
/**
 * Computes the block hash given the blocks globals and roots.
 * @param wasm - A module providing low-level wasm access.
 * @param globals - The global variables to put into the block hash.
 * @param privateDataTree - The root of the private data tree.
 * @param nullifierTreeRoot - The root of the nullifier tree.
 * @param contractTreeRoot - The root of the contract tree.
 * @param l1ToL2DataTreeRoot - The root of the l1 to l2 data tree.
 * @param publicDataTreeRoot - The root of the public data tree.
 * @returns The block hash.
 */
export declare function computeBlockHashWithGlobals(wasm: IWasmModule, globals: GlobalVariables, privateDataTreeRoot: Fr, nullifierTreeRoot: Fr, contractTreeRoot: Fr, l1ToL2DataTreeRoot: Fr, publicDataTreeRoot: Fr): Fr;
/**
 * Computes the block hash given the blocks globals and roots.
 * @param wasm - A module providing low-level wasm access.
 * @param globalsHash - The global variables hash to put into the block hash.
 * @param privateDataTree - The root of the private data tree.
 * @param nullifierTreeRoot - The root of the nullifier tree.
 * @param contractTreeRoot - The root of the contract tree.
 * @param l1ToL2DataTreeRoot - The root of the l1 to l2 data tree.
 * @param publicDataTreeRoot - The root of the public data tree.
 * @returns The block hash.
 */
export declare function computeBlockHash(wasm: IWasmModule, globalsHash: Fr, privateDataTreeRoot: Fr, nullifierTreeRoot: Fr, contractTreeRoot: Fr, l1ToL2DataTreeRoot: Fr, publicDataTreeRoot: Fr): Fr;
/**
 * Computes the globals hash given the globals.
 * @param wasm - A module providing low-level wasm access.
 * @param globals - The global variables to put into the block hash.
 * @returns The globals hash.
 */
export declare function computeGlobalsHash(wasm: IWasmModule, globals: GlobalVariables): Fr;
/**
 * Computes a public data tree value ready for insertion.
 * @param wasm - A module providing low-level wasm access.
 * @param value - Raw public data tree value to hash into a tree-insertion-ready value.
 * @returns Value hash into a tree-insertion-ready value.

 */
export declare function computePublicDataTreeValue(wasm: IWasmModule, value: Fr): Fr;
/**
 * Computes a public data tree index from contract address and storage slot.
 * @param wasm - A module providing low-level wasm access.
 * @param contractAddress - Contract where insertion is occurring.
 * @param storageSlot - Storage slot where insertion is occuring.
 * @returns Public data tree index computed from contract address and storage slot.

 */
export declare function computePublicDataTreeIndex(wasm: IWasmModule, contractAddress: Fr, storageSlot: Fr): Fr;
/**
 * Computes the hash of a list of arguments.
 * @param wasm - A module providing low-level wasm access.
 * @param args - Arguments to hash.
 * @returns Pedersen hash of the arguments.
 */
export declare function computeVarArgsHash(wasm: IWasmModule, args: Fr[]): Promise<Fr>;
/**
 * Computes a contract leaf of the given contract.
 * @param wasm - Relevant WASM wrapper.
 * @param cd - The contract data of the deployed contract.
 * @returns The contract leaf.
 */
export declare function computeContractLeaf(wasm: IWasmModule, cd: NewContractData): Fr;
/**
 * Computes tx hash of a given transaction request.
 * @param wasm - Relevant WASM wrapper.
 * @param txRequest - The signed transaction request.
 * @returns The transaction hash.
 */
export declare function computeTxHash(wasm: IWasmModule, txRequest: TxRequest): Fr;
/**
 * Computes a call stack item hash.
 * @param wasm - Relevant WASM wrapper.
 * @param callStackItem - The call stack item.
 * @returns The call stack item hash.
 */
export declare function computeCallStackItemHash(wasm: IWasmModule, callStackItem: PrivateCallStackItem | PublicCallStackItem): Fr;
/**
 * Computes a call stack item hash.
 * @param wasm - Relevant WASM wrapper.
 * @param callStackItem - The call stack item.
 * @returns The call stack item hash.
 */
export declare function computePrivateCallStackItemHash(wasm: IWasmModule, callStackItem: PrivateCallStackItem): Fr;
/**
 * Computes a call stack item hash.
 * @param wasm - Relevant WASM wrapper.
 * @param callStackItem - The call stack item.
 * @returns The call stack item hash.
 */
export declare function computePublicCallStackItemHash(wasm: IWasmModule, callStackItem: PublicCallStackItem): Fr;
/**
 * Computes a secret message hash for sending secret l1 to l2 messages.
 * @param secretMessage - The secret message.
 * @returns
 */
export declare function computeSecretMessageHash(wasm: IWasmModule, secretMessage: Fr): Fr;
//# sourceMappingURL=abis.d.ts.map