import { CircuitError } from '../index.js';
import { uint8ArrayToNum } from './serialize.js';
const CIRCUIT_FAILURE_ERROR_CODE_LENGTH_IN_BYTES = 2;
const CIRCUIT_FAILURE_ERROR_MESSAGE_SIZE_LENGTH_IN_BYTES = 4;
/**
 * Call a wasm method.
 * @param wasm - The wasm module.
 * @param method - The name of the exported wasm method to call.
 * @param input - The input to the wasm method (a buffer or an object serializable to a buffer).
 * @param outputType - The type of the output of the wasm method.
 *
 */
export function callWasm(wasm, method, input, outputType) {
    const inputBuf = input instanceof Buffer ? input : input.toBuffer();
    // Allocate memory for the input buffer and the pointer to the pointer to the output buffer
    const inputBufPtr = wasm.call('bbmalloc', inputBuf.length);
    wasm.writeMemory(inputBufPtr, inputBuf);
    const outputBufSizePtr = wasm.call('bbmalloc', 4);
    const outputBufPtrPtr = wasm.call('bbmalloc', 4);
    // Run and read outputs
    const circuitFailureBufPtr = wasm.call(method, inputBufPtr, outputBufSizePtr, outputBufPtrPtr);
    // Handle wasm output and ensure memory is correctly freed even when an error occurred.
    try {
        const output = handleCircuitOutput(wasm, outputBufSizePtr, outputBufPtrPtr, circuitFailureBufPtr, outputType);
        return output;
    }
    finally {
        // Free memory
        wasm.call('bbfree', inputBufPtr);
        wasm.call('bbfree', outputBufSizePtr);
        wasm.call('bbfree', outputBufPtrPtr);
        wasm.call('bbfree', circuitFailureBufPtr);
    }
}
/**
 * Tries to deserialize the circuit output into the output type and throws a CircuitError if there was an error.
 * @param wasm - The wasm wrapper.
 * @param outputBufSizePtr - The pointer to the output buffer size.
 * @param outputBufPtrPtr - The pointer to the pointer to the output buffer.
 * @param circuitFailureBufPtr - The pointer to the circuit failure buffer.
 * @param outputType - The type of the output of the wasm method.
 * @returns The deserialized output.
 */
export function handleCircuitOutput(wasm, outputBufSizePtr, outputBufPtrPtr, circuitFailureBufPtr, outputType) {
    if (circuitFailureBufPtr != 0) {
        // there is an error: CircuitError struct is structured as:
        // 1st 16 bits (2 bytes) after the `circuitFailureBufPtr` - error code (enum uint16)
        // Next 32 bits (4 bytes) - error message size
        // Next `error message size` bytes - error message.
        // So need to first extract the error message size so we know how much memory to read for the entire error struct.
        const errorMessageSizeBuffer = Buffer.from(wasm.getMemorySlice(circuitFailureBufPtr + CIRCUIT_FAILURE_ERROR_CODE_LENGTH_IN_BYTES, circuitFailureBufPtr +
            CIRCUIT_FAILURE_ERROR_CODE_LENGTH_IN_BYTES +
            CIRCUIT_FAILURE_ERROR_MESSAGE_SIZE_LENGTH_IN_BYTES));
        const errorMessageSize = errorMessageSizeBuffer.readUint32BE();
        // Now extract the entire `CircuitError` struct:
        const errorBuf = Buffer.from(wasm.getMemorySlice(circuitFailureBufPtr, circuitFailureBufPtr +
            CIRCUIT_FAILURE_ERROR_CODE_LENGTH_IN_BYTES +
            CIRCUIT_FAILURE_ERROR_MESSAGE_SIZE_LENGTH_IN_BYTES +
            errorMessageSize));
        const err = CircuitError.fromBuffer(errorBuf);
        err.message += '\nRefer to https://docs.aztec.network/aztec/protocol/errors for more information.';
        throw err;
    }
    // C++ returned a null pointer i.e. circuit didn't have an error
    const outputBufSize = uint8ArrayToNum(wasm.getMemorySlice(outputBufSizePtr, outputBufSizePtr + 4));
    const outputBufPtr = uint8ArrayToNum(wasm.getMemorySlice(outputBufPtrPtr, outputBufPtrPtr + 4));
    const outputBuf = Buffer.from(wasm.getMemorySlice(outputBufPtr, outputBufPtr + outputBufSize));
    const output = outputType.fromBuffer(outputBuf);
    return output;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbF93YXNtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2NhbGxfd2FzbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxNQUFNLDBDQUEwQyxHQUFHLENBQUMsQ0FBQztBQUNyRCxNQUFNLGtEQUFrRCxHQUFHLENBQUMsQ0FBQztBQUU3RDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FDdEIsSUFBaUIsRUFDakIsTUFBYyxFQUNkLEtBT0ssRUFDTCxVQUtDO0lBRUQsTUFBTSxRQUFRLEdBQVcsS0FBSyxZQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFNUUsMkZBQTJGO0lBQzNGLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRCxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN4QyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELHVCQUF1QjtJQUN2QixNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUUvRix1RkFBdUY7SUFDdkYsSUFBSTtRQUNGLE1BQU0sTUFBTSxHQUFHLG1CQUFtQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDOUcsT0FBTyxNQUFNLENBQUM7S0FDZjtZQUFTO1FBQ1IsY0FBYztRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztLQUMzQztBQUNILENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsSUFBaUIsRUFDakIsZ0JBQXdCLEVBQ3hCLGVBQXVCLEVBQ3ZCLG9CQUE0QixFQUM1QixVQUtDO0lBRUQsSUFBSSxvQkFBb0IsSUFBSSxDQUFDLEVBQUU7UUFDN0IsMkRBQTJEO1FBQzNELG9GQUFvRjtRQUNwRiw4Q0FBOEM7UUFDOUMsbURBQW1EO1FBQ25ELGtIQUFrSDtRQUNsSCxNQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQ3hDLElBQUksQ0FBQyxjQUFjLENBQ2pCLG9CQUFvQixHQUFHLDBDQUEwQyxFQUNqRSxvQkFBb0I7WUFDbEIsMENBQTBDO1lBQzFDLGtEQUFrRCxDQUNyRCxDQUNGLENBQUM7UUFDRixNQUFNLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQy9ELGdEQUFnRDtRQUNoRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUMxQixJQUFJLENBQUMsY0FBYyxDQUNqQixvQkFBb0IsRUFDcEIsb0JBQW9CO1lBQ2xCLDBDQUEwQztZQUMxQyxrREFBa0Q7WUFDbEQsZ0JBQWdCLENBQ25CLENBQ0YsQ0FBQztRQUNGLE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxtRkFBbUYsQ0FBQztRQUNuRyxNQUFNLEdBQUcsQ0FBQztLQUNYO0lBQ0QsZ0VBQWdFO0lBQ2hFLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkcsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hHLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDL0YsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIn0=