/// <reference types="node" resolution-mode="require"/>
import { IWasmModule } from '@aztec/foundation/wasm';
/**
 * Call a wasm method.
 * @param wasm - The wasm module.
 * @param method - The name of the exported wasm method to call.
 * @param input - The input to the wasm method (a buffer or an object serializable to a buffer).
 * @param outputType - The type of the output of the wasm method.
 *
 */
export declare function callWasm<T>(wasm: IWasmModule, method: string, input: Buffer | {
    /**
     * Signature of the target serialization function.
     */
    toBuffer: () => Buffer;
}, outputType: {
    /**
     * Signature of the target deserialization function which the output type has to implement.
     */
    fromBuffer: (b: Buffer) => T;
}): T;
/**
 * Tries to deserialize the circuit output into the output type and throws a CircuitError if there was an error.
 * @param wasm - The wasm wrapper.
 * @param outputBufSizePtr - The pointer to the output buffer size.
 * @param outputBufPtrPtr - The pointer to the pointer to the output buffer.
 * @param circuitFailureBufPtr - The pointer to the circuit failure buffer.
 * @param outputType - The type of the output of the wasm method.
 * @returns The deserialized output.
 */
export declare function handleCircuitOutput<T>(wasm: IWasmModule, outputBufSizePtr: number, outputBufPtrPtr: number, circuitFailureBufPtr: number, outputType: {
    /**
     * Signature of the target deserialization function which the output type has to implement.
     */
    fromBuffer: (b: Buffer) => T;
}): T;
//# sourceMappingURL=call_wasm.d.ts.map