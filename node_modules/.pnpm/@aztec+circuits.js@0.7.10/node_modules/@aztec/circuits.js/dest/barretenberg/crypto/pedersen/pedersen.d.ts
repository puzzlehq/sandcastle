/// <reference types="node" resolution-mode="require"/>
import { IWasmModule } from '@aztec/foundation/wasm';
import { Buffer } from 'buffer';
/**
 * Compresses two 32-byte hashes.
 * @param wasm - The barretenberg module.
 * @param lhs - The first hash.
 * @param rhs - The second hash.
 * @returns The new 32-byte hash.
 */
export declare function pedersenCompress(wasm: IWasmModule, lhs: Uint8Array, rhs: Uint8Array): Buffer;
/**
 * Combine an array of hashes using pedersen hash.
 * @param wasm - The barretenberg module.
 * @param lhs - The first hash.
 * @param rhs - The second hash.
 * @returns The new 32-byte hash.
 */
export declare function pedersenHashInputs(wasm: IWasmModule, inputs: Buffer[]): Buffer;
/**
 * Compresses an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @returns The resulting 32-byte hash.
 */
export declare function pedersenCompressInputs(wasm: IWasmModule, inputs: Buffer[]): Buffer;
/**
 * Commits to an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @returns The resulting 32-byte hash.
 */
export declare function pedersenPlookupCommitInputs(wasm: IWasmModule, inputs: Buffer[]): Buffer;
/**
 * Commits an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @param hashIndex - Hash index of the generator to use (See GeneratorIndex enum).
 * @returns The resulting 32-byte hash.
 */
export declare function pedersenPlookupCommitWithHashIndex(wasm: IWasmModule, inputs: Buffer[], hashIndex: number): Buffer;
/**
 * Compresses an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @param hashIndex - Hash index of the generator to use (See GeneratorIndex enum).
 * @returns The resulting 32-byte hash.
 */
export declare function pedersenCompressWithHashIndex(wasm: IWasmModule, inputs: Buffer[], hashIndex: number): Buffer;
/**
 * Compresses an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @param hashIndex - Hash index of the generator to use (See GeneratorIndex enum).
 * @returns The resulting 32-byte hash.
 */
export declare function pedersenPlookupCompressWithHashIndex(wasm: IWasmModule, inputs: Buffer[], hashIndex: number): Buffer;
/**
 * Get a 32-byte pedersen hash from a buffer.
 * @param wasm - The barretenberg module.
 * @param data - The data buffer.
 * @returns The hash buffer.
 */
export declare function pedersenGetHash(wasm: IWasmModule, data: Buffer): Buffer;
/**
 * Given a buffer containing 32 byte pedersen leaves, return a new buffer containing the leaves and all pairs of nodes
 * that define a merkle tree.
 *
 * E.g.
 * Input:  [1][2][3][4]
 * Output: [1][2][3][4][compress(1,2)][compress(3,4)][compress(5,6)].
 *
 * @param wasm - The barretenberg module.
 * @param values - The 32 byte pedersen leaves.
 * @returns A tree represented by an array.
 */
export declare function pedersenGetHashTree(wasm: IWasmModule, values: Buffer[]): Buffer[];
//# sourceMappingURL=pedersen.d.ts.map