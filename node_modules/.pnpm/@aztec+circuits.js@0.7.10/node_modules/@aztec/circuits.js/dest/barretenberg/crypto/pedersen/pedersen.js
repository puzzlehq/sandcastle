import { Buffer } from 'buffer';
import { deserializeArrayFromVector, deserializeField, serializeBufferArrayToVector } from '../../serialize.js';
/**
 * Compresses two 32-byte hashes.
 * @param wasm - The barretenberg module.
 * @param lhs - The first hash.
 * @param rhs - The second hash.
 * @returns The new 32-byte hash.
 */
export function pedersenCompress(wasm, lhs, rhs) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    if (lhs.length !== 32 || rhs.length !== 32) {
        throw new Error(`Pedersen lhs and rhs inputs must be 32 bytes (got ${lhs.length} and ${rhs.length} respectively)`);
    }
    wasm.writeMemory(0, lhs);
    wasm.writeMemory(32, rhs);
    wasm.call('pedersen__hash_pair', 0, 32, 64);
    return Buffer.from(wasm.getMemorySlice(64, 96));
}
/**
 * Combine an array of hashes using pedersen hash.
 * @param wasm - The barretenberg module.
 * @param lhs - The first hash.
 * @param rhs - The second hash.
 * @returns The new 32-byte hash.
 */
export function pedersenHashInputs(wasm, inputs) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    const inputVectors = serializeBufferArrayToVector(inputs);
    wasm.writeMemory(0, inputVectors);
    wasm.call('pedersen__hash_multiple', 0, 0);
    return Buffer.from(wasm.getMemorySlice(0, 32));
}
/**
 * Compresses an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @returns The resulting 32-byte hash.
 */
export function pedersenCompressInputs(wasm, inputs) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    const inputVectors = serializeBufferArrayToVector(inputs);
    wasm.writeMemory(0, inputVectors);
    wasm.call('pedersen__compress', 0, 0);
    return Buffer.from(wasm.getMemorySlice(0, 32));
}
/**
 * Commits to an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @returns The resulting 32-byte hash.
 */
export function pedersenPlookupCommitInputs(wasm, inputs) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    const inputVectors = serializeBufferArrayToVector(inputs);
    wasm.writeMemory(0, inputVectors);
    wasm.call('pedersen_plookup_commit', 0, 0);
    return Buffer.from(wasm.getMemorySlice(0, 32));
}
/**
 * Commits an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @param hashIndex - Hash index of the generator to use (See GeneratorIndex enum).
 * @returns The resulting 32-byte hash.
 */
export function pedersenPlookupCommitWithHashIndex(wasm, inputs, hashIndex) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    const inputVectors = serializeBufferArrayToVector(inputs);
    wasm.writeMemory(0, inputVectors);
    wasm.call('pedersen_plookup_commit_with_hash_index', 0, 0, hashIndex);
    return Buffer.from(wasm.getMemorySlice(0, 32));
}
/**
 * Compresses an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @param hashIndex - Hash index of the generator to use (See GeneratorIndex enum).
 * @returns The resulting 32-byte hash.
 */
export function pedersenCompressWithHashIndex(wasm, inputs, hashIndex) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    const inputVectors = serializeBufferArrayToVector(inputs);
    wasm.writeMemory(0, inputVectors);
    wasm.call('pedersen__compress_with_hash_index', 0, 0, hashIndex);
    return Buffer.from(wasm.getMemorySlice(0, 32));
}
/**
 * Compresses an array of buffers.
 * @param wasm - The barretenberg module.
 * @param inputs - The array of buffers to compress.
 * @param hashIndex - Hash index of the generator to use (See GeneratorIndex enum).
 * @returns The resulting 32-byte hash.
 */
export function pedersenPlookupCompressWithHashIndex(wasm, inputs, hashIndex) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    const inputVectors = serializeBufferArrayToVector(inputs);
    wasm.writeMemory(0, inputVectors);
    wasm.call('pedersen_plookup_compress_with_hash_index', 0, 0, hashIndex);
    return Buffer.from(wasm.getMemorySlice(0, 32));
}
/**
 * Get a 32-byte pedersen hash from a buffer.
 * @param wasm - The barretenberg module.
 * @param data - The data buffer.
 * @returns The hash buffer.
 */
export function pedersenGetHash(wasm, data) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    const mem = wasm.call('bbmalloc', data.length);
    wasm.writeMemory(mem, data);
    wasm.call('pedersen__buffer_to_field', mem, data.length, 0);
    wasm.call('bbfree', mem);
    return Buffer.from(wasm.getMemorySlice(0, 32));
}
/**
 * Given a buffer containing 32 byte pedersen leaves, return a new buffer containing the leaves and all pairs of nodes
 * that define a merkle tree.
 *
 * E.g.
 * Input:  [1][2][3][4]
 * Output: [1][2][3][4][compress(1,2)][compress(3,4)][compress(5,6)].
 *
 * @param wasm - The barretenberg module.
 * @param values - The 32 byte pedersen leaves.
 * @returns A tree represented by an array.
 */
export function pedersenGetHashTree(wasm, values) {
    // If not done already, precompute constants.
    wasm.call('pedersen__init');
    const data = serializeBufferArrayToVector(values);
    const inputPtr = wasm.call('bbmalloc', data.length);
    wasm.writeMemory(inputPtr, data);
    const resultPtr = wasm.call('pedersen__hash_to_tree', inputPtr);
    const resultNumFields = Buffer.from(wasm.getMemorySlice(resultPtr, resultPtr + 4)).readUInt32BE(0);
    const resultData = Buffer.from(wasm.getMemorySlice(resultPtr, resultPtr + 4 + resultNumFields * 32));
    wasm.call('bbfree', inputPtr);
    wasm.call('bbfree', resultPtr);
    return deserializeArrayFromVector(deserializeField, resultData).elem;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVkZXJzZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnL2NyeXB0by9wZWRlcnNlbi9wZWRlcnNlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWhDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxnQkFBZ0IsRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWhIOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxJQUFpQixFQUFFLEdBQWUsRUFBRSxHQUFlO0lBQ2xGLDZDQUE2QztJQUM3QyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDNUIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEVBQUUsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtRQUMxQyxNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxHQUFHLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLGdCQUFnQixDQUFDLENBQUM7S0FDcEg7SUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxJQUFpQixFQUFFLE1BQWdCO0lBQ3BFLDZDQUE2QztJQUM3QyxJQUFJLENBQUMsSUFBSSxD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