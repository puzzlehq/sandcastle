import { CircuitsWasm } from '@aztec/circuits.js';
import { Buffer } from 'buffer';
import { pedersenGetHashTree } from './pedersen.js';
describe('pedersen', () => {
    let barretenbergWasm;
    const values = [];
    beforeAll(async () => {
        barretenbergWasm = await CircuitsWasm.get();
        // TODO was originally 2 ** 12
        for (let i = 0; i < 2 ** 2; ++i) {
            const v = Buffer.alloc(32, 0);
            v.writeUInt32LE(i, 0);
            values[i] = v;
        }
    });
    it('hasher_consistency_and_benchmark', () => {
        // const start1 = new Date().getTime();
        const result = pedersenGetHashTree(barretenbergWasm, values);
        // const end1 = new Date().getTime() - start1;
        // console.log(`Single hasher: ~${end1 / values.length}ms / value`);
        // TODO more than smoke-test this
        expect(result.length).toBe(values.length * 2 - 1);
        // TODO
        // console.log(`Pooled hasher: ~${end2 / values.length}ms / value`);
        // console.log(`Pooled improvement: ${(end1 / end2).toFixed(2)}x`);
        // expect(poolResults).toEqual(singleResults);
        // await pool.destroy();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVkZXJzZW4udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iYXJyZXRlbmJlcmcvY3J5cHRvL3BlZGVyc2VuL3BlZGVyc2VuLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFaEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3hCLElBQUksZ0JBQStCLENBQUM7SUFDcEMsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBRTVCLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixnQkFBZ0IsR0FBRyxNQUFNLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU1Qyw4QkFBOEI7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDL0IsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNmO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1FBQzFDLHVDQUF1QztRQUN2QyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3RCw4Q0FBOEM7UUFFOUMsb0VBQW9FO1FBQ3BFLGlDQUFpQztRQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsRCxPQUFPO1FBQ1Asb0VBQW9FO1FBQ3BFLG1FQUFtRTtRQUNuRSw4Q0FBOEM7UUFDOUMsd0JBQXdCO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==