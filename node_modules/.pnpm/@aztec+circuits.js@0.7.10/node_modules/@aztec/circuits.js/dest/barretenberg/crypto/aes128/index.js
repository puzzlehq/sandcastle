import { Buffer } from 'buffer';
/**
 * AES-128-CBC encryption/decryption.
 */
export class Aes128 {
    constructor(wasm) {
        this.wasm = wasm;
    }
    /**
     * Encrypt a buffer using AES-128-CBC.
     * @param data - Data to encrypt.
     * @param iv - AES initialisation vector.
     * @param key - Key to encrypt with.
     * @returns Encrypted data.
     */
    encryptBufferCBC(data, iv, key) {
        const rawLength = data.length;
        const numPaddingBytes = rawLength % 16 != 0 ? 16 - (rawLength % 16) : 0;
        const paddingBuffer = Buffer.alloc(numPaddingBytes);
        // input num bytes needs to be a multiple of 16
        // node uses PKCS#7-Padding scheme, where padding byte value = the number of padding bytes
        if (numPaddingBytes != 0) {
            paddingBuffer.fill(numPaddingBytes);
        }
        const input = Buffer.concat([data, paddingBuffer]);
        const mem = this.wasm.call('bbmalloc', input.length + key.length + iv.length + input.length);
        this.wasm.writeMemory(mem, input);
        this.wasm.writeMemory(mem + input.length, iv);
        this.wasm.writeMemory(mem + input.length + iv.length, key);
        this.wasm.call('aes__encrypt_buffer_cbc', mem, mem + input.length, mem + input.length + iv.length, input.length, mem + input.length + iv.length + key.length);
        const result = Buffer.from(this.wasm.getMemorySlice(mem + input.length + key.length + iv.length, mem + input.length + key.length + iv.length + input.length));
        this.wasm.call('bbfree', mem);
        return result;
    }
    /**
     * Decrypt a buffer using AES-128-CBC.
     * @param data - Data to decrypt.
     * @param iv - AES initialisation vector.
     * @param key - Key to decrypt with.
     * @returns Decrypted data.
     */
    decryptBufferCBC(data, iv, key) {
        const mem = this.wasm.call('bbmalloc', data.length + key.length + iv.length + data.length);
        this.wasm.writeMemory(mem, data);
        this.wasm.writeMemory(mem + data.length, iv);
        this.wasm.writeMemory(mem + data.length + iv.length, key);
        this.wasm.call('aes__decrypt_buffer_cbc', mem, mem + data.length, mem + data.length + iv.length, data.length, mem + data.length + iv.length + key.length);
        const result = Buffer.from(this.wasm.getMemorySlice(mem + data.length + key.length + iv.length, mem + data.length + key.length + iv.length + data.length));
        this.wasm.call('bbfree', mem);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnL2NyeXB0by9hZXMxMjgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVoQzs7R0FFRztBQUNILE1BQU0sT0FBTyxNQUFNO0lBQ2pCLFlBQW9CLElBQWlCO1FBQWpCLFNBQUksR0FBSixJQUFJLENBQWE7SUFBRyxDQUFDO0lBRXpDOzs7Ozs7T0FNRztJQUNJLGdCQUFnQixDQUFDLElBQWdCLEVBQUUsRUFBYyxFQUFFLEdBQWU7UUFDdkUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM5QixNQUFNLGVBQWUsR0FBRyxTQUFTLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRCwrQ0FBK0M7UUFDL0MsMEZBQTBGO1FBQzFGLElBQUksZUFBZSxJQUFJLENBQUMsRUFBRTtZQUN4QixhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMs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