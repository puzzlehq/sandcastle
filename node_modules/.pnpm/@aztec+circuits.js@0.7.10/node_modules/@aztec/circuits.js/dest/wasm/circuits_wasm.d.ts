import { IWasmModule } from '@aztec/foundation/wasm';
/**
 * A low-level wrapper for an instance of Aztec3 Circuits WASM.
 */
export declare class CircuitsWasm implements IWasmModule {
    private wasm;
    static instance: Promise<CircuitsWasm>;
    /**
     * Creates a Circuits module from a properly configured WasmModule.
     * Not meant for public use.
     *
     * @param wasm - The module configured in CircuitsWasm.new().
     */
    private constructor();
    /**
     * Get a singleton instance of the module.
     * @returns The singleton.
     */
    static get(): Promise<CircuitsWasm>;
    /**
     * Create and initialize a Circuits module. Not meant for public use.
     *
     * Has 30 pages by default. 30*2**16 \> 1mb stack size plus other overheads.
     * 8192 maximum by default. 512mb.
     * @param initial - Initial memory pages.
     * @param maximum - Max memory pages.
     * @param loggerName - The logger name.
     * @returns The wrapper.
     */
    private static new;
    /**
     * Ensures the global SRS is initialized.
     * Currently used in VK serialization and will be used in proofs.
     * TODO(AD): proof should use external bb.js
     * TODO(AD): revisit when SRS should be initialized
     * @param wasm - The WASM module.
     */
    private static initializeSrs;
    /**
     * Retrieve the exports object of the CircuitsWasm module.
     *
     * @returns An object containing exported functions and properties.
     */
    exports(): any;
    /**
     * Get a slice of memory between two addresses.
     * @param start - The start address.
     * @param end - The end address.
     * @returns A Uint8Array view of memory.
     */
    getMemorySlice(start: number, end: number): Uint8Array;
    /**
     * Write data into the heap.
     * @param arr - The data to write.
     * @param offset - The address to write data at.
     */
    writeMemory(offset: number, arr: Uint8Array): void;
    /**
     * Get memory as string.
     * @param offset - The address to get null-terminated string data from.
     * @returns JS string.
     */
    getMemoryAsString(offset: number): string;
    /**
     * Calls into the WebAssembly.
     * @param name - The method name.
     * @param args - The arguments to the method.
     * @returns The numeric integer or address result.
     */
    call(name: string, ...args: any): number;
}
//# sourceMappingURL=circuits_wasm.d.ts.map