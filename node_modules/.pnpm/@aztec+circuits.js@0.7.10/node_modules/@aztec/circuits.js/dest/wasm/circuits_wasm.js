import { numToUInt32BE } from '@aztec/foundation/serialize';
import { fileURLToPath } from '@aztec/foundation/url';
import { WasmModule } from '@aztec/foundation/wasm';
import isNode from 'detect-node';
import { readFile } from 'fs/promises';
import { dirname, join } from 'path';
import { Crs } from '../crs/index.js';
const NAME = '/aztec3-circuits';
const CODE_PATH = isNode
    ? join(dirname(fileURLToPath(import.meta.url)), `../../resources/${NAME}.wasm`)
    : `${NAME}.wasm`;
const MAX_SRS_POINTS = 50000;
/**
 * Get the text of a binary file, either locally or on the web.
 * @param path - Path to the WASM binary.
 * @returns The binary buffer.
 */
async function fetchBinary(path) {
    if (isNode) {
        return await readFile(path);
    }
    else {
        const res = await fetch(path);
        return Buffer.from(await res.arrayBuffer());
    }
}
const BB_JS_NYI_ERROR = 'NOT YET IMPLEMENTED - needed for proofs, plan is to use barretenberg.js from NPM for proofs. See https://github.com/AztecProtocol/aztec-packages/issues/781';
/**
 * A low-level wrapper for an instance of Aztec3 Circuits WASM.
 */
export class CircuitsWasm {
    /**
     * Creates a Circuits module from a properly configured WasmModule.
     * Not meant for public use.
     *
     * @param wasm - The module configured in CircuitsWasm.new().
     */
    constructor(wasm) {
        this.wasm = wasm;
    }
    /**
     * Get a singleton instance of the module.
     * @returns The singleton.
     */
    static get() {
        if (!this.instance)
            this.instance = CircuitsWasm.new();
        return this.instance;
    }
    /**
     * Create and initialize a Circuits module. Not meant for public use.
     *
     * Has 30 pages by default. 30*2**16 \> 1mb stack size plus other overheads.
     * 8192 maximum by default. 512mb.
     * @param initial - Initial memory pages.
     * @param maximum - Max memory pages.
     * @param loggerName - The logger name.
     * @returns The wrapper.
     */
    static async new(initial = 30, maximum = 8192, loggerName = 'aztec:wasm') {
        const wasm = new WasmModule(await fetchBinary(CODE_PATH), module => ({
            /**
             * Log a string from wasm.
             * @param addr - The string address to log.
             */
            logstr(addr) {
                const rawStr = wasm.getMemoryAsString(addr);
                const m = wasm.getMemory();
                const str = `${rawStr} (mem: ${(m.length / (1024 * 1024)).toFixed(2)}MB)`;
                if (str.startsWith('abort: ') || str.startsWith('important: ')) {
                    // we explicitly want to route to console.log for every abort message to not miss them:
                    // eslint-disable-next-line no-console
                    console.log(str);
                }
                wasm.getLogger()(str);
            },
            memory: module.getRawMemory(),
            // eslint-disable-next-line camelcase
            set_data: () => {
                wasm.getLogger()('set_data: NYI');
            },
            // eslint-disable-next-line camelcase
            get_data: () => {
                throw new Error(BB_JS_NYI_ERROR);
            },
        }), loggerName);
        await wasm.init(initial, maximum);
        await CircuitsWasm.initializeSrs(wasm);
        return new CircuitsWasm(wasm);
    }
    /**
     * Ensures the global SRS is initialized.
     * Currently used in VK serialization and will be used in proofs.
     * TODO(AD): proof should use external bb.js
     * TODO(AD): revisit when SRS should be initialized
     * @param wasm - The WASM module.
     */
    static async initializeSrs(wasm) {
        const crs = new Crs(MAX_SRS_POINTS);
        await crs.init();
        const g1Buf = wasm.call('bbmalloc', crs.getG1Data().length);
        wasm.writeMemory(g1Buf, crs.getG1Data());
        const g1SizeBuf = wasm.call('bbmalloc', 4);
        wasm.writeMemory(g1SizeBuf, numToUInt32BE(crs.numPoints));
        const g2Buf = wasm.call('bbmalloc', crs.getG2Data().length);
        wasm.writeMemory(g2Buf, crs.getG2Data());
        wasm.call('srs_init_srs', g1Buf, g1SizeBuf, g2Buf);
        wasm.call('bbfree', g1Buf);
        wasm.call('bbfree', g1SizeBuf);
        wasm.call('bbfree', g2Buf);
    }
    /**
     * Retrieve the exports object of the CircuitsWasm module.
     *
     * @returns An object containing exported functions and properties.
     */
    exports() {
        return this.wasm.exports();
    }
    /**
     * Get a slice of memory between two addresses.
     * @param start - The start address.
     * @param end - The end address.
     * @returns A Uint8Array view of memory.
     */
    getMemorySlice(start, end) {
        return this.wasm.getMemorySlice(start, end);
    }
    /**
     * Write data into the heap.
     * @param arr - The data to write.
     * @param offset - The address to write data at.
     */
    writeMemory(offset, arr) {
        this.wasm.writeMemory(offset, arr);
    }
    /**
     * Get memory as string.
     * @param offset - The address to get null-terminated string data from.
     * @returns JS string.
     */
    getMemoryAsString(offset) {
        return this.wasm.getMemoryAsString(offset);
    }
    /**
     * Calls into the WebAssembly.
     * @param name - The method name.
     * @param args - The arguments to the method.
     * @returns The numeric integer or address result.
     */
    call(name, ...args) {
        return this.wasm.call(name, ...args);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY3VpdHNfd2FzbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy93YXNtL2NpcmN1aXRzX3dhc20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQWUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFakUsT0FBTyxNQUFNLE1BQU0sYUFBYSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFckMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXRDLE1BQU0sSUFBSSxHQUFHLGtCQUFrQixDQUFDO0FBQ2hDLE1BQU0sU0FBUyxHQUFHLE1BQU07SUFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxtQkFBbUIsSUFBSSxPQUFPLENBQUM7SUFDL0UsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUM7QUFDbkIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBRTdCOzs7O0dBSUc7QUFDSCxLQUFLLFVBQVUsV0FBVyxDQUFDLElBQVk7SUFDckMsSUFBSSxNQUFNLEVBQUU7UUFDVixPQUFPLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdCO1NBQU07UUFDTCxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztLQUM3QztBQUNILENBQUM7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