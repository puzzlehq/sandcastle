/// <reference types="node" resolution-mode="require"/>
import { Tuple } from '@aztec/foundation/serialize';
import { IWasmModule } from '@aztec/foundation/wasm';
import { Buffer } from 'buffer';
import { Address, AppendOnlyTreeSnapshot, BaseOrMergeRollupPublicInputs, BaseRollupInputs, CallContext, CircuitError, CombinedAccumulatedData, CombinedConstantData, ConstantRollupData, ContractDeploymentData, ContractStorageRead, ContractStorageUpdateRequest, FinalAccumulatedData, Fr, FunctionData, FunctionSelector, G1AffineElement, GlobalVariables, HistoricBlockData, KernelCircuitPublicInputs, KernelCircuitPublicInputsFinal, MembershipWitness4, MembershipWitness8, MembershipWitness16, MergeRollupInputs, NativeAggregationState, NewContractData, NullifierLeafPreimage, OptionallyRevealedData, Point, PreviousKernelData, PreviousRollupData, PrivateCallData, PrivateCallStackItem, PrivateCircuitPublicInputs, PrivateKernelInputsInit, PrivateKernelInputsInner, PrivateKernelInputsOrdering, PublicCallData, PublicCallStackItem, PublicCircuitPublicInputs, PublicDataRead, PublicDataUpdateRequest, PublicKernelInputs, ReadRequestMembershipWitness, RootRollupInputs, RootRollupPublicInputs, TxContext, TxRequest, VerificationKeyData } from './types.js';
interface MsgpackGlobalVariables {
    chain_id: Buffer;
    version: Buffer;
    block_number: Buffer;
    timestamp: Buffer;
}
export declare function toGlobalVariables(o: MsgpackGlobalVariables): GlobalVariables;
export declare function fromGlobalVariables(o: GlobalVariables): MsgpackGlobalVariables;
interface MsgpackG1AffineElement {
    x: Buffer;
    y: Buffer;
}
export declare function toG1AffineElement(o: MsgpackG1AffineElement): G1AffineElement;
export declare function fromG1AffineElement(o: G1AffineElement): MsgpackG1AffineElement;
interface MsgpackNativeAggregationState {
    P0: MsgpackG1AffineElement;
    P1: MsgpackG1AffineElement;
    public_inputs: Buffer[];
    proof_witness_indices: number[];
    has_data: boolean;
}
export declare function toNativeAggregationState(o: MsgpackNativeAggregationState): NativeAggregationState;
export declare function fromNativeAggregationState(o: NativeAggregationState): MsgpackNativeAggregationState;
interface MsgpackNewContractData {
    contract_address: Buffer;
    portal_contract_address: Buffer;
    function_tree_root: Buffer;
}
export declare function toNewContractData(o: MsgpackNewContractData): NewContractData;
export declare function fromNewContractData(o: NewContractData): MsgpackNewContractData;
interface MsgpackFunctionSelector {
    value: number;
}
export declare function toFunctionSelector(o: MsgpackFunctionSelector): FunctionSelector;
export declare function fromFunctionSelector(o: FunctionSelector): MsgpackFunctionSelector;
interface MsgpackFunctionData {
    selector: MsgpackFunctionSelector;
    is_internal: boolean;
    is_private: boolean;
    is_constructor: boolean;
}
export declare function toFunctionData(o: MsgpackFunctionData): FunctionData;
export declare function fromFunctionData(o: FunctionData): MsgpackFunctionData;
interface MsgpackOptionallyRevealedData {
    call_stack_item_hash: Buffer;
    function_data: MsgpackFunctionData;
    vk_hash: Buffer;
    portal_contract_address: Buffer;
    pay_fee_from_l1: boolean;
    pay_fee_from_public_l2: boolean;
    called_from_l1: boolean;
    called_from_public_l2: boolean;
}
export declare function toOptionallyRevealedData(o: MsgpackOptionallyRevealedData): OptionallyRevealedData;
export declare function fromOptionallyRevealedData(o: OptionallyRevealedData): MsgpackOptionallyRevealedData;
interface MsgpackPublicDataUpdateRequest {
    leaf_index: Buffer;
    old_value: Buffer;
    new_value: Buffer;
}
export declare function toPublicDataUpdateRequest(o: MsgpackPublicDataUpdateRequest): PublicDataUpdateRequest;
export declare function fromPublicDataUpdateRequest(o: PublicDataUpdateRequest): MsgpackPublicDataUpdateRequest;
interface MsgpackPublicDataRead {
    leaf_index: Buffer;
    value: Buffer;
}
export declare function toPublicDataRead(o: MsgpackPublicDataRead): PublicDataRead;
export declare function fromPublicDataRead(o: PublicDataRead): MsgpackPublicDataRead;
interface MsgpackCombinedAccumulatedData {
    aggregation_object: MsgpackNativeAggregationState;
    read_requests: Tuple<Buffer, 128>;
    new_commitments: Tuple<Buffer, 64>;
    new_nullifiers: Tuple<Buffer, 64>;
    nullified_commitments: Tuple<Buffer, 64>;
    private_call_stack: Tuple<Buffer, 8>;
    public_call_stack: Tuple<Buffer, 8>;
    new_l2_to_l1_msgs: Tuple<Buffer, 2>;
    encrypted_logs_hash: Tuple<Buffer, 2>;
    unencrypted_logs_hash: Tuple<Buffer, 2>;
    encrypted_log_preimages_length: Buffer;
    unencrypted_log_preimages_length: Buffer;
    new_contracts: Tuple<MsgpackNewContractData, 1>;
    optionally_revealed_data: Tuple<MsgpackOptionallyRevealedData, 4>;
    public_data_update_requests: Tuple<MsgpackPublicDataUpdateRequest, 16>;
    public_data_reads: Tuple<MsgpackPublicDataRead, 16>;
}
export declare function toCombinedAccumulatedData(o: MsgpackCombinedAccumulatedData): CombinedAccumulatedData;
export declare function fromCombinedAccumulatedData(o: CombinedAccumulatedData): MsgpackCombinedAccumulatedData;
interface MsgpackHistoricBlockData {
    private_data_tree_root: Buffer;
    nullifier_tree_root: Buffer;
    contract_tree_root: Buffer;
    l1_to_l2_messages_tree_root: Buffer;
    blocks_tree_root: Buffer;
    private_kernel_vk_tree_root: Buffer;
    public_data_tree_root: Buffer;
    global_variables_hash: Buffer;
}
export declare function toHistoricBlockData(o: MsgpackHistoricBlockData): HistoricBlockData;
export declare function fromHistoricBlockData(o: HistoricBlockData): MsgpackHistoricBlockData;
interface MsgpackPoint {
    x: Buffer;
    y: Buffer;
}
export declare function toPoint(o: MsgpackPoint): Point;
export declare function fromPoint(o: Point): MsgpackPoint;
interface MsgpackContractDeploymentData {
    deployer_public_key: MsgpackPoint;
    constructor_vk_hash: Buffer;
    function_tree_root: Buffer;
    contract_address_salt: Buffer;
    portal_contract_address: Buffer;
}
export declare function toContractDeploymentData(o: MsgpackContractDeploymentData): ContractDeploymentData;
export declare function fromContractDeploymentData(o: ContractDeploymentData): MsgpackContractDeploymentData;
interface MsgpackTxContext {
    is_fee_payment_tx: boolean;
    is_rebate_payment_tx: boolean;
    is_contract_deployment_tx: boolean;
    contract_deployment_data: MsgpackContractDeploymentData;
    chain_id: Buffer;
    version: Buffer;
}
export declare function toTxContext(o: MsgpackTxContext): TxContext;
export declare function fromTxContext(o: TxContext): MsgpackTxContext;
interface MsgpackCombinedConstantData {
    block_data: MsgpackHistoricBlockData;
    tx_context: MsgpackTxContext;
}
export declare function toCombinedConstantData(o: MsgpackCombinedConstantData): CombinedConstantData;
export declare function fromCombinedConstantData(o: CombinedConstantData): MsgpackCombinedConstantData;
interface MsgpackKernelCircuitPublicInputs {
    end: MsgpackCombinedAccumulatedData;
    constants: MsgpackCombinedConstantData;
    is_private: boolean;
}
export declare function toKernelCircuitPublicInputs(o: MsgpackKernelCircuitPublicInputs): KernelCircuitPublicInputs;
export declare function fromKernelCircuitPublicInputs(o: KernelCircuitPublicInputs): MsgpackKernelCircuitPublicInputs;
interface MsgpackVerificationKeyData {
    circuit_type: number;
    circuit_size: number;
    num_public_inputs: number;
    commitments: Record<string, MsgpackG1AffineElement>;
    contains_recursive_proof: boolean;
    recursive_proof_public_input_indices: number[];
}
export declare function toVerificationKeyData(o: MsgpackVerificationKeyData): VerificationKeyData;
export declare function fromVerificationKeyData(o: VerificationKeyData): MsgpackVerificationKeyData;
interface MsgpackPreviousKernelData {
    public_inputs: MsgpackKernelCircuitPublicInputs;
    proof: Buffer;
    vk: MsgpackVerificationKeyData;
    vk_index: number;
    vk_path: Tuple<Buffer, 3>;
}
export declare function toPreviousKernelData(o: MsgpackPreviousKernelData): PreviousKernelData;
export declare function fromPreviousKernelData(o: PreviousKernelData): MsgpackPreviousKernelData;
interface MsgpackTxRequest {
    origin: Buffer;
    function_data: MsgpackFunctionData;
    args_hash: Buffer;
    tx_context: MsgpackTxContext;
}
export declare function toTxRequest(o: MsgpackTxRequest): TxRequest;
export declare function fromTxRequest(o: TxRequest): MsgpackTxRequest;
interface MsgpackCallContext {
    msg_sender: Buffer;
    storage_contract_address: Buffer;
    portal_contract_address: Buffer;
    is_delegate_call: boolean;
    is_static_call: boolean;
    is_contract_deployment: boolean;
}
export declare function toCallContext(o: MsgpackCallContext): CallContext;
export declare function fromCallContext(o: CallContext): MsgpackCallContext;
interface MsgpackPrivateCircuitPublicInputs {
    call_context: MsgpackCallContext;
    args_hash: Buffer;
    return_values: Tuple<Buffer, 4>;
    read_requests: Tuple<Buffer, 32>;
    new_commitments: Tuple<Buffer, 16>;
    new_nullifiers: Tuple<Buffer, 16>;
    nullified_commitments: Tuple<Buffer, 16>;
    private_call_stack: Tuple<Buffer, 4>;
    public_call_stack: Tuple<Buffer, 4>;
    new_l2_to_l1_msgs: Tuple<Buffer, 2>;
    encrypted_logs_hash: Tuple<Buffer, 2>;
    unencrypted_logs_hash: Tuple<Buffer, 2>;
    encrypted_log_preimages_length: Buffer;
    unencrypted_log_preimages_length: Buffer;
    historic_block_data: MsgpackHistoricBlockData;
    contract_deployment_data: MsgpackContractDeploymentData;
    chain_id: Buffer;
    version: Buffer;
}
export declare function toPrivateCircuitPublicInputs(o: MsgpackPrivateCircuitPublicInputs): PrivateCircuitPublicInputs;
export declare function fromPrivateCircuitPublicInputs(o: PrivateCircuitPublicInputs): MsgpackPrivateCircuitPublicInputs;
interface MsgpackPrivateCallStackItem {
    contract_address: Buffer;
    function_data: MsgpackFunctionData;
    public_inputs: MsgpackPrivateCircuitPublicInputs;
    is_execution_request: boolean;
}
export declare function toPrivateCallStackItem(o: MsgpackPrivateCallStackItem): PrivateCallStackItem;
export declare function fromPrivateCallStackItem(o: PrivateCallStackItem): MsgpackPrivateCallStackItem;
interface MsgpackMembershipWitness4 {
    leaf_index: Buffer;
    sibling_path: Tuple<Buffer, 4>;
}
export declare function toMembershipWitness4(o: MsgpackMembershipWitness4): MembershipWitness4;
export declare function fromMembershipWitness4(o: MembershipWitness4): MsgpackMembershipWitness4;
interface MsgpackMembershipWitness16 {
    leaf_index: Buffer;
    sibling_path: Tuple<Buffer, 16>;
}
export declare function toMembershipWitness16(o: MsgpackMembershipWitness16): MembershipWitness16;
export declare function fromMembershipWitness16(o: MembershipWitness16): MsgpackMembershipWitness16;
interface MsgpackReadRequestMembershipWitness {
    leaf_index: Buffer;
    sibling_path: Tuple<Buffer, 32>;
    is_transient: boolean;
    hint_to_commitment: Buffer;
}
export declare function toReadRequestMembershipWitness(o: MsgpackReadRequestMembershipWitness): ReadRequestMembershipWitness;
export declare function fromReadRequestMembershipWitness(o: ReadRequestMembershipWitness): MsgpackReadRequestMembershipWitness;
interface MsgpackPrivateCallData {
    call_stack_item: MsgpackPrivateCallStackItem;
    private_call_stack_preimages: Tuple<MsgpackPrivateCallStackItem, 4>;
    proof: Buffer;
    vk: MsgpackVerificationKeyData;
    function_leaf_membership_witness: MsgpackMembershipWitness4;
    contract_leaf_membership_witness: MsgpackMembershipWitness16;
    read_request_membership_witnesses: Tuple<MsgpackReadRequestMembershipWitness, 32>;
    portal_contract_address: Buffer;
    acir_hash: Buffer;
}
export declare function toPrivateCallData(o: MsgpackPrivateCallData): PrivateCallData;
export declare function fromPrivateCallData(o: PrivateCallData): MsgpackPrivateCallData;
interface MsgpackPrivateKernelInputsInit {
    tx_request: MsgpackTxRequest;
    private_call: MsgpackPrivateCallData;
}
export declare function toPrivateKernelInputsInit(o: MsgpackPrivateKernelInputsInit): PrivateKernelInputsInit;
export declare function fromPrivateKernelInputsInit(o: PrivateKernelInputsInit): MsgpackPrivateKernelInputsInit;
interface MsgpackCircuitError {
    code: number;
    message: string;
}
export declare function toCircuitError(o: MsgpackCircuitError): CircuitError;
export declare function fromCircuitError(o: CircuitError): MsgpackCircuitError;
interface MsgpackPrivateKernelInputsInner {
    previous_kernel: MsgpackPreviousKernelData;
    private_call: MsgpackPrivateCallData;
}
export declare function toPrivateKernelInputsInner(o: MsgpackPrivateKernelInputsInner): PrivateKernelInputsInner;
export declare function fromPrivateKernelInputsInner(o: PrivateKernelInputsInner): MsgpackPrivateKernelInputsInner;
interface MsgpackPrivateKernelInputsOrdering {
    previous_kernel: MsgpackPreviousKernelData;
    read_commitment_hints: Tuple<Buffer, 128>;
    nullifier_commitment_hints: Tuple<Buffer, 64>;
}
export declare function toPrivateKernelInputsOrdering(o: MsgpackPrivateKernelInputsOrdering): PrivateKernelInputsOrdering;
export declare function fromPrivateKernelInputsOrdering(o: PrivateKernelInputsOrdering): MsgpackPrivateKernelInputsOrdering;
interface MsgpackFinalAccumulatedData {
    aggregation_object: MsgpackNativeAggregationState;
    new_commitments: Tuple<Buffer, 64>;
    new_nullifiers: Tuple<Buffer, 64>;
    nullified_commitments: Tuple<Buffer, 64>;
    private_call_stack: Tuple<Buffer, 8>;
    public_call_stack: Tuple<Buffer, 8>;
    new_l2_to_l1_msgs: Tuple<Buffer, 2>;
    encrypted_logs_hash: Tuple<Buffer, 2>;
    unencrypted_logs_hash: Tuple<Buffer, 2>;
    encrypted_log_preimages_length: Buffer;
    unencrypted_log_preimages_length: Buffer;
    new_contracts: Tuple<MsgpackNewContractData, 1>;
    optionally_revealed_data: Tuple<MsgpackOptionallyRevealedData, 4>;
}
export declare function toFinalAccumulatedData(o: MsgpackFinalAccumulatedData): FinalAccumulatedData;
export declare function fromFinalAccumulatedData(o: FinalAccumulatedData): MsgpackFinalAccumulatedData;
interface MsgpackKernelCircuitPublicInputsFinal {
    end: MsgpackFinalAccumulatedData;
    constants: MsgpackCombinedConstantData;
    is_private: boolean;
}
export declare function toKernelCircuitPublicInputsFinal(o: MsgpackKernelCircuitPublicInputsFinal): KernelCircuitPublicInputsFinal;
export declare function fromKernelCircuitPublicInputsFinal(o: KernelCircuitPublicInputsFinal): MsgpackKernelCircuitPublicInputsFinal;
interface MsgpackContractStorageUpdateRequest {
    storage_slot: Buffer;
    old_value: Buffer;
    new_value: Buffer;
}
export declare function toContractStorageUpdateRequest(o: MsgpackContractStorageUpdateRequest): ContractStorageUpdateRequest;
export declare function fromContractStorageUpdateRequest(o: ContractStorageUpdateRequest): MsgpackContractStorageUpdateRequest;
interface MsgpackContractStorageRead {
    storage_slot: Buffer;
    current_value: Buffer;
}
export declare function toContractStorageRead(o: MsgpackContractStorageRead): ContractStorageRead;
export declare function fromContractStorageRead(o: ContractStorageRead): MsgpackContractStorageRead;
interface MsgpackPublicCircuitPublicInputs {
    call_context: MsgpackCallContext;
    args_hash: Buffer;
    return_values: Tuple<Buffer, 4>;
    contract_storage_update_requests: Tuple<MsgpackContractStorageUpdateRequest, 16>;
    contract_storage_reads: Tuple<MsgpackContractStorageRead, 16>;
    public_call_stack: Tuple<Buffer, 4>;
    new_commitments: Tuple<Buffer, 16>;
    new_nullifiers: Tuple<Buffer, 16>;
    new_l2_to_l1_msgs: Tuple<Buffer, 2>;
    unencrypted_logs_hash: Tuple<Buffer, 2>;
    unencrypted_log_preimages_length: Buffer;
    historic_block_data: MsgpackHistoricBlockData;
    prover_address: Buffer;
}
export declare function toPublicCircuitPublicInputs(o: MsgpackPublicCircuitPublicInputs): PublicCircuitPublicInputs;
export declare function fromPublicCircuitPublicInputs(o: PublicCircuitPublicInputs): MsgpackPublicCircuitPublicInputs;
interface MsgpackPublicCallStackItem {
    contract_address: Buffer;
    function_data: MsgpackFunctionData;
    public_inputs: MsgpackPublicCircuitPublicInputs;
    is_execution_request: boolean;
}
export declare function toPublicCallStackItem(o: MsgpackPublicCallStackItem): PublicCallStackItem;
export declare function fromPublicCallStackItem(o: PublicCallStackItem): MsgpackPublicCallStackItem;
interface MsgpackPublicCallData {
    call_stack_item: MsgpackPublicCallStackItem;
    public_call_stack_preimages: Tuple<MsgpackPublicCallStackItem, 4>;
    proof: Buffer;
    portal_contract_address: Buffer;
    bytecode_hash: Buffer;
}
export declare function toPublicCallData(o: MsgpackPublicCallData): PublicCallData;
export declare function fromPublicCallData(o: PublicCallData): MsgpackPublicCallData;
interface MsgpackPublicKernelInputs {
    previous_kernel: MsgpackPreviousKernelData;
    public_call: MsgpackPublicCallData;
}
export declare function toPublicKernelInputs(o: MsgpackPublicKernelInputs): PublicKernelInputs;
export declare function fromPublicKernelInputs(o: PublicKernelInputs): MsgpackPublicKernelInputs;
interface MsgpackAppendOnlyTreeSnapshot {
    root: Buffer;
    next_available_leaf_index: number;
}
export declare function toAppendOnlyTreeSnapshot(o: MsgpackAppendOnlyTreeSnapshot): AppendOnlyTreeSnapshot;
export declare function fromAppendOnlyTreeSnapshot(o: AppendOnlyTreeSnapshot): MsgpackAppendOnlyTreeSnapshot;
interface MsgpackNullifierLeafPreimage {
    leaf_value: Buffer;
    next_value: Buffer;
    next_index: number;
}
export declare function toNullifierLeafPreimage(o: MsgpackNullifierLeafPreimage): NullifierLeafPreimage;
export declare function fromNullifierLeafPreimage(o: NullifierLeafPreimage): MsgpackNullifierLeafPreimage;
interface MsgpackConstantRollupData {
    start_historic_blocks_tree_roots_snapshot: MsgpackAppendOnlyTreeSnapshot;
    private_kernel_vk_tree_root: Buffer;
    public_kernel_vk_tree_root: Buffer;
    base_rollup_vk_hash: Buffer;
    merge_rollup_vk_hash: Buffer;
    global_variables: MsgpackGlobalVariables;
}
export declare function toConstantRollupData(o: MsgpackConstantRollupData): ConstantRollupData;
export declare function fromConstantRollupData(o: ConstantRollupData): MsgpackConstantRollupData;
interface MsgpackBaseRollupInputs {
    kernel_data: Tuple<MsgpackPreviousKernelData, 2>;
    start_private_data_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_nullifier_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_contract_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_public_data_tree_root: Buffer;
    start_historic_blocks_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    low_nullifier_leaf_preimages: Tuple<MsgpackNullifierLeafPreimage, 128>;
    low_nullifier_membership_witness: Tuple<MsgpackMembershipWitness16, 128>;
    new_commitments_subtree_sibling_path: Tuple<Buffer, 25>;
    new_nullifiers_subtree_sibling_path: Tuple<Buffer, 9>;
    new_contracts_subtree_sibling_path: Tuple<Buffer, 15>;
    new_public_data_update_requests_sibling_paths: Tuple<Tuple<Buffer, 254>, 32>;
    new_public_data_reads_sibling_paths: Tuple<Tuple<Buffer, 254>, 32>;
    historic_blocks_tree_root_membership_witnesses: Tuple<MsgpackMembershipWitness16, 2>;
    constants: MsgpackConstantRollupData;
}
export declare function toBaseRollupInputs(o: MsgpackBaseRollupInputs): BaseRollupInputs;
export declare function fromBaseRollupInputs(o: BaseRollupInputs): MsgpackBaseRollupInputs;
interface MsgpackBaseOrMergeRollupPublicInputs {
    rollup_type: number;
    rollup_subtree_height: Buffer;
    end_aggregation_object: MsgpackNativeAggregationState;
    constants: MsgpackConstantRollupData;
    start_private_data_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_private_data_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_nullifier_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_nullifier_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_contract_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_contract_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_public_data_tree_root: Buffer;
    end_public_data_tree_root: Buffer;
    calldata_hash: Tuple<Buffer, 2>;
}
export declare function toBaseOrMergeRollupPublicInputs(o: MsgpackBaseOrMergeRollupPublicInputs): BaseOrMergeRollupPublicInputs;
export declare function fromBaseOrMergeRollupPublicInputs(o: BaseOrMergeRollupPublicInputs): MsgpackBaseOrMergeRollupPublicInputs;
interface MsgpackMembershipWitness8 {
    leaf_index: Buffer;
    sibling_path: Tuple<Buffer, 8>;
}
export declare function toMembershipWitness8(o: MsgpackMembershipWitness8): MembershipWitness8;
export declare function fromMembershipWitness8(o: MembershipWitness8): MsgpackMembershipWitness8;
interface MsgpackPreviousRollupData {
    base_or_merge_rollup_public_inputs: MsgpackBaseOrMergeRollupPublicInputs;
    proof: Buffer;
    vk: MsgpackVerificationKeyData;
    vk_index: number;
    vk_sibling_path: MsgpackMembershipWitness8;
}
export declare function toPreviousRollupData(o: MsgpackPreviousRollupData): PreviousRollupData;
export declare function fromPreviousRollupData(o: PreviousRollupData): MsgpackPreviousRollupData;
interface MsgpackMergeRollupInputs {
    previous_rollup_data: Tuple<MsgpackPreviousRollupData, 2>;
}
export declare function toMergeRollupInputs(o: MsgpackMergeRollupInputs): MergeRollupInputs;
export declare function fromMergeRollupInputs(o: MergeRollupInputs): MsgpackMergeRollupInputs;
interface MsgpackRootRollupInputs {
    previous_rollup_data: Tuple<MsgpackPreviousRollupData, 2>;
    new_l1_to_l2_messages: Tuple<Buffer, 16>;
    new_l1_to_l2_messages_tree_root_sibling_path: Tuple<Buffer, 12>;
    start_l1_to_l2_messages_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_historic_blocks_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    new_historic_blocks_tree_sibling_path: Tuple<Buffer, 16>;
}
export declare function toRootRollupInputs(o: MsgpackRootRollupInputs): RootRollupInputs;
export declare function fromRootRollupInputs(o: RootRollupInputs): MsgpackRootRollupInputs;
interface MsgpackRootRollupPublicInputs {
    end_aggregation_object: MsgpackNativeAggregationState;
    global_variables: MsgpackGlobalVariables;
    start_private_data_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_private_data_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_nullifier_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_nullifier_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_contract_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_contract_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_public_data_tree_root: Buffer;
    end_public_data_tree_root: Buffer;
    start_tree_of_historic_private_data_tree_roots_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_tree_of_historic_private_data_tree_roots_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_tree_of_historic_contract_tree_roots_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_tree_of_historic_contract_tree_roots_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_l1_to_l2_messages_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_l1_to_l2_messages_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_tree_of_historic_l1_to_l2_messages_tree_roots_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_tree_of_historic_l1_to_l2_messages_tree_roots_snapshot: MsgpackAppendOnlyTreeSnapshot;
    start_historic_blocks_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    end_historic_blocks_tree_snapshot: MsgpackAppendOnlyTreeSnapshot;
    calldata_hash: Tuple<Buffer, 2>;
    l1_to_l2_messages_hash: Tuple<Buffer, 2>;
}
export declare function toRootRollupPublicInputs(o: MsgpackRootRollupPublicInputs): RootRollupPublicInputs;
export declare function fromRootRollupPublicInputs(o: RootRollupPublicInputs): MsgpackRootRollupPublicInputs;
export declare function abisComputeCommitmentNonce(wasm: IWasmModule, arg0: Fr, arg1: Fr): Fr;
export declare function abisComputeUniqueCommitment(wasm: IWasmModule, arg0: Fr, arg1: Fr): Fr;
export declare function abisSiloCommitment(wasm: IWasmModule, arg0: Address, arg1: Fr): Fr;
export declare function abisSiloNullifier(wasm: IWasmModule, arg0: Address, arg1: Fr): Fr;
export declare function abisComputeBlockHash(wasm: IWasmModule, arg0: Fr, arg1: Fr, arg2: Fr, arg3: Fr, arg4: Fr, arg5: Fr): Fr;
export declare function abisComputeBlockHashWithGlobals(wasm: IWasmModule, arg0: GlobalVariables, arg1: Fr, arg2: Fr, arg3: Fr, arg4: Fr, arg5: Fr): Fr;
export declare function abisComputeGlobalsHash(wasm: IWasmModule, arg0: GlobalVariables): Fr;
export declare function abisComputePublicDataTreeValue(wasm: IWasmModule, arg0: Fr): Fr;
export declare function abisComputePublicDataTreeIndex(wasm: IWasmModule, arg0: Fr, arg1: Fr): Fr;
export declare function privateKernelDummyPreviousKernel(wasm: IWasmModule): PreviousKernelData;
export declare function privateKernelSimInit(wasm: IWasmModule, arg0: PrivateKernelInputsInit): CircuitError | KernelCircuitPublicInputs;
export declare function privateKernelSimInner(wasm: IWasmModule, arg0: PrivateKernelInputsInner): CircuitError | KernelCircuitPublicInputs;
export declare function privateKernelSimOrdering(wasm: IWasmModule, arg0: PrivateKernelInputsOrdering): CircuitError | KernelCircuitPublicInputsFinal;
export declare function publicKernelSim(wasm: IWasmModule, arg0: PublicKernelInputs): CircuitError | KernelCircuitPublicInputs;
export declare function baseRollupSim(wasm: IWasmModule, arg0: BaseRollupInputs): CircuitError | BaseOrMergeRollupPublicInputs;
export declare function mergeRollupSim(wasm: IWasmModule, arg0: MergeRollupInputs): CircuitError | BaseOrMergeRollupPublicInputs;
export declare function rootRollupSim(wasm: IWasmModule, arg0: RootRollupInputs): CircuitError | RootRollupPublicInputs;
export {};
//# sourceMappingURL=circuits.gen.d.ts.map