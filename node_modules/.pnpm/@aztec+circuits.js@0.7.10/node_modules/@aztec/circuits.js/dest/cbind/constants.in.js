import { fileURLToPath } from '@aztec/foundation/url';
import * as fs from 'fs';
import { dirname, join } from 'path';
import { CircuitsWasm } from '../wasm/circuits_wasm.js';
import { callCbind } from './cbind.js';
/**
 * Convert the C++ constants to TypeScript and Noir.
 */
async function main() {
    const wasm = await CircuitsWasm.get();
    const constants = callCbind(wasm, 'get_circuit_constants', []);
    const generatorIndexEnum = callCbind(wasm, 'get_circuit_generator_index', []);
    const storageSlotGeneratorIndexEnum = callCbind(wasm, 'get_circuit_storage_slot_generator_index', []);
    const privateStateNoteGeneratorIndexEnum = callCbind(wasm, 'get_circuit_private_state_note_generator_index', []);
    const privateStateTypeEnum = callCbind(wasm, 'get_circuit_private_state_type', []);
    const __dirname = dirname(fileURLToPath(import.meta.url));
    // Typescript
    const resultTS = '/* eslint-disable */\n// GENERATED FILE - DO NOT EDIT, RUN yarn remake-constants\n' +
        processConstantsTS(constants) +
        processEnumTS('GeneratorIndex', generatorIndexEnum) +
        processEnumTS('StorageSlotGeneratorIndex', storageSlotGeneratorIndexEnum) +
        processEnumTS('PrivateStateNoteGeneratorIndex', privateStateNoteGeneratorIndexEnum) +
        processEnumTS('PrivateStateType', privateStateTypeEnum);
    fs.writeFileSync(__dirname + '/constants.gen.ts', resultTS);
    // Noir
    const resultNoir = '// GENERATED FILE - DO NOT EDIT, RUN yarn remake-constants in circuits.js\n' +
        processConstantsNoir(constants) +
        processEnumNoir(generatorIndexEnum, 'GENERATOR_INDEX__') +
        processEnumNoir(storageSlotGeneratorIndexEnum, 'STORAGE_SLOT_GENERATOR_INDEX__') +
        processEnumNoir(privateStateNoteGeneratorIndexEnum, 'PRIVATE_STATE_NOTE_GENERATOR_INDEX__') +
        processEnumNoir(privateStateTypeEnum, 'PRIVATE_STATE_TYPE__');
    const noirTargetPath = join(__dirname, '../../../aztec-nr/aztec/src/constants_gen.nr');
    fs.writeFileSync(noirTargetPath, resultNoir);
    // Solidity
    const resultSolidity = `// GENERATED FILE - DO NOT EDIT, RUN yarn remake-constants in circuits.js
// SPDX-License-Identifier: Apache-2.0
// Copyright 2023 Aztec Labs.
pragma solidity >=0.8.18;

/**
 * @title Constants Library
 * @author Aztec Labs
 * @notice Library that contains constants used throughout the Aztec protocol
 */
library Constants {
  // Prime field modulus
  uint256 internal constant P =
    21888242871839275222246405745257275088548364400416034343698204186575808495617;
  uint256 internal constant MAX_FIELD_VALUE = P - 1;

${processConstantsSolidity(constants)}
}\n`;
    const solidityTargetPath = join(__dirname, '../../../../l1-contracts/src/core/libraries/ConstantsGen.sol');
    fs.writeFileSync(solidityTargetPath, resultSolidity);
}
/**
 * Processes a collection of constants and generates code to export them as TypeScript constants.
 *
 * @param constants - An object containing key-value pairs representing constants.
 * @returns A string containing code that exports the constants as TypeScript constants.
 */
function processConstantsTS(constants) {
    const code = [];
    Object.entries(constants).forEach(([key, value]) => {
        code.push(`export const ${key} = ${value};`);
    });
    return code.join('\n');
}
/**
 * Processes an enum and generates code to export it as a TypeScript enum.
 *
 * @param enumName - The name of the enum.
 * @param enumValues - An object containing key-value pairs representing enum values.
 * @returns A string containing code that exports the enum as a TypeScript enum.
 */
function processEnumTS(enumName, enumValues) {
    const code = [];
    code.push(`export enum ${enumName} {`);
    Object.entries(enumValues).forEach(([key, value]) => {
        code.push(`  ${key} = ${value},`);
    });
    code.push('}');
    return code.join('\n');
}
/**
 * Processes a collection of constants and generates code to export them as Noir constants.
 *
 * @param constants - An object containing key-value pairs representing constants.
 * @param prefix - A prefix to add to the constant names.
 * @returns A string containing code that exports the constants as Noir constants.
 */
function processConstantsNoir(constants, prefix = '') {
    const code = [];
    Object.entries(constants).forEach(([key, value]) => {
        code.push(`global ${prefix}${key}: Field = ${value};`);
    });
    return code.join('\n') + '\n';
}
/**
 * Processes a collection of enums and generates code to export them as Noir constants prefixed with enum name.
 *
 * @param enumValues - An object containing key-value pairs representing enum values.
 * @param enumPrefix - A prefix to add to the names of resulting Noir constants to communicate the constant was part
 *                     of C++ enum.
 * @returns A string containing code that exports the enums as Noir constants prefixed with enum name.
 */
function processEnumNoir(enumValues, enumPrefix) {
    const code = [];
    Object.entries(enumValues).forEach(([key, value]) => {
        code.push(`global ${enumPrefix}${key} = ${value};`);
    });
    return code.join('\n') + '\n';
}
/**
 * Processes a collection of constants and generates code to export them as Solidity constants.
 *
 * @param constants - An object containing key-value pairs representing constants.
 * @param prefix - A prefix to add to the constant names.
 * @returns A string containing code that exports the constants as Noir constants.
 */
function processConstantsSolidity(constants, prefix = '') {
    const code = [];
    Object.entries(constants).forEach(([key, value]) => {
        code.push(`  uint256 internal constant ${prefix}${key} = ${value};`);
    });
    return code.join('\n');
}
// eslint-disable-next-line no-console
main().catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NiaW5kL2NvbnN0YW50cy5pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFdEQsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFckMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFdkM7O0dBRUc7QUFDSCxLQUFLLFVBQVUsSUFBSTtJQUNqQixNQUFNLElBQUksR0FBRyxNQUFNLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN0QyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLHVCQUF1QixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSw2QkFBNkIsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5RSxNQUFNLDZCQUE2QixHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUUsMENBQTBDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEcsTUFBTSxrQ0FBa0MsR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLGdEQUFnRCxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pILE1BQU0sb0JBQW9CLEdBQUcsU0FBUyxDQUFDLElBQUksRUFBRSxnQ0FBZ0MsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVuRixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUUxRCxhQUFhO0lBQ2IsTUFBTSxRQUFRLEdBQ1osb0ZBQW9GO1FBQ3BGLGtCQUFrQixD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