import { decode, encode } from '@msgpack/msgpack';
/**
 * Recursively converts Uint8Arrays to Buffers in the input data structure.
 * The function traverses through the given data, and if it encounters a Uint8Array,
 * it replaces it with a Buffer. It supports nested arrays and objects.
 *
 * @param data - The input data structure that may contain Uint8Arrays.
 * @returns A new data structure with all instances of Uint8Array replaced by Buffer.
 */
function recursiveUint8ArrayToBuffer(data) {
    if (Array.isArray(data)) {
        return data.map(recursiveUint8ArrayToBuffer);
    }
    else if (data instanceof Uint8Array) {
        return Buffer.from(data);
    }
    else if (data && typeof data === 'object') {
        const fixed = {};
        for (const key in data) {
            fixed[key] = recursiveUint8ArrayToBuffer(data[key]);
        }
        return fixed;
    }
    else {
        return data;
    }
}
/**
 * Read a 32-bit pointer value from the WebAssembly memory space.
 *
 * @param wasm - The CircuitsWasm.
 * @param ptr32 - The address in WebAssembly memory.
 * @returns The read unsigned 32-bit integer.
 */
function readPtr32(wasm, ptr32) {
    // Written in little-endian as WASM native
    const dataView = new DataView(wasm.getMemorySlice(ptr32, ptr32 + 4).buffer);
    return dataView.getUint32(0, /*little endian*/ true);
}
/**
 * Retrieves the JSON schema of a given C binding function from the WebAssembly module.
 *
 * @param wasm - The CircuitsWasm.
 * @param cbind - The name of the function.
 * @returns A JSON object representing the schema.
 */
export function getCbindSchema(wasm, cbind) {
    const outputSizePtr = wasm.call('bbmalloc', 4);
    const outputMsgpackPtr = wasm.call('bbmalloc', 4);
    wasm.call(cbind + '__schema', outputMsgpackPtr, outputSizePtr);
    const jsonSchema = wasm.getMemoryAsString(readPtr32(wasm, outputMsgpackPtr));
    wasm.call('bbfree', outputSizePtr);
    wasm.call('bbfree', outputMsgpackPtr);
    return JSON.parse(jsonSchema);
}
/**
 * Calls a C binding function in the WebAssembly module with the provided input arguments.
 *
 * @param wasm - The CircuitsWasm.
 * @param cbind - The name of function.
 * @param input - An array of input arguments to wrap with msgpack.
 * @returns The msgpack-decoded result.
 */
export function callCbind(wasm, cbind, input) {
    const outputSizePtr = wasm.call('bbmalloc', 4);
    const outputMsgpackPtr = wasm.call('bbmalloc', 4);
    const inputBuffer = encode(input);
    const inputPtr = wasm.call('bbmalloc', inputBuffer.length);
    wasm.writeMemory(inputPtr, inputBuffer);
    wasm.call(cbind, inputPtr, inputBuffer.length, outputMsgpackPtr, outputSizePtr);
    const encodedResult = wasm.getMemorySlice(readPtr32(wasm, outputMsgpackPtr), readPtr32(wasm, outputMsgpackPtr) + readPtr32(wasm, outputSizePtr));
    const result = recursiveUint8ArrayToBuffer(decode(encodedResult));
    wasm.call('bbfree', inputPtr);
    wasm.call('bbfree', outputSizePtr);
    wasm.call('bbfree', outputMsgpackPtr);
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2JpbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2JpbmQvY2JpbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUlsRDs7Ozs7OztHQU9HO0FBQ0gsU0FBUywyQkFBMkIsQ0FBQyxJQUFTO0lBQzVDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN2QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksSUFBSSxZQUFZLFVBQVUsRUFBRTtRQUNyQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUI7U0FBTSxJQUFJLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDM0MsTUFBTSxLQUFLLEdBQVEsRUFBRSxDQUFDO1FBRXRCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ3RCLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUVELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBUyxTQUFTLENBQUMsSUFBaUIsRUFBRSxLQUFhO0lBQ2pELDBDQUEwQztJQUMxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUUsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxJQUFrQixFQUFFLEtBQWE7SUFDOUQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDL0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQzdFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDdEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxJQUFpQixFQUFFLEtBQWEsRUFBRSxLQUFZO0lBQ3RFLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNoRixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUN2QyxTQUFTLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLEVBQ2pDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUNuRSxDQUFDO0lBQ0YsTUFBTSxNQUFNLEdBQUcsMkJBQTJCLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN0QyxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIn0=