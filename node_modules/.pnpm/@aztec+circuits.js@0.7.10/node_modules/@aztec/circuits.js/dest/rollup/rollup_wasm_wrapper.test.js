import { AggregationObject, BaseOrMergeRollupPublicInputs, CircuitError, RootRollupPublicInputs, VerificationKey, baseRollupSim, mergeRollupSim, rootRollupSim, } from '../index.js';
import { makeBaseRollupInputs, makeMergeRollupInputs, makeRootRollupInputs } from '../tests/factories.js';
import { CircuitsWasm } from '../wasm/circuits_wasm.js';
describe('rollup/rollup_wasm_wrapper', () => {
    let wasm;
    beforeAll(async () => {
        wasm = await CircuitsWasm.get();
    });
    const makeBaseRollupInputsForCircuit = () => {
        const input = makeBaseRollupInputs();
        for (const kd of input.kernelData) {
            kd.vk = VerificationKey.makeFake();
            kd.publicInputs.end.aggregationObject = AggregationObject.makeFake();
        }
        return input;
    };
    const fixPreviousRollupInputs = (input) => {
        input.previousRollupData[1].baseOrMergeRollupPublicInputs.constants =
            input.previousRollupData[0].baseOrMergeRollupPublicInputs.constants;
        input.previousRollupData[1].baseOrMergeRollupPublicInputs.startPrivateDataTreeSnapshot =
            input.previousRollupData[0].baseOrMergeRollupPublicInputs.endPrivateDataTreeSnapshot;
        input.previousRollupData[1].baseOrMergeRollupPublicInputs.startNullifierTreeSnapshot =
            input.previousRollupData[0].baseOrMergeRollupPublicInputs.endNullifierTreeSnapshot;
        input.previousRollupData[1].baseOrMergeRollupPublicInputs.startContractTreeSnapshot =
            input.previousRollupData[0].baseOrMergeRollupPublicInputs.endContractTreeSnapshot;
        input.previousRollupData[1].baseOrMergeRollupPublicInputs.startPublicDataTreeRoot =
            input.previousRollupData[0].baseOrMergeRollupPublicInputs.endPublicDataTreeRoot;
    };
    const makeMergeRollupInputsForCircuit = () => {
        const input = makeMergeRollupInputs();
        for (const previousData of input.previousRollupData) {
            previousData.vk = VerificationKey.makeFake();
            previousData.baseOrMergeRollupPublicInputs.endAggregationObject = AggregationObject.makeFake();
        }
        fixPreviousRollupInputs(input);
        return input;
    };
    // Task to repair this test: https://github.com/AztecProtocol/aztec-packages/issues/1586
    it.skip('calls base_rollup__sim', () => {
        const input = makeBaseRollupInputsForCircuit();
        const output = baseRollupSim(wasm, input);
        expect(output instanceof BaseOrMergeRollupPublicInputs).toBeTruthy();
        const publicInputs = output;
        expect(publicInputs.startContractTreeSnapshot).toEqual(input.startContractTreeSnapshot);
        expect(publicInputs.startNullifierTreeSnapshot).toEqual(input.startNullifierTreeSnapshot);
        expect(publicInputs.startPrivateDataTreeSnapshot).toEqual(input.startPrivateDataTreeSnapshot);
    });
    it('calls merge_rollup__sim', () => {
        const input = makeMergeRollupInputsForCircuit();
        const output = mergeRollupSim(wasm, input);
        if (output instanceof CircuitError) {
            throw new CircuitError(output.code, output.message);
        }
        expect(output.rollupType).toEqual(1);
        expect(output.startContractTreeSnapshot).toEqual(input.previousRollupData[0].baseOrMergeRollupPublicInputs.startContractTreeSnapshot);
        expect(output.startNullifierTreeSnapshot).toEqual(input.previousRollupData[0].baseOrMergeRollupPublicInputs.startNullifierTreeSnapshot);
        expect(output.startPrivateDataTreeSnapshot).toEqual(input.previousRollupData[0].baseOrMergeRollupPublicInputs.startPrivateDataTreeSnapshot);
        expect(output.endPrivateDataTreeSnapshot).toEqual(input.previousRollupData[1].baseOrMergeRollupPublicInputs.endPrivateDataTreeSnapshot);
    });
    it('calling merge_rollup__sim with different constants should fail', () => {
        const input = makeMergeRollupInputs();
        const output = mergeRollupSim(wasm, input);
        expect(output instanceof CircuitError).toBeTruthy();
        const err = output;
        expect(err.message).toEqual(`input proofs have different constants`);
        expect(err.code).toEqual(7003);
    });
    // Task to repair this test: https://github.com/AztecProtocol/aztec-packages/issues/1586
    it.skip('calls root_rollup__sim', () => {
        const input = makeRootRollupInputs();
        for (const rd of input.previousRollupData) {
            rd.vk = VerificationKey.makeFake();
            rd.baseOrMergeRollupPublicInputs.endAggregationObject = AggregationObject.makeFake();
            const output = baseRollupSim(wasm, makeBaseRollupInputsForCircuit());
            expect(output instanceof BaseOrMergeRollupPublicInputs).toBeTruthy();
            rd.baseOrMergeRollupPublicInputs = output;
        }
        fixPreviousRollupInputs(input);
        const output = rootRollupSim(wasm, input);
        expect(output instanceof RootRollupPublicInputs).toBeTruthy();
        const publicInputs = output;
        expect(publicInputs.startNullifierTreeSnapshot).toEqual(input.previousRollupData[0].baseOrMergeRollupPublicInputs.startNullifierTreeSnapshot);
    }, 15000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwX3dhc21fd3JhcHBlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvbGx1cC9yb2xsdXBfd2FzbV93cmFwcGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGlCQUFpQixFQUNqQiw2QkFBNkIsRUFDN0IsWUFBWSxFQUdaLHNCQUFzQixFQUN0QixlQUFlLEVBQ2YsYUFBYSxFQUNiLGNBQWMsRUFDZCxhQUFhLEdBQ2QsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLHFCQUFxQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXhELFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsSUFBSSxJQUFrQixDQUFDO0lBRXZCLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixJQUFJLEdBQUcsTUFBTSxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLDhCQUE4QixHQUFHLEdBQUcsRUFBRTtRQUMxQyxNQUFNLEtBQUssR0FBRyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3JDLEtBQUssTUFBTSxFQUFFLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtZQUNqQyxFQUFFLENBQUMsRUFBRSxHQUFHLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuQyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN0RTtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLEtBQTJDLEVBQUUsRUFBRTtRQUM5RSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFD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