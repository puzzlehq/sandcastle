import { Fr } from '@aztec/foundation/fields';
import { MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_READ_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH, } from '../cbind/constants.gen.js';
import { makeTuple } from '../utils/jsUtils.js';
import { serializeToBuffer } from '../utils/serialize.js';
import { CallContext } from './call_context.js';
import { HistoricBlockData } from './index.js';
import { ContractDeploymentData } from './tx_context.js';
/**
 * Public inputs to a private circuit.
 * @see abis/private_circuit_public_inputs.hpp.
 */
export class PrivateCircuitPublicInputs {
    constructor(
    /**
     * Context of the call corresponding to this private circuit execution.
     */
    callContext, 
    /**
     * Pedersen hash of function arguments.
     */
    argsHash, 
    /**
     * Return values of the corresponding function call.
     */
    returnValues, 
    /**
     * Read requests created by the corresponding function call.
     */
    readRequests, 
    /**
     * New commitments created by the corresponding function call.
     */
    newCommitments, 
    /**
     * New nullifiers created by the corresponding function call.
     */
    newNullifiers, 
    /**
     * The commitments those were nullified by the above newNullifiers.
     */
    nullifiedCommitments, 
    /**
     * Private call stack at the current kernel iteration.
     */
    privateCallStack, 
    /**
     * Public call stack at the current kernel iteration.
     */
    publicCallStack, 
    /**
     * New L2 to L1 messages created by the corresponding function call.
     */
    newL2ToL1Msgs, 
    /**
     * Hash of the encrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    encryptedLogsHash, 
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash, 
    /**
     * Length of the encrypted log preimages emitted in this function call.
     * Note: Here so that the gas cost of this request can be measured by circuits, without actually needing to feed
     *       in the variable-length data.
     */
    encryptedLogPreimagesLength, 
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength, 
    /**
     * Historic roots of the data trees, used to calculate the block hash the user is proving against.
     */
    historicBlockData, 
    /**
     * Deployment data of contracts being deployed in this kernel iteration.
     */
    contractDeploymentData, 
    /**
     * Chain Id of the instance.
     */
    chainId, 
    /**
     * Version of the instance.
     */
    version) {
        this.callContext = callContext;
        this.argsHash = argsHash;
        this.returnValues = returnValues;
        this.readRequests = readRequests;
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.nullifiedCommitments = nullifiedCommitments;
        this.privateCallStack = privateCallStack;
        this.publicCallStack = publicCallStack;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.encryptedLogsHash = encryptedLogsHash;
        this.unencryptedLogsHash = unencryptedLogsHash;
        this.encryptedLogPreimagesLength = encryptedLogPreimagesLength;
        this.unencryptedLogPreimagesLength = unencryptedLogPreimagesLength;
        this.historicBlockData = historicBlockData;
        this.contractDeploymentData = contractDeploymentData;
        this.chainId = chainId;
        this.version = version;
    }
    /**
     * Create PrivateCircuitPublicInputs from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PrivateCircuitPublicInputs object.
     */
    static from(fields) {
        return new PrivateCircuitPublicInputs(...PrivateCircuitPublicInputs.getFields(fields));
    }
    /**
     * Create an empty PrivateCircuitPublicInputs.
     * @returns An empty PrivateCircuitPublicInputs object.
     */
    static empty() {
        return new PrivateCircuitPublicInputs(CallContext.empty(), Fr.ZERO, makeTuple(RETURN_VALUES_LENGTH, Fr.zero), makeTuple(MAX_READ_REQUESTS_PER_CALL, Fr.zero), makeTuple(MAX_NEW_COMMITMENTS_PER_CALL, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_CALL, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_CALL, Fr.zero), makeTuple(MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, Fr.zero), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, Fr.zero), makeTuple(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, Fr.zero), makeTuple(NUM_FIELDS_PER_SHA256, Fr.zero), makeTuple(NUM_FIELDS_PER_SHA256, Fr.zero), Fr.ZERO, Fr.ZERO, HistoricBlockData.empty(), ContractDeploymentData.empty(), Fr.ZERO, Fr.ZERO);
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            // NOTE: Must have same order as CPP.
            fields.callContext,
            fields.argsHash,
            fields.returnValues,
            fields.readRequests,
            fields.newCommitments,
            fields.newNullifiers,
            fields.nullifiedCommitments,
            fields.privateCallStack,
            fields.publicCallStack,
            fields.newL2ToL1Msgs,
            fields.encryptedLogsHash,
            fields.unencryptedLogsHash,
            fields.encryptedLogPreimagesLength,
            fields.unencryptedLogPreimagesLength,
            fields.historicBlockData,
            fields.contractDeploymentData,
            fields.chainId,
            fields.version,
        ];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PrivateCircuitPublicInputs.getFields(this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9jaXJjdWl0X3B1YmxpY19pbnB1dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RydWN0cy9wcml2YXRlX2NpcmN1aXRfcHVibGljX2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHOUMsT0FBTyxFQUNMLDRCQUE0QixFQUM1Qiw4QkFBOEIsRUFDOUIsMkJBQTJCLEVBQzNCLHNDQUFzQyxFQUN0QyxxQ0FBcUMsRUFDckMsMEJBQTBCLEVBQzFCLHFCQUFxQixFQUNyQixvQkFBb0IsR0FDckIsTUFBTSwyQkFBMkIsQ0FBQztBQUNuQyxPQUFPLEVBQVksU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMvQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6RDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBQ3JDO0lBQ0U7O09BRUc7SUFDSSxXQUF3QjtJQUMvQjs7T0FFRztJQUNJLFFBQVk7SUFDbkI7O09BRUc7SUFDSSxZQUFvRDtJQUMzRDs7T0FFRztJQUNJLFlBQTBEO0lBQ2pFOztPQUVHO0lBQ0ksY0FBOEQ7SUFDckU7O09BRUc7SUFDSSxhQUE0RDtJQUNuRTs7T0FFRztJQUNJLG9CQUFtRTtJQUMxRTs7T0FFRztJQUNJLGdCQUEwRTtJQUNqRjs7T0FFRztJQUNJLGVBQXdFO0lBQy9FOztPQUVHO0lBQ0ksYUFBK0Q7SUFDdEU7OztPQUdHO0lBQ0ksaUJBQTBEO0lBQ2pFOzs7T0FHRztJQUNJLG1CQUE0RDtJQUNuRTs7OztPQUlHO0lBQ0ksMkJBQStCO0lBQ3RDOztPQUVHO0lBQ0ksNkJBQWlDO0lBQ3hDOztPQUVHO0lBQ0ksaUJBQW9DO0lBQzNDOztPQUVHO0lBQ0ksc0JBQThDO0lBQ3JEOztPQUVHO0lBQ0ksT0FBVztJQUNsQjs7T0FFRztJQUNJLE9BQVc7UUF4RVgsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFJeEIsYUFBUSxHQUFSLFFBQVEsQ0FBSTtRQUlaLGlCQUFZLEdBQVosWUFBWSxDQUF3QztRQUlwRCxpQkFBWSxHQUFaLFlBQVksQ0FBOEM7UUFJMUQsbUJBQWMsR0FBZCxjQUFjLENBQWdEO1FBSTlELGtCQUFhLEdBQWIsYUFBYSxDQUErQztRQUk1RCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQStDO1FBSW5FLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBMEQ7UUFJMUUsb0JBQWUsR0FBZixlQUFlLENBQXlEO1FBSXhFLGtCQUFhLEdBQWIsYUFBYSxDQUFrRDtRQUsvRCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXlDO1FBSzFELHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBeUM7UUFNNUQsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUFJO1FBSS9CLGtDQUE2QixHQUE3Qiw2QkFBNkIsQ0FBSTtRQUlqQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBSXBDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFJOUMsWUFBTyxHQUFQLE9BQU8sQ0FBSTtRQUlYLFlBQU8sR0FBUCxPQUFPLENBQUk7SUFDakIsQ0FBQztJQUNKOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQTRDO1FBQ3RELE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxHQUFHLDBCQUEwQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsS0FBSztRQUNqQixPQUFPLElBQUksMEJBQTBCLENBQ25DLFdBQVcsQ0FBQyxLQUFLLEVBQUUsRUFDbkIsRUFBRSxDQUFDLElBQUksRUFDUCxTQUFTLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUN4QyxTQUFTLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUM5QyxTQUFTLENBQUMsNEJBQTRCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNoRCxTQUFTLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUMvQyxTQUFTLENBQUMsMkJBQTJCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUMvQyxTQUFTLENBQUMsc0NBQXNDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUMxRCxTQUFTLENBQUMscUNBQXFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUN6RCxTQUFTLENBQUMsOEJBQThCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNsRCxTQUFTLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUN6QyxTQUFTLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUN6QyxFQUFFLENBQUMsSUFBSSxFQUNQLEVBQUUsQ0FBQyxJQUFJLEVBQ1AsaUJBQWlCLENBQUMsS0FBSyxFQUFFLEVBQ3pCLHNCQUFzQixDQUFDLEtBQUssRUFBRSxFQUM5QixFQUFFLENBQUMsSUFBSSxFQUNQLEVBQUUsQ0FBQyxJQUFJLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFDRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUE0QztRQUMzRCxPQUFPO1lBQ0wscUNBQXFDO1lBQ3JDLE1BQU0sQ0FBQyxXQUFXO1lBQ2xCLE1BQU0sQ0FBQyxRQUFRO1lBQ2YsTUFBTSxDQUFDLFlBQVk7WUFDbkIsTUFBTSxDQUFDLFlBQVk7WUFDbkIsTUFBTSxDQUFDLGNBQWM7WUFDckIsTUFBTSxDQUFDLGFBQWE7WUFDcEIsTUFBTSxDQUFDLG9CQUFvQjtZQUMzQixNQUFNLENBQUMsZ0JBQWdCO1lBQ3ZCLE1BQU0sQ0FBQyxlQUFlO1lBQ3RCLE1BQU0sQ0FBQyxhQUFhO1lBQ3BCLE1BQU0sQ0FBQyxpQkFBaUI7WUFDeEIsTUFBTSxDQUFDLG1CQUFtQjtZQUMxQixNQUFNLENBQUMsMkJBQTJCO1lBQ2xDLE1BQU0sQ0FBQyw2QkFBNkI7WUFDcEMsTUFBTSxDQUFDLGlCQUFpQjtZQUN4QixNQUFNLENBQUMsc0JBQXNCO1lBQzdCLE1BQU0sQ0FBQyxPQUFPO1lBQ2QsTUFBTSxDQUFDLE9BQU87U0FDTixDQUFDO0lBQ2IsQ0FBQztJQUNEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLEdBQUcsMEJBQTBCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztDQUNGIn0=