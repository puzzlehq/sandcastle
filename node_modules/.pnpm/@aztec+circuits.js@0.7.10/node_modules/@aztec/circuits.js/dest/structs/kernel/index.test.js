import { expectSerializeToMatchSnapshot } from '../../tests/expectSerialize.js';
import { makeAccumulatedData, makeFinalAccumulatedData, makeKernelPublicInputs, makePreviousKernelData, makePrivateKernelInputsInit, makePrivateKernelInputsInner, makePrivateKernelPublicInputsFinal, makePublicKernelInputs, makeSchnorrSignature, } from '../../tests/factories.js';
describe('structs/kernel', () => {
    it(`serializes and prints previous_kernel_data`, async () => {
        const previousKernelData = makePreviousKernelData();
        await expectSerializeToMatchSnapshot(previousKernelData.toBuffer(), 'abis__test_roundtrip_serialize_previous_kernel_data');
    });
    it(`serializes and prints private_kernel_inputs_init`, async () => {
        const kernelInputs = makePrivateKernelInputsInit();
        await expectSerializeToMatchSnapshot(kernelInputs.toBuffer(), 'abis__test_roundtrip_serialize_private_kernel_inputs_init');
    });
    it(`serializes and prints private_kernel_inputs_inner`, async () => {
        const kernelInputs = makePrivateKernelInputsInner();
        await expectSerializeToMatchSnapshot(kernelInputs.toBuffer(), 'abis__test_roundtrip_serialize_private_kernel_inputs_inner');
    });
    it(`serializes and prints EcdsaSignature`, async () => {
        await expectSerializeToMatchSnapshot(makeSchnorrSignature().toBuffer(), 'abis__test_roundtrip_serialize_signature');
    });
    it(`serializes and prints CombinedAccumulatedData`, async (seed = 1) => {
        await expectSerializeToMatchSnapshot(makeAccumulatedData(seed, true).toBuffer(), 'abis__test_roundtrip_serialize_combined_accumulated_data');
    });
    it(`serializes and prints FinalAccumulatedData`, async (seed = 1) => {
        await expectSerializeToMatchSnapshot(makeFinalAccumulatedData(seed, true).toBuffer(), 'abis__test_roundtrip_serialize_final_accumulated_data');
    });
    it(`serializes and prints private_kernel_public_inputs`, async () => {
        const kernelInputs = makeKernelPublicInputs();
        await expectSerializeToMatchSnapshot(kernelInputs.toBuffer(), 'abis__test_roundtrip_serialize_kernel_circuit_public_inputs');
    });
    it(`serializes and prints private_kernel_public_inputs for ordering circuit`, async () => {
        const kernelInputs = makePrivateKernelPublicInputsFinal();
        await expectSerializeToMatchSnapshot(kernelInputs.toBuffer(), 'abis__test_roundtrip_serialize_kernel_circuit_public_inputs_final');
    });
    it(`serializes and prints public_kernel_inputs`, async () => {
        const kernelInputs = await makePublicKernelInputs();
        await expectSerializeToMatchSnapshot(kernelInputs.toBuffer(), 'abis__test_roundtrip_serialize_public_kernel_inputs');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL2tlcm5lbC9pbmRleC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hGLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsd0JBQXdCLEVBQ3hCLHNCQUFzQixFQUN0QixzQkFBc0IsRUFDdEIsMkJBQTJCLEVBQzNCLDRCQUE0QixFQUM1QixrQ0FBa0MsRUFDbEMsc0JBQXNCLEVBQ3RCLG9CQUFvQixHQUNyQixNQUFNLDBCQUEwQixDQUFDO0FBRWxDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFELE1BQU0sa0JBQWtCLEdBQUcsc0JBQXNCLEVBQUUsQ0FBQztRQUNwRCxNQUFNLDhCQUE4QixDQUNsQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsRUFDN0IscURBQXFELENBQ3RELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRSxNQUFNLFlBQVksR0FBRywyQkFBMkIsRUFBRSxDQUFDO1FBQ25ELE1BQU0sOEJBQThCLENBQ2xDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFDdkIsMkRBQTJELENBQzVELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtREFBbUQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNqRSxNQUFNLFlBQVksR0FBRyw0QkFBNEIsRUFBRSxDQUFDO1FBQ3BELE1BQU0sOEJBQThCLENBQ2xDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFDdkIsNERBQTRELENBQzdELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNwRCxNQUFNLDhCQUE4QixDQUFDLG9CQUFvQixFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsMENBQTBDLENBQUMsQ0FBQztJQUN0SCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxLQUFLLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFO1FBQ3JFLE1BQU0sOEJBQThCLENBQ2xDLG1CQUFtQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFDMUMsMERBQTBELENBQzNELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxLQUFLLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxFQUFFO1FBQ2xFLE1BQU0sOEJBQThCLENBQ2xDLHdCQUF3QixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFDL0MsdURBQXVELENBQ3hELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNsRSxNQUFNLFlBQVksR0FBRyxzQkFBc0IsRUFBRSxDQUFDO1FBQzlDLE1BQU0sOEJBQThCLENBQ2xDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFDdkIsNkRBQTZELENBQzlELENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5RUFBeUUsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2RixNQUFNLFlBQVksR0FBRyxrQ0FBa0MsRUFBRSxDQUFDO1FBQzFELE1BQU0sOEJBQThCLENBQ2xDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFDdkIsbUVBQW1FLENBQ3BFLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMxRCxNQUFNLFlBQVksR0FBRyxNQUFNLHNCQUFzQixFQUFFLENBQUM7UUFDcEQsTUFBTSw4QkFBOEIsQ0FDbEMsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUN2QixxREFBcUQsQ0FDdEQsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==