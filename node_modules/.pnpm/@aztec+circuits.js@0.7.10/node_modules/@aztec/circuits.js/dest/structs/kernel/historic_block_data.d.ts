/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { FieldsOf } from '../../utils/jsUtils.js';
/**
 * Information about the tree roots used for both public and private kernels.
 */
export declare class HistoricBlockData {
    /**
     * Root of the private data tree at the time of when this information was assembled.
     */
    privateDataTreeRoot: Fr;
    /**
     * Root of the nullifier tree at the time of when this information was assembled.
     */
    nullifierTreeRoot: Fr;
    /**
     * Root of the contract tree at the time of when this information was assembled.
     */
    contractTreeRoot: Fr;
    /**
     * Root of the l1 to l2 messages tree at the time of when this information was assembled.
     */
    l1ToL2MessagesTreeRoot: Fr;
    /**
     * Root of the historic blocks tree at the time of when this information was assembled.
     */
    blocksTreeRoot: Fr;
    /**
     * Root of the private kernel vk tree at the time of when this information was assembled.
     */
    privateKernelVkTreeRoot: Fr;
    /**
     * Current public state tree hash.
     */
    publicDataTreeRoot: Fr;
    /**
     * Previous globals hash, this value is used to recalculate the block hash.
     */
    globalVariablesHash: Fr;
    constructor(
    /**
     * Root of the private data tree at the time of when this information was assembled.
     */
    privateDataTreeRoot: Fr, 
    /**
     * Root of the nullifier tree at the time of when this information was assembled.
     */
    nullifierTreeRoot: Fr, 
    /**
     * Root of the contract tree at the time of when this information was assembled.
     */
    contractTreeRoot: Fr, 
    /**
     * Root of the l1 to l2 messages tree at the time of when this information was assembled.
     */
    l1ToL2MessagesTreeRoot: Fr, 
    /**
     * Root of the historic blocks tree at the time of when this information was assembled.
     */
    blocksTreeRoot: Fr, 
    /**
     * Root of the private kernel vk tree at the time of when this information was assembled.
     */
    privateKernelVkTreeRoot: Fr, // future enhancement
    /**
     * Current public state tree hash.
     */
    publicDataTreeRoot: Fr, 
    /**
     * Previous globals hash, this value is used to recalculate the block hash.
     */
    globalVariablesHash: Fr);
    static from(fields: FieldsOf<HistoricBlockData>): HistoricBlockData;
    static random(): HistoricBlockData;
    static getFields(fields: FieldsOf<HistoricBlockData>): readonly [Fr, Fr, Fr, Fr, Fr, Fr, Fr, Fr];
    toBuffer(): Buffer;
    toString(): string;
    /**
     * Return the historic block data as an array of items in the order they are serialised in noir.
     * @returns Array of items in the order they are stored in the contract
     */
    toArray(): Fr[];
    static fromBuffer(buffer: Buffer | BufferReader): HistoricBlockData;
    isEmpty(): boolean;
    static empty(): HistoricBlockData;
}
//# sourceMappingURL=historic_block_data.d.ts.map