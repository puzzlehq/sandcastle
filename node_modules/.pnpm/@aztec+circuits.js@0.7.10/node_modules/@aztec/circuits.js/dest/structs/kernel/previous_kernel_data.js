import { BufferReader } from '@aztec/foundation/serialize';
import { privateKernelDummyPreviousKernel } from '../../cbind/circuits.gen.js';
import { VK_TREE_HEIGHT, makeTuple } from '../../index.js';
import { serializeToBuffer } from '../../utils/serialize.js';
import { Fr } from '../index.js';
import { Proof, makeEmptyProof } from '../proof.js';
import { VerificationKey } from '../verification_key.js';
import { KernelCircuitPublicInputs } from './public_inputs.js';
/**
 * Data of the previous kernel iteration in the chain of kernels.
 */
export class PreviousKernelData {
    constructor(
    /**
     * Public inputs of the previous kernel.
     */
    publicInputs, 
    /**
     * Proof of the previous kernel.
     */
    proof, 
    /**
     * Verification key of the previous kernel.
     */
    vk, 
    /**
     * Index of the previous kernel's vk in a tree of vks.
     */
    vkIndex, 
    /**
     * Sibling path of the previous kernel's vk in a tree of vks.
     */
    vkPath) {
        this.publicInputs = publicInputs;
        this.proof = proof;
        this.vk = vk;
        this.vkIndex = vkIndex;
        this.vkPath = vkPath;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.publicInputs, this.proof, this.vk, this.vkIndex, this.vkPath);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new this(reader.readObject(KernelCircuitPublicInputs), reader.readObject(Proof), reader.readObject(VerificationKey), reader.readNumber(), reader.readArray(VK_TREE_HEIGHT, Fr));
    }
    /**
     * Creates an empty instance, valid enough to be accepted by circuits.
     * @returns The empty instance.
     */
    static empty() {
        return new PreviousKernelData(KernelCircuitPublicInputs.empty(), makeEmptyProof(), VerificationKey.makeFake(), 0, makeTuple(VK_TREE_HEIGHT, Fr.zero));
    }
}
/**
 * Dummy data used in the first kernel in the chain of kernels.
 */
export class DummyPreviousKernelData {
    constructor(data) {
        this.data = data;
    }
    /**
     * Gets the dummy data.
     * @param wasm - The circuits wasm instance.
     * @returns The dummy previous kernel data.
     */
    static getDummyPreviousKernelData(wasm) {
        if (!DummyPreviousKernelData.instance) {
            const data = privateKernelDummyPreviousKernel(wasm);
            DummyPreviousKernelData.instance = new DummyPreviousKernelData(data);
        }
        return DummyPreviousKernelData.instance.getData();
    }
    /**
     * Gets the the dummy data.
     * @returns The dummy previous kernel data.
     */
    getData() {
        return this.data;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlvdXNfa2VybmVsX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHJldmlvdXNfa2VybmVsX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBUyxNQUFNLDZCQUE2QixDQUFDO0FBRWxFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9FLE9BQU8sRUFBZ0IsY0FBYyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakMsT0FBTyxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRS9EOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QjtJQUNFOztPQUVHO0lBQ0ksWUFBdUM7SUFDOUM7O09BRUc7SUFDSSxLQUFZO0lBQ25COztPQUVHO0lBQ0ksRUFBbUI7SUFDMUI7O09BRUc7SUFDSSxPQUFlO0lBQ3RCOztPQUVHO0lBQ0ksTUFBd0M7UUFoQnhDLGlCQUFZLEdBQVosWUFBWSxDQUEyQjtRQUl2QyxVQUFLLEdBQUwsS0FBSyxDQUFPO1FBSVosT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFJbkIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUlmLFdBQU0sR0FBTixNQUFNLENBQWtDO0lBQzlDLENBQUM7SUFFSjs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksSUFBSSxDQUNiLE1BQU0sQ0FBQyxVQUFVLENBQUMseUJBQXlCLENBQUMsRUFDNUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFDeEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFDbEMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUNuQixNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FDckMsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsS0FBSztRQUNWLE9BQU8sSUFBSSxrQkFBa0IsQ0FDM0IseUJBQXlCLENBQUMsS0FBSyxFQUFFLEVBQ2pDLGNBQWMsRUFBRSxFQUNoQixlQUFlLENBQUMsUUFBUSxFQUFFLEVBQzFCLENBQUMsRUFDRCxTQUFTLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDbkMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF1QjtJQUdsQyxZQUE0QixJQUF3QjtRQUF4QixTQUFJLEdBQUosSUFBSSxDQUFvQjtJQUFHLENBQUM7SUFFeEQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxJQUFrQjtRQUN6RCxJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxHQUFHLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELHVCQUF1QixDQUFDLFFBQVEsR0FBRyxJQUFJLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsT0FBTyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztDQUNGIn0=