import { AztecAddress } from '@aztec/foundation/aztec-address';
import { isArrayEmpty } from '@aztec/foundation/collection';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { MAX_NEW_COMMITMENTS_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, RETURN_VALUES_LENGTH, } from '../cbind/constants.gen.js';
import { makeTuple } from '../utils/jsUtils.js';
import { serializeToBuffer } from '../utils/serialize.js';
import { CallContext } from './call_context.js';
import { HistoricBlockData } from './index.js';
/**
 * Contract storage read operation on a specific contract.
 *
 * Note: Similar to `PublicDataRead` but it's from the POV of contract storage so we are not working with public data
 * tree leaf index but storage slot index.
 */
export class ContractStorageRead {
    constructor(
    /**
     * Storage slot we are reading from.
     */
    storageSlot, 
    /**
     * Value read from the storage slot.
     */
    currentValue, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter) {
        this.storageSlot = storageSlot;
        this.currentValue = currentValue;
        this.sideEffectCounter = sideEffectCounter;
    }
    static from(args) {
        return new ContractStorageRead(args.storageSlot, args.currentValue, args.sideEffectCounter);
    }
    toBuffer() {
        return serializeToBuffer(this.storageSlot, this.currentValue);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ContractStorageRead(reader.readFr(), reader.readFr());
    }
    static empty() {
        return new ContractStorageRead(Fr.ZERO, Fr.ZERO);
    }
    isEmpty() {
        return this.storageSlot.isZero() && this.currentValue.isZero();
    }
    toFriendlyJSON() {
        return `Slot=${this.storageSlot.toFriendlyJSON()}: ${this.currentValue.toFriendlyJSON()}`;
    }
}
/**
 * Contract storage update request for a slot on a specific contract.
 *
 * Note: Similar to `PublicDataUpdateRequest` but it's from the POV of contract storage so we are not working with
 * public data tree leaf index but storage slot index.
 */
export class ContractStorageUpdateRequest {
    constructor(
    /**
     * Storage slot we are updating.
     */
    storageSlot, 
    /**
     * Old value of the storage slot.
     */
    oldValue, 
    /**
     * New value of the storage slot.
     */
    newValue, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter) {
        this.storageSlot = storageSlot;
        this.oldValue = oldValue;
        this.newValue = newValue;
        this.sideEffectCounter = sideEffectCounter;
    }
    toBuffer() {
        return serializeToBuffer(this.storageSlot, this.oldValue, this.newValue);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ContractStorageUpdateRequest(reader.readFr(), reader.readFr(), reader.readFr());
    }
    /**
     * Create PublicCallRequest from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCallRequest object.
     */
    static from(fields) {
        return new ContractStorageUpdateRequest(...ContractStorageUpdateRequest.getFields(fields));
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [fields.storageSlot, fields.oldValue, fields.newValue, fields.sideEffectCounter];
    }
    static empty() {
        return new ContractStorageUpdateRequest(Fr.ZERO, Fr.ZERO, Fr.ZERO);
    }
    isEmpty() {
        return this.storageSlot.isZero() && this.oldValue.isZero() && this.newValue.isZero();
    }
    toFriendlyJSON() {
        return `Slot=${this.storageSlot.toFriendlyJSON()}: ${this.oldValue.toFriendlyJSON()} => ${this.newValue.toFriendlyJSON()}`;
    }
}
/**
 * Public inputs to a public circuit.
 */
export class PublicCircuitPublicInputs {
    constructor(
    /**
     * Current call context.
     */
    callContext, 
    /**
     * Pedersen hash of the arguments of the call.
     */
    argsHash, 
    /**
     * Return values of the call.
     */
    returnValues, 
    /**
     * Contract storage update requests executed during the call.
     */
    contractStorageUpdateRequests, 
    /**
     * Contract storage reads executed during the call.
     */
    contractStorageReads, 
    /**
     * Public call stack of the current kernel iteration.
     */
    publicCallStack, 
    /**
     * New commitments created within a public execution call
     */
    newCommitments, 
    /**
     * New nullifiers created within a public execution call
     */
    newNullifiers, 
    /**
     * New L2 to L1 messages generated during the call.
     */
    newL2ToL1Msgs, 
    /**
     * Hash of the unencrypted logs emitted in this function call.
     * Note: Represented as an array of 2 fields in order to fit in all of the 256 bits of sha256 hash.
     */
    unencryptedLogsHash, 
    /**
     * Length of the unencrypted log preimages emitted in this function call.
     */
    unencryptedLogPreimagesLength, 
    /**
     * Root of the commitment trees when the call started.
     */
    historicBlockData, 
    /**
     * Address of the prover.
     */
    proverAddress) {
        this.callContext = callContext;
        this.argsHash = argsHash;
        this.returnValues = returnValues;
        this.contractStorageUpdateRequests = contractStorageUpdateRequests;
        this.contractStorageReads = contractStorageReads;
        this.publicCallStack = publicCallStack;
        this.newCommitments = newCommitments;
        this.newNullifiers = newNullifiers;
        this.newL2ToL1Msgs = newL2ToL1Msgs;
        this.unencryptedLogsHash = unencryptedLogsHash;
        this.unencryptedLogPreimagesLength = unencryptedLogPreimagesLength;
        this.historicBlockData = historicBlockData;
        this.proverAddress = proverAddress;
    }
    /**
     * Create PublicCircuitPublicInputs from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCircuitPublicInputs object.
     */
    static from(fields) {
        return new PublicCircuitPublicInputs(...PublicCircuitPublicInputs.getFields(fields));
    }
    /**
     * Returns an empty instance.
     * @returns An empty instance.
     */
    static empty() {
        return new PublicCircuitPublicInputs(CallContext.empty(), Fr.ZERO, makeTuple(RETURN_VALUES_LENGTH, Fr.zero), makeTuple(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, ContractStorageUpdateRequest.empty), makeTuple(MAX_PUBLIC_DATA_READS_PER_CALL, ContractStorageRead.empty), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, Fr.zero), makeTuple(MAX_NEW_COMMITMENTS_PER_CALL, Fr.zero), makeTuple(MAX_NEW_NULLIFIERS_PER_CALL, Fr.zero), makeTuple(MAX_NEW_L2_TO_L1_MSGS_PER_CALL, Fr.zero), makeTuple(2, Fr.zero), Fr.ZERO, HistoricBlockData.empty(), AztecAddress.ZERO);
    }
    isEmpty() {
        const isFrArrayEmpty = (arr) => isArrayEmpty(arr, item => item.isZero());
        return (this.callContext.isEmpty() &&
            this.argsHash.isZero() &&
            isFrArrayEmpty(this.returnValues) &&
            isArrayEmpty(this.contractStorageUpdateRequests, item => item.isEmpty()) &&
            isArrayEmpty(this.contractStorageReads, item => item.isEmpty()) &&
            isFrArrayEmpty(this.publicCallStack) &&
            isFrArrayEmpty(this.newCommitments) &&
            isFrArrayEmpty(this.newNullifiers) &&
            isFrArrayEmpty(this.newL2ToL1Msgs) &&
            isFrArrayEmpty(this.unencryptedLogsHash) &&
            this.unencryptedLogPreimagesLength.isZero() &&
            this.historicBlockData.isEmpty() &&
            this.proverAddress.isZero());
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.callContext,
            fields.argsHash,
            fields.returnValues,
            fields.contractStorageUpdateRequests,
            fields.contractStorageReads,
            fields.publicCallStack,
            fields.newCommitments,
            fields.newNullifiers,
            fields.newL2ToL1Msgs,
            fields.unencryptedLogsHash,
            fields.unencryptedLogPreimagesLength,
            fields.historicBlockData,
            fields.proverAddress,
        ];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PublicCircuitPublicInputs.getFields(this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2NpcmN1aXRfcHVibGljX2lucHV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL3B1YmxpY19jaXJjdWl0X3B1YmxpY19pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBUyxNQUFNLDZCQUE2QixDQUFDO0FBRWxFLE9BQU8sRUFDTCw0QkFBNEIsRUFDNUIsOEJBQThCLEVBQzlCLDJCQUEyQixFQUMzQixxQ0FBcUMsRUFDckMsOEJBQThCLEVBQzlCLHdDQUF3QyxFQUN4QyxvQkFBb0IsR0FDckIsTUFBTSwyQkFBMkIsQ0FBQztBQUNuQyxPQUFPLEVBQVksU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUUvQzs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxtQkFBbUI7SUFDOUI7SUFDRTs7T0FFRztJQUNhLFdBQWU7SUFDL0I7O09BRUc7SUFDYSxZQUFnQjtJQUNoQzs7T0FFRztJQUNhLGlCQUEwQjtRQVIxQixnQkFBVyxHQUFYLFdBQVcsQ0FBSTtRQUlmLGlCQUFZLEdBQVosWUFBWSxDQUFJO1FBSWhCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBUztJQUN6QyxDQUFDO0lBRUosTUFBTSxDQUFDLElBQUksQ0FBQyxJQWFYO1FBQ0MsT0FBTyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxX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