import { MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, } from '../../cbind/constants.gen.js';
import { assertMemberLength } from '../../utils/jsUtils.js';
import { serializeToBuffer } from '../../utils/serialize.js';
/**
 * Inputs to the public kernel circuit.
 */
export class PublicKernelInputs {
    constructor(
    /**
     * Kernels are recursive and this is the data from the previous kernel.
     */
    previousKernel, 
    /**
     * Public calldata assembled from the execution result and proof.
     */
    publicCall) {
        this.previousKernel = previousKernel;
        this.publicCall = publicCall;
    }
    toBuffer() {
        return serializeToBuffer(this.previousKernel, this.publicCall);
    }
}
/**
 // eslint-disable-next-line tsdoc/syntax
 * TODO: POSSIBLY OBSOLETE --\> DELETE OR DOCUMENT.
 */
export class WitnessedPublicCallData {
    constructor(
    /**
     * TODO.
     */
    publicCall, 
    /**
     * TODO.
     */
    updateRequestsHashPaths, 
    /**
     * TODO.
     */
    readsHashPaths, 
    /**
     * TODO.
     */
    publicDataTreeRoot) {
        this.publicCall = publicCall;
        this.updateRequestsHashPaths = updateRequestsHashPaths;
        this.readsHashPaths = readsHashPaths;
        this.publicDataTreeRoot = publicDataTreeRoot;
        assertMemberLength(this, 'updateRequestsHashPaths', MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX);
        assertMemberLength(this, 'readsHashPaths', MAX_PUBLIC_DATA_READS_PER_TX);
    }
    toBuffer() {
        return serializeToBuffer(this.publicCall, this.updateRequestsHashPaths, this.readsHashPaths, this.publicDataTreeRoot);
    }
}
/**
 * Public calldata assembled from the kernel execution result and proof.
 */
export class PublicCallData {
    constructor(
    /**
     * Call stack item being processed by the current iteration of the kernel.
     */
    callStackItem, 
    /**
     * Children call stack items.
     */
    publicCallStackPreimages, 
    /**
     * Proof of the call stack item execution.
     */
    proof, 
    /**
     * Address of the corresponding portal contract.
     */
    portalContractAddress, 
    /**
     * Hash of the L2 contract bytecode.
     */
    bytecodeHash) {
        this.callStackItem = callStackItem;
        this.publicCallStackPreimages = publicCallStackPreimages;
        this.proof = proof;
        this.portalContractAddress = portalContractAddress;
        this.bytecodeHash = bytecodeHash;
        assertMemberLength(this, 'publicCallStackPreimages', MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL);
    }
    toBuffer() {
        return serializeToBuffer(this.callStackItem, this.publicCallStackPreimages, this.proof, this.portalContractAddress, this.bytecodeHash);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2tlcm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL2tlcm5lbC9wdWJsaWNfa2VybmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFDTCxxQ0FBcUMsRUFDckMsNEJBQTRCLEVBQzVCLHNDQUFzQyxHQUV2QyxNQUFNLDhCQUE4QixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBTTdEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QjtJQUNFOztPQUVHO0lBQ2EsY0FBa0M7SUFDbEQ7O09BRUc7SUFDYSxVQUEwQjtRQUoxQixtQkFBYyxHQUFkLGNBQWMsQ0FBb0I7UUFJbEMsZUFBVSxHQUFWLFVBQVUsQ0FBZ0I7SUFDekMsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FDRjtBQUVEOzs7R0FHRztBQUNILE1BQU0sT0FBTyx1QkFBdUI7SUFDbEM7SUFDRTs7T0FFRztJQUNhLFVBQTBCO0lBQzFDOztPQUVHO0lBQ2EsdUJBQTRFO0lBQzVGOztPQUVHO0lBQ2EsY0FBbUU7SUFDbkY7O09BRUc7SUFDYSxrQkFBc0I7UUFadEIsZUFBVSxHQUFWLFVBQVUsQ0FBZ0I7UUFJMUIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFxRDtRQUk1RSxtQkFBYyxHQUFkLGNBQWMsQ0FBcUQ7UUFJbkUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFJO1FBRXRDLGtCQUFrQixDQUFDLElBQUksRUFBRSx5QkFBeUIsRUFBRSxzQ0FBc0MsQ0FBQyxDQUFDO1FBQzVGLGtCQUFrQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FDdEIsSUFBSSxDQUFDLFVBQVUsRUFDZixJQUFJLENBQUMsdUJBQXVCLEVBQzVCLElBQUksQ0FBQyxjQUFjLEVBQ25CLElBQUksQ0FBQyxrQkFBa0IsQ0FDeEIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGNBQWM7SUFDekI7SUFDRTs7T0FFRztJQUNhLGFBQWtDO0lBQ2xEOztPQUVHO0lBQ2Esd0JBQWtHO0lBQ2xIOztPQUVHO0lBQ2EsS0FBWTtJQUM1Qjs7T0FFRztJQUNhLHFCQUF5QjtJQUN6Qzs7T0FFRztJQUNhLFlBQWdCO1FBaEJoQixrQkFBYSxHQUFiLGFBQWEsQ0FBcUI7UUFJbEMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwRTtRQUlsRyxVQUFLLEdBQUwsS0FBSyxDQUFPO1FBSVosMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFJO1FBSXpCLGlCQUFZLEdBQVosWUFBWSxDQUFJO1FBRWhDLGtCQUFrQixDQUFDLElBQUksRUFBRSwwQkFBMEIsRUFBRSxxQ0FBcUMsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FDdEIsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLHdCQUF3QixFQUM3QixJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxxQkFBcUIsRUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FDbEIsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9