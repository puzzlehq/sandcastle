import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../../utils/serialize.js';
import { GlobalVariables } from '../global_variables.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
/**
 * Class containing the data of a preimage of a single leaf in the nullifier tree.
 * Note: It's called preimage because this data gets hashed before being inserted as a node into the `IndexedTree`.
 */
export class NullifierLeafPreimage {
    constructor(
    /**
     * Leaf value inside the indexed tree's linked list.
     */
    leafValue, 
    /**
     * Next value inside the indexed tree's linked list.
     */
    nextValue, 
    /**
     * Index of the next leaf in the indexed tree's linked list.
     */
    nextIndex) {
        this.leafValue = leafValue;
        this.nextValue = nextValue;
        this.nextIndex = nextIndex;
    }
    toBuffer() {
        return serializeToBuffer(this.leafValue, this.nextValue, this.nextIndex);
    }
    static empty() {
        return new NullifierLeafPreimage(Fr.ZERO, Fr.ZERO, 0);
    }
}
/**
 * Data which is forwarded through the base rollup circuits unchanged.
 */
export class ConstantRollupData {
    constructor(
    /**
     * Snapshot of the historic blocks roots tree at the start of the rollup.
     */
    startHistoricBlocksTreeRootsSnapshot, 
    /**
     * Root of the private kernel verification key tree.
     */
    privateKernelVkTreeRoot, 
    /**
     * Root of the public kernel circuit verification key tree.
     */
    publicKernelVkTreeRoot, 
    /**
     * Hash of the base rollup circuit verification key.
     */
    baseRollupVkHash, 
    /**
     * Hash of the merge rollup circuit verification key.
     */
    mergeRollupVkHash, 
    /**
     * Global variables for the block
     */
    globalVariables) {
        this.startHistoricBlocksTreeRootsSnapshot = startHistoricBlocksTreeRootsSnapshot;
        this.privateKernelVkTreeRoot = privateKernelVkTreeRoot;
        this.publicKernelVkTreeRoot = publicKernelVkTreeRoot;
        this.baseRollupVkHash = baseRollupVkHash;
        this.mergeRollupVkHash = mergeRollupVkHash;
        this.globalVariables = globalVariables;
    }
    static from(fields) {
        return new ConstantRollupData(...ConstantRollupData.getFields(fields));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ConstantRollupData(reader.readObject(AppendOnlyTreeSnapshot), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readObject(GlobalVariables));
    }
    static getFields(fields) {
        return [
            fields.startHistoricBlocksTreeRootsSnapshot,
            fields.privateKernelVkTreeRoot,
            fields.publicKernelVkTreeRoot,
            fields.baseRollupVkHash,
            fields.mergeRollupVkHash,
            fields.globalVariables,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...ConstantRollupData.getFields(this));
    }
}
/**
 * Inputs to the base rollup circuit.
 */
export class BaseRollupInputs {
    constructor(
    /**
     * Data of the 2 kernels that preceded this base rollup circuit.
     */
    kernelData, 
    /**
     * Snapshot of the private data tree at the start of the base rollup circuit.
     */
    startPrivateDataTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the start of the base rollup circuit.
     */
    startNullifierTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the start of the base rollup circuit.
     */
    startContractTreeSnapshot, 
    /**
     * Root of the public data tree at the start of the base rollup circuit.
     */
    startPublicDataTreeRoot, 
    /**
     * Snapshot of the historic blocks tree at the start of the base rollup circuit.
     */
    startHistoricBlocksTreeSnapshot, 
    /**
     * The nullifiers which need to be updated to perform the batch insertion of the new nullifiers.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    lowNullifierLeafPreimages, 
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    lowNullifierMembershipWitness, 
    /**
     * Sibling path "pointing to" where the new commitments subtree should be inserted into the private data tree.
     */
    newCommitmentsSubtreeSiblingPath, 
    /**
     * Sibling path "pointing to" where the new nullifiers subtree should be inserted into the nullifier tree.
     */
    newNullifiersSubtreeSiblingPath, 
    /**
     * Sibling path "pointing to" where the new contracts subtree should be inserted into the contract tree.
     */
    newContractsSubtreeSiblingPath, 
    /**
     * Sibling paths of leaves which are to be affected by the public data update requests.
     * Each item in the array is the sibling path that corresponds to an update request.
     */
    newPublicDataUpdateRequestsSiblingPaths, 
    /**
     * Sibling paths of leaves which are to be read by the public data reads.
     * Each item in the array is the sibling path that corresponds to a read request.
     */
    newPublicDataReadsSiblingPaths, 
    /**
     * Membership witnesses of historic blocks referred by each of the 2 kernels.
     */
    historicBlocksTreeRootMembershipWitnesses, 
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants) {
        this.kernelData = kernelData;
        this.startPrivateDataTreeSnapshot = startPrivateDataTreeSnapshot;
        this.startNullifierTreeSnapshot = startNullifierTreeSnapshot;
        this.startContractTreeSnapshot = startContractTreeSnapshot;
        this.startPublicDataTreeRoot = startPublicDataTreeRoot;
        this.startHistoricBlocksTreeSnapshot = startHistoricBlocksTreeSnapshot;
        this.lowNullifierLeafPreimages = lowNullifierLeafPreimages;
        this.lowNullifierMembershipWitness = lowNullifierMembershipWitness;
        this.newCommitmentsSubtreeSiblingPath = newCommitmentsSubtreeSiblingPath;
        this.newNullifiersSubtreeSiblingPath = newNullifiersSubtreeSiblingPath;
        this.newContractsSubtreeSiblingPath = newContractsSubtreeSiblingPath;
        this.newPublicDataUpdateRequestsSiblingPaths = newPublicDataUpdateRequestsSiblingPaths;
        this.newPublicDataReadsSiblingPaths = newPublicDataReadsSiblingPaths;
        this.historicBlocksTreeRootMembershipWitnesses = historicBlocksTreeRootMembershipWitnesses;
        this.constants = constants;
    }
    static from(fields) {
        return new BaseRollupInputs(...BaseRollupInputs.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.kernelData,
            fields.startPrivateDataTreeSnapshot,
            fields.startNullifierTreeSnapshot,
            fields.startContractTreeSnapshot,
            fields.startPublicDataTreeRoot,
            fields.startHistoricBlocksTreeSnapshot,
            fields.lowNullifierLeafPreimages,
            fields.lowNullifierMembershipWitness,
            fields.newCommitmentsSubtreeSiblingPath,
            fields.newNullifiersSubtreeSiblingPath,
            fields.newContractsSubtreeSiblingPath,
            fields.newPublicDataUpdateRequestsSiblingPaths,
            fields.newPublicDataReadsSiblingPaths,
            fields.historicBlocksTreeRootMembershipWitnesses,
            fields.constants,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...BaseRollupInputs.getFields(this));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvYmFzZV9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQVMsTUFBTSw2QkFBNkIsQ0FBQztBQWVsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFJekQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFeEU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUNoQztJQUNFOztPQUVHO0lBQ0ksU0FBYTtJQUNwQjs7T0FFRztJQUNJLFNBQWE7SUFDcEI7O09BRUc7SUFDSSxTQUFpQjtRQVJqQixjQUFTLEdBQVQsU0FBUyxDQUFJO1FBSWIsY0FBUyxHQUFULFNBQVMsQ0FBSTtRQUliLGNBQVMsR0FBVCxTQUFTLENBQVE7SUFDdkIsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsT0FBTyxJQUFJLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFDN0I7SUFDRTs7T0FFRztJQUNJLG9DQUE0RDtJQUVuRTs7T0FFRztJQUNJLHVCQUEyQjtJQUNsQzs7T0FFRztJQUNJLHNCQUEwQjtJQUNqQzs7T0FFRztJQUNJLGdC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