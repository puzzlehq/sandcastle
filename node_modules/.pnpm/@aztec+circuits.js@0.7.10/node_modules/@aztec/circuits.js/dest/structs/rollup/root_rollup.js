import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../../utils/serialize.js';
import { AggregationObject } from '../aggregation_object.js';
import { GlobalVariables } from '../global_variables.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
/**
 * Represents inputs of the root rollup circuit.
 */
export class RootRollupInputs {
    constructor(
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 merge or base rollup circuits.
     */
    previousRollupData, 
    /**
     * New L1 to L2 messages.
     */
    newL1ToL2Messages, 
    /**
     * Sibling path of the new L1 to L2 message tree root.
     */
    newL1ToL2MessagesTreeRootSiblingPath, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot, 
    /**
     * Snapshot of the historic block roots tree at the start of the rollup.
     */
    startHistoricBlocksTreeSnapshot, 
    /**
     * Sibling path of the new historic block roots tree root.
     */
    newHistoricBlocksTreeSiblingPath) {
        this.previousRollupData = previousRollupData;
        this.newL1ToL2Messages = newL1ToL2Messages;
        this.newL1ToL2MessagesTreeRootSiblingPath = newL1ToL2MessagesTreeRootSiblingPath;
        this.startL1ToL2MessagesTreeSnapshot = startL1ToL2MessagesTreeSnapshot;
        this.startHistoricBlocksTreeSnapshot = startHistoricBlocksTreeSnapshot;
        this.newHistoricBlocksTreeSiblingPath = newHistoricBlocksTreeSiblingPath;
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupInputs(...RootRollupInputs.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.previousRollupData,
            fields.newL1ToL2Messages,
            fields.newL1ToL2MessagesTreeRootSiblingPath,
            fields.startL1ToL2MessagesTreeSnapshot,
            fields.startHistoricBlocksTreeSnapshot,
            fields.newHistoricBlocksTreeSiblingPath,
        ];
    }
}
/**
 * Represents public inputs of the root rollup circuit.
 *
 * NOTE: in practice, we'll hash all of this up into a single public input, for cheap on-chain verification.
 */
export class RootRollupPublicInputs {
    constructor(
    /**
     * Native aggregation state at the end of the rollup.
     */
    endAggregationObject, 
    /**
     * Global variables of the L2 block.
     */
    globalVariables, 
    /**
     * Snapshot of the private data tree at the start of the rollup.
     */
    startPrivateDataTreeSnapshot, 
    /**
     * Snapshot of the private data tree at the end of the rollup.
     */
    endPrivateDataTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the start of the rollup.
     */
    startNullifierTreeSnapshot, 
    /**
     * Snapshot of the nullifier tree at the end of the rollup.
     */
    endNullifierTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the start of the rollup.
     */
    startContractTreeSnapshot, 
    /**
     * Snapshot of the contract tree at the end of the rollup.
     */
    endContractTreeSnapshot, 
    /**
     * Root of the public data tree at the start of the rollup.
     */
    startPublicDataTreeRoot, 
    /**
     * Root of the public data tree at the end of the rollup.
     */
    endPublicDataTreeRoot, 
    /**
     * Snapshot of the historic private data tree roots tree at the start of the rollup.
     */
    startTreeOfHistoricPrivateDataTreeRootsSnapshot, 
    /**
     * Snapshot of the historic private data tree roots tree at the end of the rollup.
     */
    endTreeOfHistoricPrivateDataTreeRootsSnapshot, 
    /**
     * Snapshot of the historic contract tree roots tree at the start of the rollup.
     */
    startTreeOfHistoricContractTreeRootsSnapshot, 
    /**
     * Snapshot of the historic contract tree roots tree at the end of the rollup.
     */
    endTreeOfHistoricContractTreeRootsSnapshot, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessagesTreeSnapshot, 
    /**
     * Snapshot of the L1 to L2 message tree at the end of the rollup.
     */
    endL1ToL2MessagesTreeSnapshot, 
    /**
     * Snapshot of the historic L1 to L2 message tree roots tree at the start of the rollup.
     */
    startTreeOfHistoricL1ToL2MessagesTreeRootsSnapshot, 
    /**
     * Snapshot of the historic L1 to L2 message tree roots tree at the end of the rollup.
     */
    endTreeOfHistoricL1ToL2MessagesTreeRootsSnapshot, 
    /**
     * Snapshot of the historic blocks tree roots tree at the start of the rollup.
     */
    startHistoricBlocksTreeSnapshot, 
    /**
     * Snapshot of the historic blocks tree roots tree at the end of the rollup.
     */
    endHistoricBlocksTreeSnapshot, 
    /**
     * Hash of the calldata.
     */
    calldataHash, 
    /**
     * Hash of the L1 to L2 messages.
     */
    l1ToL2MessagesHash) {
        this.endAggregationObject = endAggregationObject;
        this.globalVariables = globalVariables;
        this.startPrivateDataTreeSnapshot = startPrivateDataTreeSnapshot;
        this.endPrivateDataTreeSnapshot = endPrivateDataTreeSnapshot;
        this.startNullifierTreeSnapshot = startNullifierTreeSnapshot;
        this.endNullifierTreeSnapshot = endNullifierTreeSnapshot;
        this.startContractTreeSnapshot = startContractTreeSnapshot;
        this.endContractTreeSnapshot = endContractTreeSnapshot;
        this.startPublicDataTreeRoot = startPublicDataTreeRoot;
        this.endPublicDataTreeRoot = endPublicDataTreeRoot;
        this.startTreeOfHistoricPrivateDataTreeRootsSnapshot = startTreeOfHistoricPrivateDataTreeRootsSnapshot;
        this.endTreeOfHistoricPrivateDataTreeRootsSnapshot = endTreeOfHistoricPrivateDataTreeRootsSnapshot;
        this.startTreeOfHistoricContractTreeRootsSnapshot = startTreeOfHistoricContractTreeRootsSnapshot;
        this.endTreeOfHistoricContractTreeRootsSnapshot = endTreeOfHistoricContractTreeRootsSnapshot;
        this.startL1ToL2MessagesTreeSnapshot = startL1ToL2MessagesTreeSnapshot;
        this.endL1ToL2MessagesTreeSnapshot = endL1ToL2MessagesTreeSnapshot;
        this.startTreeOfHistoricL1ToL2MessagesTreeRootsSnapshot = startTreeOfHistoricL1ToL2MessagesTreeRootsSnapshot;
        this.endTreeOfHistoricL1ToL2MessagesTreeRootsSnapshot = endTreeOfHistoricL1ToL2MessagesTreeRootsSnapshot;
        this.startHistoricBlocksTreeSnapshot = startHistoricBlocksTreeSnapshot;
        this.endHistoricBlocksTreeSnapshot = endHistoricBlocksTreeSnapshot;
        this.calldataHash = calldataHash;
        this.l1ToL2MessagesHash = l1ToL2MessagesHash;
    }
    static getFields(fields) {
        return [
            fields.endAggregationObject,
            fields.globalVariables,
            fields.startPrivateDataTreeSnapshot,
            fields.endPrivateDataTreeSnapshot,
            fields.startNullifierTreeSnapshot,
            fields.endNullifierTreeSnapshot,
            fields.startContractTreeSnapshot,
            fields.endContractTreeSnapshot,
            fields.startPublicDataTreeRoot,
            fields.endPublicDataTreeRoot,
            fields.startTreeOfHistoricPrivateDataTreeRootsSnapshot,
            fields.endTreeOfHistoricPrivateDataTreeRootsSnapshot,
            fields.startTreeOfHistoricContractTreeRootsSnapshot,
            fields.endTreeOfHistoricContractTreeRootsSnapshot,
            fields.startL1ToL2MessagesTreeSnapshot,
            fields.endL1ToL2MessagesTreeSnapshot,
            fields.startTreeOfHistoricL1ToL2MessagesTreeRootsSnapshot,
            fields.endTreeOfHistoricL1ToL2MessagesTreeRootsSnapshot,
            fields.startHistoricBlocksTreeSnapshot,
            fields.endHistoricBlocksTreeSnapshot,
            fields.calldataHash,
            fields.l1ToL2MessagesHash,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupPublicInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupPublicInputs(...RootRollupPublicInputs.getFields(fields));
    }
    /**
     * Returns the sha256 hash of the calldata.
     * @returns The sha256 hash of the calldata.
     */
    sha256CalldataHash() {
        const high = this.calldataHash[0].toBuffer();
        const low = this.calldataHash[1].toBuffer();
        const hash = Buffer.alloc(32);
        for (let i = 0; i < 16; i++) {
            hash[i] = high[i + 16];
            hash[i + 16] = low[i + 16];
        }
        return hash;
    }
    /**
     * Deserializes a buffer into a `RootRollupPublicInputs` object.
     * @param buffer - The buffer to deserialize.
     * @returns The deserialized `RootRollupPublicInputs` object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new RootRollupPublicInputs(reader.readObject(AggregationObject), reader.readObject(GlobalVariables), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readFr(), reader.readFr(), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), [reader.readFr(), reader.readFr()], [reader.readFr(), reader.readFr()]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdF9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvcm9vdF9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBUyxNQUFNLDZCQUE2QixDQUFDO0FBUWxFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUd4RTs7R0FFRztBQUNILE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0I7SUFDRTs7OztPQUlHO0lBQ0ksa0JBQTREO0lBQ25FOztPQUVHO0lBQ0ksaUJBQXdFO0lBQy9FOztPQUVHO0lBQ0ksb0NBQWdHO0lBQ3ZHOztPQUVHO0lBQ0ksK0JBQXVEO0lBQzlEOztPQUVHO0lBQ0ksK0JBQXVEO0lBQzlEOztPQUVHO0lBQ0ksZ0NBQStFO1FBcEIvRSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQTBDO1FBSTVELHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBdUQ7UUFJeEUseUNBQW9DLEdBQXBDLG9DQUFvQyxDQUE0RDtRQUloRyxvQ0FBK0IsR0FBL0IsK0JBQStCLENBQXdCO1FBSXZELG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBd0I7UUFJdkQscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUErQztJQUNyRixDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFrQztRQUM1QyxPQUFPLElBQUksZ0JBQWdCLENBQUMsR0FBRyxnQkFB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Q0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDNUI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUNwRCxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxzQkFBc0IsQ0FDL0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUNwQyxNQUFNLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQ2YsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQ2xDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUNuQyxDQUFDO0lBQ0osQ0FBQztDQUNGIn0=