import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { serializeToBuffer } from '../../utils/serialize.js';
/**
 * Information about the tree roots used for both public and private kernels.
 */
export class HistoricBlockData {
    constructor(
    /**
     * Root of the private data tree at the time of when this information was assembled.
     */
    privateDataTreeRoot, 
    /**
     * Root of the nullifier tree at the time of when this information was assembled.
     */
    nullifierTreeRoot, 
    /**
     * Root of the contract tree at the time of when this information was assembled.
     */
    contractTreeRoot, 
    /**
     * Root of the l1 to l2 messages tree at the time of when this information was assembled.
     */
    l1ToL2MessagesTreeRoot, 
    /**
     * Root of the historic blocks tree at the time of when this information was assembled.
     */
    blocksTreeRoot, 
    /**
     * Root of the private kernel vk tree at the time of when this information was assembled.
     */
    privateKernelVkTreeRoot, // future enhancement
    /**
     * Current public state tree hash.
     */
    publicDataTreeRoot, 
    /**
     * Previous globals hash, this value is used to recalculate the block hash.
     */
    globalVariablesHash) {
        this.privateDataTreeRoot = privateDataTreeRoot;
        this.nullifierTreeRoot = nullifierTreeRoot;
        this.contractTreeRoot = contractTreeRoot;
        this.l1ToL2MessagesTreeRoot = l1ToL2MessagesTreeRoot;
        this.blocksTreeRoot = blocksTreeRoot;
        this.privateKernelVkTreeRoot = privateKernelVkTreeRoot;
        this.publicDataTreeRoot = publicDataTreeRoot;
        this.globalVariablesHash = globalVariablesHash;
    }
    static from(fields) {
        return new HistoricBlockData(...HistoricBlockData.getFields(fields));
    }
    static random() {
        return new HistoricBlockData(Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random(), Fr.random());
    }
    static getFields(fields) {
        return [
            fields.privateDataTreeRoot,
            fields.nullifierTreeRoot,
            fields.contractTreeRoot,
            fields.l1ToL2MessagesTreeRoot,
            fields.blocksTreeRoot,
            fields.privateKernelVkTreeRoot,
            fields.publicDataTreeRoot,
            fields.globalVariablesHash,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...HistoricBlockData.getFields(this));
    }
    toString() {
        return this.toBuffer().toString();
    }
    /**
     * Return the historic block data as an array of items in the order they are serialised in noir.
     * @returns Array of items in the order they are stored in the contract
     */
    toArray() {
        return [
            this.privateDataTreeRoot,
            this.nullifierTreeRoot,
            this.contractTreeRoot,
            this.l1ToL2MessagesTreeRoot,
            this.blocksTreeRoot,
            // it is not present in noir,
            this.publicDataTreeRoot,
            this.globalVariablesHash,
        ];
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new HistoricBlockData(reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr(), reader.readFr());
    }
    isEmpty() {
        return (this.privateDataTreeRoot.isZero() &&
            this.nullifierTreeRoot.isZero() &&
            this.contractTreeRoot.isZero() &&
            this.l1ToL2MessagesTreeRoot.isZero() &&
            this.blocksTreeRoot.isZero() &&
            this.privateKernelVkTreeRoot.isZero() &&
            this.publicDataTreeRoot.isZero() &&
            this.globalVariablesHash.isZero());
    }
    static empty() {
        return new HistoricBlockData(Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO, Fr.ZERO);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yaWNfYmxvY2tfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL2tlcm5lbC9oaXN0b3JpY19ibG9ja19kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHM0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFN0Q7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCO0lBQ0U7O09BRUc7SUFDSSxtQkFBdUI7SUFDOUI7O09BRUc7SUFDSSxpQkFBcUI7SUFDNUI7O09BRUc7SUFDSSxnQkFBb0I7SUFDM0I7O09BRUc7SUFDSSxzQkFBMEI7SUFDakM7O09BRUc7SUFDSSxjQUFrQjtJQUN6Qjs7T0FFRztJQUNJLHVCQUEyQixFQUFFLHFCQUFxQjtJQUN6RDs7T0FFRztJQUNJLGtCQUFzQjtJQUM3Qjs7T0FFRztJQUNJLG1CQUF1QjtRQTVCdkIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFJO1FBSXZCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBSTtRQUlyQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQUk7UUFJcEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFJO1FBSTFCLG1CQUFjLEdBQWQsY0FBYyxDQUFJO1FBSWxCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBSTtRQUkzQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQUk7UUFJdEIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFJO0lBQzdCLENBQUM7SUFFSixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQW1DO1FBQzdDLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxN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