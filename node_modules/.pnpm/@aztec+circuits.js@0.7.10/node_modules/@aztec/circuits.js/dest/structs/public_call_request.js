import { BufferReader } from '@aztec/foundation/serialize';
import { computeVarArgsHash } from '../abis/abis.js';
import { CircuitsWasm } from '../index.js';
import { serializeToBuffer } from '../utils/serialize.js';
import { AztecAddress, CallContext, Fr, FunctionData, PublicCallStackItem, PublicCircuitPublicInputs, Vector, } from './index.js';
/**
 * Represents a request to call a public function from a private function. Serialization is
 * equivalent to a public call stack item, but without the result fields.
 */
export class PublicCallRequest {
    constructor(
    /**
     *Address of the contract on which the function is invoked.
     */
    contractAddress, 
    /**
     * Data identifying the function being called.
     */
    functionData, 
    /**
     * Context of the public call.
     */
    callContext, 
    /**
     * Function arguments.
     */
    args, 
    /**
     * Optional side effect counter tracking position of this event in tx execution.
     */
    sideEffectCounter) {
        this.contractAddress = contractAddress;
        this.functionData = functionData;
        this.callContext = callContext;
        this.args = args;
        this.sideEffectCounter = sideEffectCounter;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.contractAddress, this.functionData, this.callContext, new Vector(this.args));
    }
    /**
     * Deserialise this from a buffer.
     * @param buffer - The bufferable type from which to deserialise.
     * @returns The deserialised instance of PublicCallRequest.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicCallRequest(new AztecAddress(reader.readBytes(32)), FunctionData.fromBuffer(reader), CallContext.fromBuffer(reader), reader.readVector(Fr));
    }
    /**
     * Create PublicCallRequest from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCallRequest object.
     */
    static from(fields) {
        return new PublicCallRequest(...PublicCallRequest.getFields(fields));
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.contractAddress,
            fields.functionData,
            fields.callContext,
            fields.args,
            fields.sideEffectCounter,
        ];
    }
    /**
     * Creates a new PublicCallStackItem by populating with zeroes all fields related to result in the public circuit output.
     * @returns A PublicCallStackItem instance with the same contract address, function data, call context, and args.
     */
    async toPublicCallStackItem() {
        const publicInputs = PublicCircuitPublicInputs.empty();
        publicInputs.callContext = this.callContext;
        publicInputs.argsHash = await this.getArgsHash();
        return new PublicCallStackItem(this.contractAddress, this.functionData, publicInputs, true);
    }
    /**
     * Returns the hash of the arguments for this request.
     * @returns Hash of the arguments for this request.
     */
    async getArgsHash() {
        return computeVarArgsHash(await CircuitsWasm.get(), this.args);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2NhbGxfcmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL3B1YmxpY19jYWxsX3JlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQVksTUFBTSxhQUFhLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUNMLFlBQVksRUFDWixXQUFXLEVBQ1gsRUFBRSxFQUNGLFlBQVksRUFDWixtQkFBbUIsRUFDbkIseUJBQXlCLEVBQ3pCLE1BQU0sR0FDUCxNQUFNLFlBQVksQ0FBQztBQUVwQjs7O0dBR0c7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCO0lBQ0U7O09BRUc7SUFDSSxlQUE2QjtJQUNwQzs7T0FFRztJQUNJLFlBQTBCO0lBQ2pDOztPQUVHO0lBQ0ksV0FBd0I7SUFDL0I7O09BRUc7SUFDSSxJQUFVO0lBQ2pCOztPQUVHO0lBQ0ksaUJBQTBCO1FBaEIxQixvQkFBZSxHQUFmLGVBQWUsQ0FBYztRQUk3QixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUkxQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUl4QixTQUFJLEdBQUosSUFBSSxDQUFNO1FBSVYsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFTO0lBQ2hDLENBQUM7SUFFSjs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM3RyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksaUJBQWlCLENBQzFCLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDdEMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFDL0IsV0FBVyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFDOUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FDdEIsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFtQztRQUM3QyxPQUFPLElBQUksaUJBQWlCLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBbUM7UUFDbEQsT0FBTztZQUNMLE1BQU0sQ0FBQyxlQUFlO1lBQ3RCLE1BQU0sQ0FBQyxZQUFZO1lBQ25CLE1BQU0sQ0FBQyxXQUFXO1lBQ2xCLE1BQU0sQ0FBQyxJQUFJO1lBQ1gsTUFBTSxDQUFDLGlCQUFpQjtTQUNoQixDQUFDO0lBQ2IsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxxQkFBcUI7UUFDekIsTUFBTSxZQUFZLEdBQUcseUJBQXlCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkQsWUFBWSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzVDLFlBQVksQ0FBQyxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakQsT0FBTyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxXQUFXO1FBQ2YsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLFlBQVksQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQztDQUNGIn0=