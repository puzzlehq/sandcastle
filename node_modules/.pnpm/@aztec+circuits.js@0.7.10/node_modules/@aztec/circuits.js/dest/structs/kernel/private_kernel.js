import { serializeToBuffer } from '../../utils/serialize.js';
/**
 * Private call data.
 * @see circuits/cpp/src/aztec3/circuits/abis/call_stack_item.hpp
 */
export class PrivateCallData {
    constructor(
    /**
     * The call stack item currently being processed.
     */
    callStackItem, 
    /**
     * Other private call stack items to be processed.
     */
    privateCallStackPreimages, 
    /**
     * The proof of the execution of this private call.
     */
    proof, 
    /**
     * The verification key for the function being invoked.
     */
    vk, 
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness, 
    /**
     * The membership witness for the contract leaf corresponding to the contract on which the function is being
     * invoked.
     */
    contractLeafMembershipWitness, 
    /**
     * The membership witnesses for read requests created by the function being invoked.
     */
    readRequestMembershipWitnesses, 
    /**
     * The address of the portal contract corresponding to the contract on which the function is being invoked.
     */
    portalContractAddress, 
    /**
     * The hash of the ACIR of the function being invoked.
     */
    acirHash) {
        this.callStackItem = callStackItem;
        this.privateCallStackPreimages = privateCallStackPreimages;
        this.proof = proof;
        this.vk = vk;
        this.functionLeafMembershipWitness = functionLeafMembershipWitness;
        this.contractLeafMembershipWitness = contractLeafMembershipWitness;
        this.readRequestMembershipWitnesses = readRequestMembershipWitnesses;
        this.portalContractAddress = portalContractAddress;
        this.acirHash = acirHash;
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            // NOTE: Must have same order as CPP.
            fields.callStackItem,
            fields.privateCallStackPreimages,
            fields.proof,
            fields.vk,
            fields.functionLeafMembershipWitness,
            fields.contractLeafMembershipWitness,
            fields.readRequestMembershipWitnesses,
            fields.portalContractAddress,
            fields.acirHash,
        ];
    }
    static from(fields) {
        return new PrivateCallData(...PrivateCallData.getFields(fields));
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PrivateCallData.getFields(this));
    }
}
/**
 * Input to the private kernel circuit - initial call.
 */
export class PrivateKernelInputsInit {
    constructor(
    /**
     * The transaction request which led to the creation of these inputs.
     */
    txRequest, 
    /**
     * Private calldata corresponding to this iteration of the kernel.
     */
    privateCall) {
        this.txRequest = txRequest;
        this.privateCall = privateCall;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.txRequest, this.privateCall);
    }
}
/**
 * Input to the private kernel circuit - Inner call.
 */
export class PrivateKernelInputsInner {
    constructor(
    /**
     * The previous kernel data (dummy if this is the first kernel).
     */
    previousKernel, 
    /**
     * Private calldata corresponding to this iteration of the kernel.
     */
    privateCall) {
        this.previousKernel = previousKernel;
        this.privateCall = privateCall;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.previousKernel, this.privateCall);
    }
}
/**
 * Input to the private kernel circuit - Final ordering call.
 */
export class PrivateKernelInputsOrdering {
    constructor(
    /**
     * The previous kernel data
     */
    previousKernel, 
    /**
     * Contains hints for the transient read requests to localize corresponding commitments.
     */
    readCommitmentHints, 
    /**
     * Contains hints for the transient nullifiers to localize corresponding commitments.
     */
    nullifierCommitmentHints) {
        this.previousKernel = previousKernel;
        this.readCommitmentHints = readCommitmentHints;
        this.nullifierCommitmentHints = nullifierCommitmentHints;
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.previousKernel, this.readCommitmentHints);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9rZXJuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHJpdmF0ZV9rZXJuZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFVN0Q7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFDMUI7SUFDRTs7T0FFRztJQUNJLGFBQW1DO0lBQzFDOztPQUVHO0lBQ0kseUJBQXFHO0lBQzVHOztPQUVHO0lBQ0ksS0FBWTtJQUNuQjs7T0FFRztJQUNJLEVBQW1CO0lBQzFCOztPQUVHO0lBQ0ksNkJBQTZFO0lBQ3BGOzs7T0FHRztJQUNJLDZCQUE2RTtJQUNwRjs7T0FFRztJQUNJLDhCQUFzRztJQUM3Rzs7T0FFRztJQUNJLHFCQUF5QjtJQUNoQzs7T0FFRztJQUNJLFFBQVk7UUFqQ1osa0JBQWEsR0FBYixhQUFhLENBQXNCO1FBSW5DLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBNEU7UUFJckcsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUlaLE9BQUUsR0FBRixFQUFFLENBQWlCO1FBSW5CLGtDQUE2QixHQUE3Qiw2QkFBNkIsQ0FBZ0Q7UUFLN0Usa0NBQTZCLEdBQTdCLDZCQUE2QixDQUFnRDtRQUk3RSxtQ0FBOEIsR0FBOUIsOEJBQThCLENBQXdFO1FBSXRHLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBSTtRQUl6QixhQUFRLEdBQVIsUUFBUSxDQUFJO0lBQ2xCLENBQUM7SUFFSjs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFpQztRQUNoRCxPQUFPO1lBQ0wscUNBQXFDO1lBQ3JDLE1BQU0sQ0FBQyxhQUFhO1lBQ3BCLE1BQU0sQ0FBQyx5QkFBeUI7WUFDaEMsTUFBTSxDQUFDLEtBQUs7WUFDWixNQUFNLENBQUMsRUFBRTtZQUNULE1BQU0sQ0FBQyw2QkFBNkI7WUFDcEMsTUFBTSxDQUFDLDZCQUE2QjtZQUNwQyxNQUFNLENBQUMsOEJBQThCO1lBQ3JDLE1BQU0sQ0FBQyxxQkFBcUI7WUFDNUIsTUFBTSxDQUFDLFFBQVE7U0FDUCxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBaUM7UUFDM0MsT0FBTyxJQUFJLGVBQWUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDO0lBQ0U7O09BRUc7SUFDSSxTQUFvQjtJQUMzQjs7T0FFRztJQUNJLFdBQTRCO1FBSjVCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFJcEIsZ0JBQVcsR0FBWCxXQUFXLENBQWlCO0lBQ2xDLENBQUM7SUFFSjs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3RCxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyx3QkFBd0I7SUFDbkM7SUFDRTs7T0FFRztJQUNJLGNBQWtDO0lBQ3pDOztPQUVHO0lBQ0ksV0FBNEI7UUFKNUIsbUJBQWMsR0FBZCxjQUFjLENBQW9CO1FBSWxDLGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtJQUNsQyxDQUFDO0lBRUo7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEUsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMkJBQTJCO0lBQ3RDO0lBQ0U7O09BRUc7SUFDSSxjQUFrQztJQUN6Qzs7T0FFRztJQUNJLG1CQUErRDtJQUN0RTs7T0FFRztJQUNJLHdCQUFxRTtRQVJyRSxtQkFBYyxHQUFkLGNBQWMsQ0FBb0I7UUFJbEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUE0QztRQUkvRCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTZDO0lBQzNFLENBQUM7SUFFSjs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Q0FDRiJ9