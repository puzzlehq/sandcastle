import { Fr } from '@aztec/foundation/fields';
import { computeFunctionTreeData } from './function_tree_data.js';
const getFr = (index) => Fr.fromBuffer(Buffer.alloc(32, index));
const Tree = [
    // leaves
    getFr(8),
    getFr(9),
    getFr(10),
    getFr(11),
    getFr(12),
    getFr(13),
    getFr(14),
    getFr(15),
    // 1st hash level
    getFr(4),
    getFr(5),
    getFr(6),
    getFr(7),
    // 2nd hash level
    getFr(2),
    getFr(3),
    // root
    getFr(1),
];
const tests = [
    { index: 0, path: [getFr(9), getFr(5), getFr(3)] },
    { index: 1, path: [getFr(8), getFr(5), getFr(3)] },
    { index: 2, path: [getFr(11), getFr(4), getFr(3)] },
    { index: 3, path: [getFr(10), getFr(4), getFr(3)] },
    { index: 4, path: [getFr(13), getFr(7), getFr(2)] },
    { index: 5, path: [getFr(12), getFr(7), getFr(2)] },
    { index: 6, path: [getFr(15), getFr(6), getFr(2)] },
    { index: 7, path: [getFr(14), getFr(6), getFr(2)] },
];
describe('Compute Function Tree Sibling Path', () => {
    for (let i = 0; i < tests.length; i++) {
        it('should generate the correct sibling path', () => {
            const actual = computeFunctionTreeData(Tree, tests[i].index);
            const expected = {
                root: getFr(1),
                siblingPath: tests[i].path,
            };
            expect(actual).toEqual(expected);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25fdHJlZV9kYXRhLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3RfdHJlZS9mdW5jdGlvbl90cmVlX2RhdGEudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFOUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFbEUsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN4RSxNQUFNLElBQUksR0FBRztJQUNYLFNBQVM7SUFDVCxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ1IsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNSLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDVCxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ1QsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUNULEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDVCxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ1QsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUNULGlCQUFpQjtJQUNqQixLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ1IsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNSLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDUixLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ1IsaUJBQWlCO0lBQ2pCLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDUixLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ1IsT0FBTztJQUNQLEtBQUssQ0FBQyxDQUFDLENBQUM7Q0FDVCxDQUFDO0FBRUYsTUFBTSxLQUFLLEdBQUc7SUFDWixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNsRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNsRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuRCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtDQUNwRCxDQUFDO0FBRUYsUUFBUSxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtJQUNsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sTUFBTSxHQUFHLHVCQUF1QixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0QsTUFBTSxRQUFRLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO2FBQzNCLENBQUM7WUFDRixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDLENBQUMsQ0FBQyJ9