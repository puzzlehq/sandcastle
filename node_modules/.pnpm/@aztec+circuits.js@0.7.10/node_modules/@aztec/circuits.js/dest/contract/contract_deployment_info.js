import { computeContractAddress, computeFunctionTreeRoot, computePartialAddress, computeVarArgsHash, hashConstructor, } from '@aztec/circuits.js/abis';
import { FunctionSelector, encodeArguments } from '@aztec/foundation/abi';
import { CircuitsWasm, CompleteAddress, Fr, FunctionData } from '../index.js';
import { generateFunctionLeaves, hashVKStr, isConstructor } from './contract_tree/contract_tree.js';
/**
 * Generates the deployment info for a contract
 * @param abi - The account contract abi
 * @param args - The args to the account contract constructor
 * @param contractAddressSalt - The salt to be used in the contract address derivation
 * @param publicKey - The account public key
 * @returns - The contract deployment info
 */
export async function getContractDeploymentInfo(abi, args, contractAddressSalt, publicKey) {
    const constructorAbi = abi.functions.find(isConstructor);
    if (!constructorAbi) {
        throw new Error('Cannot find constructor in the ABI.');
    }
    if (!constructorAbi.verificationKey) {
        throw new Error('Missing verification key for the constructor.');
    }
    const wasm = await CircuitsWasm.get();
    const vkHash = hashVKStr(constructorAbi.verificationKey, wasm);
    const constructorVkHash = Fr.fromBuffer(vkHash);
    const functions = abi.functions.map(f => ({
        ...f,
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
    }));
    const leaves = generateFunctionLeaves(functions, wasm);
    const functionTreeRoot = computeFunctionTreeRoot(wasm, leaves);
    const functionData = FunctionData.fromAbi(constructorAbi);
    const flatArgs = encodeArguments(constructorAbi, args);
    const argsHash = await computeVarArgsHash(wasm, flatArgs);
    const constructorHash = hashConstructor(wasm, functionData, argsHash, constructorVkHash.toBuffer());
    // TODO(benesjan) https://github.com/AztecProtocol/aztec-packages/issues/1873: create computeCompleteAddress
    // function --> The following is wasteful as it computes partial address twice
    const partialAddress = computePartialAddress(wasm, contractAddressSalt, functionTreeRoot, constructorHash);
    const contractAddress = computeContractAddress(wasm, publicKey, contractAddressSalt, functionTreeRoot, constructorHash);
    const completeAddress = await CompleteAddress.create(contractAddress, publicKey, partialAddress);
    return {
        completeAddress,
        constructorHash: constructorVkHash,
        functionTreeRoot,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfZGVwbG95bWVudF9pbmZvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0L2NvbnRyYWN0X2RlcGxveW1lbnRfaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLHVCQUF1QixFQUN2QixxQkFBcUIsRUFDckIsa0JBQWtCLEVBQ2xCLGVBQWUsR0FDaEIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQWUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFdkYsT0FBTyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQWtCLEVBQUUsRUFBRSxZQUFZLEVBQWEsTUFBTSxhQUFhLENBQUM7QUFDekcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUVwRzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSx5QkFBeUIsQ0FDN0MsR0FBZ0IsRUFDaEIsSUFBVyxFQUNYLG1CQUF1QixFQUN2QixTQUFvQjtJQUVwQixNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RCxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztLQUN4RDtJQUNELElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFO1FBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztLQUNsRTtJQUVELE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9ELE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEMsR0FBRyxDQUFDO1FBQ0osUUFBUSxFQUFFLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQztLQUN2RSxDQUFDLENBQUMsQ0FBQztJQUNKLE1BQU0sTUFBTSxHQUFHLHNCQUFzQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RCxNQUFNLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvRCxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkQsTUFBTSxRQUFRLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDMUQsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFcEcsNEdBQTRHO0lBQzVHLDhFQUE4RTtJQUM5RSxNQUFNLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDM0csTUFBTSxlQUFlLEdBQUcsc0JBQXNCLENBQzVDLElBQUksRUFDSixTQUFTLEVBQ1QsbUJBQW1CLEVBQ25CLGdCQUFnQixFQUNoQixlQUFlLENBQ2hCLENBQUM7SUFFRixNQUFNLGVBQWUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUVqRyxPQUFPO1FBQ0wsZUFBZTtRQUNmLGVBQWUsRUFBRSxpQkFBaUI7UUFDbEMsZ0JBQWdCO0tBQ2pCLENBQUM7QUFDSixDQUFDIn0=