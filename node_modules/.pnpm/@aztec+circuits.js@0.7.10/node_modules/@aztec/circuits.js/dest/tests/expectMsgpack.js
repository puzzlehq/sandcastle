import { CircuitsWasm } from '../wasm/circuits_wasm.js';
import { simplifyHexValues } from './expectSerialize.js';
/**
 * Test utility. Sends a serialized buffer to wasm and gets the result.
 * @param inputBuf - Buffer to write.
 * @param serializeMethod - Method to use buffer with.
 * @param wasm - Optional circuit wasm.
 */
async function callWasm(inputBuf, serializeMethod) {
    const wasm = await CircuitsWasm.get();
    const inputBufPtr = wasm.call('bbmalloc', inputBuf.length);
    wasm.writeMemory(inputBufPtr, inputBuf);
    // Get a msgpack string version of our object. As a quick and dirty test,
    // we compare a snapshot of its string form to its previous form.
    const outputBufPtr = wasm.call(serializeMethod, inputBufPtr);
    // Read the size pointer
    const outputStr = wasm.getMemoryAsString(outputBufPtr);
    // Free memory
    wasm.call('bbfree', outputBufPtr);
    return outputStr;
}
/**
 * Test utility. Checks a buffer serialize against a snapshot.
 * @param inputBuf - Buffer to write.
 * @param serializeMethod - Method to use buffer with.
 */
export async function expectMsgpackToMatchSnapshot(inputBuf, serializeMethod) {
    const outputStr = simplifyHexValues(await callWasm(inputBuf, serializeMethod));
    expect(JSON.parse(outputStr)).toMatchSnapshot();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZWN0TXNncGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy9leHBlY3RNc2dwYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RDs7Ozs7R0FLRztBQUNILEtBQUssVUFBVSxRQUFRLENBQUMsUUFBZ0IsRUFBRSxlQUF1QjtJQUMvRCxNQUFNLElBQUksR0FBRyxNQUFNLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN0QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFeEMseUVBQXlFO0lBQ3pFLGlFQUFpRTtJQUNqRSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUU3RCx3QkFBd0I7SUFDeEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRXZELGNBQWM7SUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUVsQyxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsNEJBQTRCLENBQUMsUUFBZ0IsRUFBRSxlQUF1QjtJQUMxRixNQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUMvRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2xELENBQUMifQ==