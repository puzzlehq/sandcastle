/// <reference types="node" resolution-mode="require"/>
import { CircuitsWasm } from '../wasm/circuits_wasm.js';
/**
 * Simplify e.g. 0x0003 into 0x3.
 * @param input - The input string, with hex somewhere inside.
 * @returns The output string with fixed hex.
 */
export declare function simplifyHexValues(input: string): string;
/**
 * Test utility. Checks a buffer serialize against a snapshot.
 * @param inputBuf - Buffer to write to.
 * @param serializeMethod - Method to use buffer with.
 * @param wasm - Optional circuit wasm. If not set, we fetch a singleton.
 */
export declare function expectSerializeToMatchSnapshot(inputBuf: Buffer, serializeMethod: string, wasm?: CircuitsWasm): Promise<void>;
/**
 * Test utility. Serializes an object, passes it to a wasm reserialize method,
 * gets it back, deserializes it, and checks it matches the original.
 * @param inputObj - Object to check.
 * @param serializeMethod - Wasm method to send and get back the object.
 * @param deserialize - Method to deserialize the object with.
 * @param wasm - Optional circuit wasm. If not set, we fetch a singleton.
 */
export declare function expectReserializeToMatchObject<T extends {
    /**
     * Signature of the target serialization function.
     */
    toBuffer: () => Buffer;
}>(inputObj: T, serializeMethod: string, deserialize: (buf: Buffer) => T, wasm?: CircuitsWasm): Promise<void>;
//# sourceMappingURL=expectSerialize.d.ts.map