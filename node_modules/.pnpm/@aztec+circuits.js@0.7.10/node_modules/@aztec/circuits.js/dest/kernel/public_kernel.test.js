import { CircuitError, Fr, MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_READS_PER_TX, makeTuple, simulatePublicKernelCircuit, } from '../index.js';
import { makePublicDataRead, makePublicKernelInputsWithTweak } from '../tests/factories.js';
describe('kernel/public_kernel', () => {
    it('simulates public kernel circuit with previous public kernel', async function () {
        const input = await makePublicKernelInputsWithTweak(1, input => {
            input.publicCall.callStackItem.functionData.isConstructor = false;
            input.publicCall.callStackItem.functionData.isPrivate = false;
            input.previousKernel.publicInputs.isPrivate = false;
        });
        const result = await simulatePublicKernelCircuit(input);
        expect(result).toBeDefined();
    });
    it('simulates public kernel circuit with previous private kernel', async function () {
        const input = await makePublicKernelInputsWithTweak(1, input => {
            input.previousKernel.publicInputs.isPrivate = true;
            input.previousKernel.publicInputs.end.privateCallStack = makeTuple(MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX, Fr.zero);
        });
        const result = await simulatePublicKernelCircuit(input);
        expect(result).toBeDefined();
    });
    it('simulating public kernel circuit fails when aggregating proofs will overflow', async function () {
        const input = await makePublicKernelInputsWithTweak(1, input => {
            input.publicCall.callStackItem.functionData.isConstructor = false;
            input.publicCall.callStackItem.functionData.isPrivate = false;
            input.previousKernel.publicInputs.isPrivate = false;
            // Cause array overflow
            const fullStateReadsObject = makeTuple(MAX_PUBLIC_DATA_READS_PER_TX, makePublicDataRead, 0x01);
            input.previousKernel.publicInputs.end.publicDataReads = fullStateReadsObject;
        });
        await expect(simulatePublicKernelCircuit(input)).rejects.toThrow(new CircuitError(7009, `public_kernel_circuit: too many public data reads in one tx - array_push: capacity exceeded. Limit: ${MAX_PUBLIC_DATA_READS_PER_CALL}
Refer to https://docs.aztec.network/aztec/protocol/errors for more information.`));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2tlcm5lbC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2tlcm5lbC9wdWJsaWNfa2VybmVsLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFlBQVksRUFDWixFQUFFLEVBQ0Ysb0NBQW9DLEVBQ3BDLDhCQUE4QixFQUM5Qiw0QkFBNEIsRUFDNUIsU0FBUyxFQUNULDJCQUEyQixHQUM1QixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUU1RixRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLEVBQUUsQ0FBQyw2REFBNkQsRUFBRSxLQUFLO1FBQ3JFLE1BQU0sS0FBSyxHQUFHLE1BQU0sK0JBQStCLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzdELEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQ2xFLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQzlELEtBQUssQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRyxNQUFNLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4REFBOEQsRUFBRSxLQUFLO1FBQ3RFLE1BQU0sS0FBSyxHQUFHLE1BQU0sK0JBQStCLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzdELEtBQUssQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDbkQsS0FBSyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxvQ0FBb0MsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEgsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRyxNQUFNLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4RUFBOEUsRUFBRSxLQUFLO1FBQ3RGLE1BQU0sS0FBSyxHQUFHLE1BQU0sK0JBQStCLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzdELEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQ2xFLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQzlELEtBQUssQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFFcEQsdUJBQXVCO1lBQ3ZCLE1BQU0sb0JBQW9CLEdBQUcsU0FBUyxDQUFDLDRCQUE0QixFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDO1lBQy9GLEtBQUssQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsb0JBQW9CLENBQUM7UUFDL0UsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQzlELElBQUksWUFBWSxDQUNkLElBQUksRUFDSix1R0FBdUcsOEJBQThCO2dGQUM3RCxDQUN6RSxDQUNGLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIn0=