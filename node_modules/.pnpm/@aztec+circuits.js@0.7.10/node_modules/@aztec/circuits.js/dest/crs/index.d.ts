/**
 * Downloader for CRS from the web or local.
 */
export declare class NetCrs {
    /**
     * The number of circuit gates.
     */
    readonly numPoints: number;
    private data;
    private g2Data;
    constructor(
    /**
     * The number of circuit gates.
     */
    numPoints: number);
    /**
     * Download the data.
     */
    init(): Promise<void>;
    /**
     * Download the G2 points data.
     */
    downloadG2Data(): Promise<void>;
    /**
     * Verification key data.
     * @returns The verification key.
     */
    getG1Data(): Uint8Array;
    /**
     * G2 points data.
     * @returns The points data.
     */
    getG2Data(): Uint8Array;
}
/**
 * Downloader for CRS from a local file (for Node).
 */
export declare class FileCrs {
    /**
     * The number of circuit gates.
     */
    readonly numPoints: number;
    private path;
    private data;
    private g2Data;
    constructor(
    /**
     * The number of circuit gates.
     */
    numPoints: number, path: string);
    /**
     * Read the data file.
     */
    init(): Promise<void>;
    /**
     * Verification key data.
     * @returns The verification key.
     */
    getG1Data(): Uint8Array;
    /**
     * G2 points data.
     * @returns The points data.
     */
    getG2Data(): Uint8Array;
}
/**
 * Generic CRS finder utility class.
 */
export declare class Crs {
    /**
     * The number of circuit gates.
     */
    readonly numPoints: number;
    private crs;
    constructor(
    /**
     * The number of circuit gates.
     */
    numPoints: number);
    /**
     * Read CRS from our chosen source.
     */
    init(): Promise<void>;
    /**
     * Verification key data.
     * @returns The verification key.
     */
    getG1Data(): Uint8Array;
    /**
     * G2 points data.
     * @returns The points data.
     */
    getG2Data(): Uint8Array;
}
//# sourceMappingURL=index.d.ts.map