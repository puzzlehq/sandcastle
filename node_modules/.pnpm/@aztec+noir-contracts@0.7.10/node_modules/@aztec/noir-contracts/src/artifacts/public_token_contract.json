{
  "name": "PublicToken",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "mint",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "publicBalanceOf",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82ZS07DMBCGnfe7pZzAEqyrhDWLnAFOEKmFTUukJogTsOTO4NYjfhkLgWqrM1Lqie3O/83YaiI3EkIE4mQR+GjU1+u2Pc+6wF2sFnlD8D90Wxj9ylLwe0ccqfs6tQmwFpY8F3o8dqt7p7QiIax7wKybAH3FkrhlOdY1dRuzUzEy4Kdcib2C8RTazDFHAJoUl+6R76+s4YVZfa1/7jbmcX9jTZX9tr9zyK9wzFJrFlpXim/WFte2csvQqhg15EuapFPqC+f55ohBswLNhVvN475udKxAXwtLrksPuqSTaF3iIK0I5tzqtoF6KAs91watB5+0kCVixBIzYkkYsaSMWDJGLDkjloIRS8mIxfdz4D8sNSOWhhHLkhFLcGGWQvx8ryxgvIS+0Piuema8w/iV9kNLnCvLPMx95SF31OnhfgW5BQbfJVmWjFgaRiw1I5aKEUvJiKVgxJIzYskYsaSMWBJGLDEjlogRS2hh8XGeci2+zXxHKoGJ5hXgr6AvNOZlmjlyXD8PZ4id4qd9KGBt0HrwST+HWk3zeBietw/bYRNAiNgIF0IY9PF4j34qYujDYxxlmbD8FdPrtj3POkxAWBKwjd/o9l63j6d6yGk3zrKVL1+fw243vm03a4ljk9y/TrOc5uEwy6fDuJfd+hOaVRHpdBoAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "transfer",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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cZfz3UMRN/rjTuq7hwJudH3crX33UMCNro87wu8eCrjR9QO40fVxn/rdQwE3uj7uhb97KOBG18f99jcP9bhD/+6hiBv9sQV491DEjf7YNLx7KOJGf2wz3j0UcaM/NibvHoq40R9bmXcPRdzoj83Pu4cibvTHdundQxE3+mOD9e6hiBv9sSV791DEjf7YxL17KOJGf2z73j0UcaM/NorvHoq40R9by3cPRdzoRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDOqRDNqRDNqRDNqRDNqRDNqH8CNbkQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzakQzuolmdBPN6Caa0U00o/sDuNE30YxuohndRDO6iWZ0E83oJprRTTSjm2hGN9GMbqIZ3UQzuolmdBPN6Caa0U00o5toRjfRjG6iGd1EM7qJZnQTzegmmtFNNKObaEY30YxuohndRDO6iWZ0E83oJprRTTSjm2hGN9GMbqIZ3UQzuolmdBPN6Caa0U00o5toRjfRjG6iGd1EM7qJZnQTzegmmtFNNKObaEY30YxuohndRDO6iWZ0E83oJprRTTSjm2hGN9GMbqIZ3UQzuolmdBPN6Caa0U00o5toRjfRjG6iGd1EM7qJZnQTzegmmtFNNKObaEY30YxuohndRDO6iWZ0E83oJprRTTSjm2hGN9GMbqIZ3UQzuolmdBPN6Caa0U00o5toRjfRjG6iGd1EM7qJZnQTzegmmtFNNKNONKNONKNONKNONKP+AdzoTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjTjSjQTSjQTSjQTSjQTSj8QHc6EE0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0E0o0k0o0k0o0k0o0k0o/kB3OhJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJNKNJ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tIFBJu4OQ9rAIBN3hyFtYJCJu8OQNjDIxN1hSBsYZOLuMKQNDDJxdxjSBgaZuDsMaQODTNwdhrSBQSbuDkPawCATd4chbWCQibvDkDYwyMTdYUgbGGTi7jCkDQwycXcY0gYGmbg7DGkDg0zcHYa0gUEm7g5D2sAgE3eHIW1gkIm7w5A2MMjE3WFIGxhk4u4wpA0MMnF3GNIGBpm4OwxpA4NM3B2GtIFBJu4OQ9rAIBN3hyFtYJCJu8OQNjDIxN1hSBsYZOLuMKQNDDJxdxjQBhaSiROSiROSiROSiZMP0AYWkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkokTkolbJBO3SCZukUzcIpm49QHawItk4hbJxC2SiVskE7dIJm6RTNwimbhFMnGLZOIWycQtkolbJBO3SCZukUzcIpm4RTJxi2TiFsnELZKJWyQTt0gmbpFM3CKZuEUycYtk4hbJxC2SiVskE7dIJm6RTNwimbhFMnGLZOIWycQtkolbJBO3SCZukUzcIpm4RTJxi2TiFsnELZKJWyQTt0gmbpFM3CKZuEUycYtk4hbJxC2SiVskE7dIJm6RTNwimbhFMnGLZOIWycQtkolbJBO3SCZukUzcIpm4RTJxi2TiFsnELZKJWyQTt0gmbpFM3CKZuEUycYtk4hbJxC2SiVskE7dIJm6RTNwimbhFMnGLZOIWycQtkolbJBO3SCZukUzcIpm4RTJxi2TiFsnELZKJWyQTt0gmbpFM3CKZOCWZOCWZOCWZOCWZOP0AbWAlmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTglmTgjmTgjmTgjmTgjmTj7AG1gI5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5k4I5m4TTJxm2TiNsnEbZKJ2x+gDbxJJm6TTNwmmbhNMnGbZOI2ycRtkonbJBO3SSZuk0zcJpm4TTJxm2TiNsnEbZKJ2yQTt0kmbpNM3CaZuE0ycZtk4jbJxG2SidskE7dJJm6TTNwmmbhNMnGbZOI2ycRtkonbJBO3SSZuk0zcJpm4TTJxm2TiNsnEbZKJ2yQTt0kmbpNM3CaZuE0ycZtk4jbJxG2SidskE7dJJm6TTNwmmbhNMnGbZOI2ycRtkonbJBO3SSZuk0zcJpm4TTJxm2TiNsnEbZKJ2yQTt0kmbpNM3CaZuE0ycZtk4jbJxG2SidskE7dJJm6TTNwmmbhNMnGbZOI2ycRtkonbJBO3SSZuk0zcJpm4TTJxm2TiNsnEbZKJ2yQTt0kmbpNM3CaZuE0ycZtk4jbJxG2SiXOSiXOSiXOSiXOSifMP0AZ2kolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkolzkokLkokLkokLkokLkomLD9AGDpKJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJC5KJS5KJS5KJS5KJS5KJyw/QBk6SiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiUuSiTskE3dIJu6QTNwhmbjzAdrAh2TiDsnEHZKJOyQTd0gm7pBM3CGZuEMycYdk4g7JxB2SiTskE3dIJu6QTNwhmbhDMnGHZOIOycQdkok7JBN3SCbukEzcIZm4QzJxh2TiDsnEHZKJOyQTd0gm7pBM3CGZuEMycYdk4g7JxB2SiTskE3dIJu6QTNwhmbhDMnGHZOIOycQdkok7JBN3SCbukEzcIZm4QzJxh2TiDsnEHZKJOyQTd0gm7pBM3CGZuEMycYdk4g7JxB2SiTskE3dIJu6QTNwhmbhDMnGHZOIOycQdkok7JBN3SCbukEzcIZm4QzJxh2TiDsnEHZKJOyQTd0gm7pBM3CGZuEMycYdk4g7JxB2SiTskE3dIJu6QTNwhmbhDMnGHZOIOycQdkok7JBN3SCbukEzcAZm4/QEycXcYzga+w3A28B2Gs4HvMJwNfIfhbOA7DGcD32E4G/gOw9nAdxjSBgaZuDsMaQODTNwdhrSBQSbuDkPawCATd4chbWCQibvDkDYwyMTdYUgbGGTi7jCkDQwycXcY0gYGmbg7DGkDg0zcHYa0gUEm7g5D2sAgE3eHIW1gkIm7w5A2MMjE3WFIGxhk4u4wpA0MMnF3GNIGBpm4OwxpA4NM3B2GtIFBJu4OQ9rAIBN3hyFtYJCJu8OQNjDIxN1hSBsYZOLuMKQNDDJxdxjSBgaZuDsMaQODTNwdhrSBQSbuDkPawCATd4chbWCQibvDkDYwyMTdYUgbGGTi7jCkDQwycXcY0gYGmbg7DGkDg0zcHYa0gUEm7g5D2sAgE3eHIW1gkIm7w5A2MMjE3WFIGxhk4u4wpA0MMnF3GNIGBpm4OwxpA4NM3B2GtIFBJu4OQ9rAIBN3hyFtYJCJu8OANrCQTJyQTJyQTJyQTJx8gDawkEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEyckEzcIpm4RTJxi2TiFsnErQ/QBl4kE7dIJm6RTNwimbhFMnGLZOIWycQtkolbJBO3SCZukUzcIpm4RTJxi2TiFsnELZKJWyQTt0gmbpFM3CKZuEUycYtk4hbJxC2SiVskE7dIJm6RTNwimbhFMnGLZOIWycQtkolbJBO3SCZukUzcIpm4RTJxi2TiFsnELZKJWyQTt0gmbpFM3CKZuEUycYtk4hbJxC2SiVskE7dIJm6RTNwimbhFMnGLZOIWycQtkolbJBO3SCZukUzcIpm4RTJxi2TiFsnELZKJWyQTt0gmbpFM3CKZuEUycYtk4hbJxC2SiVskE7dIJm6RTNwimbhFMnGLZOIWycQtkolbJBO3SCZukUzcIpm4RTJxi2TiFsnELZKJWyQTt0gmbpFM3CKZuEUycYtk4hbJxCnJxCnJxCnJxCnJxOkHaAMrycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQpycQZycQZycQZycQZycTZB2gDG8nEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEGcnEbZKJ2yQTt0kmbpNM3P4AbeBNMnGbZOI2ycRtkonbJBO3SSZuk0zcJpm4TTJxm2TiNsnEbZKJ26MmzuT8Gkbzz8P8/Uclfw0gR/74aOofc08u65+ce3Kv/+DcVZT361hxWf86Vlyrv44VF+CvY8VV9etYcan8Ola8/r+OFS/qr2PFe/LrWPE1/Tz2BA7ptl/HNO3BscdvyZfHHr8lmvHrmH3Ig2OP35Ivjz1+S/405ONjj7+3+PjjafGnu/m3Y4+/ty+PPf7evjr2hBt8eezx9/blscff25fHHn8Bd7X98QX4eXDs8TU1+dvXHR//cOOKrF+fFfH488799YzHd/pnn/H4RfrZZzx+6372GY9f0R99xpPy9s8+4/HL/7PPeHxTfvYZj9fhzz7jydX90WcM3PMnNeaffcbAPX9SOv7ZZwzc8ycV4Z99xsA9f1Lo/dlnDNzzJ/Xbn33GwD1/Upb92WcM3PMn1daffcbAPX9SRP3ZZwzc8ye10Z99xsA9f1Ly/NlnDNzzJ5XMn33GwD1/UqD82WcM3PMndceffcbAPX9STvzZZwzc8ydVwp99xsA9f1L8+9lnDNzzJzW9n33GwD1/Uqr72WcM3PMnFbiffcbAPX9SWPvZZwzc8yf1sp99xsA9f1IG+9lnvP6e+5Pq1s8+4/X33J8UrX72Ga+/5/7x+nvuT9pOP/uM199zf9JN+tlnvP6e+5Mm0Y8+40lB6GefMXDPn9R5fvYZA/f8SfnmZ58xcM+fVGV+9hkD9/xJW+VnnzFwz5+0QH72GQP3/Em/5GefMXDPnzRXfvYZA/f8SSfmZ58xcM+ftG1+9hkD9/xJj+dnnzFwz580hH72GQP3/En36GefMXDPn/xTuD/7jIF7/qSd9bPPGLjnT3pfP/uMgXv+pFH2s88YuOfPKm4/+oyBez7Qh/OBPpwP9OF8oA/nA304H+jD+UAfzgf6cD7Qh/OBPpwP9OF8oA/nA304H+jD+UAfzgf6cD7Qh/OBPpwP9OF8oA/nA304H+jD+UAfzgf6cD7Qh/OBPpwP9OF8oA/nA304H+jD+UAfzgf6cD7Qh/OBPpwP9OF8oA/nA304H+jD+UAfzgf6cD7Qh/OBPpwP9OF8oA/nA304H+jD+UAfzgf6cD7Qh/OBPpwP9OF8oA/nA304H+jDxUAfLgb6cDHQh4uBPlx8vP6ex0AfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324GOjDxUAfLgb6cDHQh4uBPlwM9OFioA8XA324HOjD5UAfLgf6cDnQh8uP19/zHOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA+XA324HOjD5UAfLgf6cDnQh8uBPlwO9OFyoA93BvpwZ6APdwb6cGegD3c+Xn/Pz0Af7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHOQB/uDPThzkAf7gz04c5AH+4M9OHO6/tw/vH6Ptx9xsvv+X3Gy+/5fcbL7/l9xsvv+X3Gy+/5fcbL7/l9xsvv+X3Gy+/5fcbAPX99H+4+Y+Cev74Pd58xcM9f34e7zxi456/vw91nDNzz1/fh7jMG7vnr+3D3GQP3/PV9uPuMgXv++j7cfcbAPX99H+4+Y+Cev74Pd58xcM9f34e7zxi456/vw91nDNzz1/fh7jMG7vnr+3D3GQP3/PV9uPuMgXv++j7cfcbAPX99H+4+Y+Cev74Pd58xcM9f34e7zxi456/vw91nDNzz1/fh7jMG7vnr+3D3GQP3/PV9uPuMgXv++j7cfcbAPX99H+4+Y+Cev74Pd58xcM9f34e7zxi456/vw91nDNzz1/fh7jMG7vnr+3D3GQP3/PV9uPuMgXv++j7cfcbAPX99H+4+Y+Cev74Pd58xcM9f34e7zxi456/vw91nDNzz1/fh7jMG7vnr+3D3GQP3/PV9uPuMgXv++j7cfcbAPX99H+4+Y+Cev74Pd58xcM9f34e7zxi456/vw91nDNzz1/fh7jNef89loA8nA304GejDyUAfTj5ef89loA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPpwM9OFkoA8nA304GejDyUAfTgb6cDLQh5OBPtwa6MOtgT7cGujDrYE+3Pp4/T1fA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfbg10IdbA324NdCHWwN9uDXQh1sDfTgd6MPpQB9OB/pwOtCH04/X33Md6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD6cDfTgd6MPpQB9OB/pwOtCH04E+nA704XSgD2cDfTgb6MPZQB/OBvpw9vH6e24DfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304WygD2cDfTgb6MPZQB/OBvpwNtCHs4E+nA304fZAH24P9OH2QB9uD/Th9sfr7/ke6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow+2BPtwe6MPtgT7cHujD7YE+3B7ow/lAH84H+nA+0IfzgT6cf7z+nvtAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9OB/ow/lAH84H+nA+0IfzgT6cD/ThfKAP5wN9uBjow8VAHy4G+nAx0IeLj9ff8xjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPFwN9uBjow8VAHy4G+nAx0IeLgT5cDPThYqAPlwN9uBzow+VAHy4H+nD58fp7ngN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThcqAPlwN9uBzow+VAHy4H+nA50IfLgT5cDvThzkAf7gz04c5AH+4M9OHOx+vv+Rnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7cGejDnYE+3Bnow52BPtwZ6MOdgT7ceX0fLj5e34e7z3j5Pb/PePk9v894+T2/z3j5Pb/PePk9v894+T2/z3j5Pb/PePk9v88YuOev78PdZwzc89f34e4zBu756/tw9xkD9/z1fbj7jIF7/vo+3H3GwD1/fR/uPmPgnr++D3efMXDPX9+Hu88YuOev78PdZwzc89f34e4zBu756/tw9xkD9/z1fbj7jIF7/vo+3H3GwD1/fR/uPmPgnr++D3efMXDPX9+Hu88YuOev78PdZwzc89f34e4zBu756/tw9xkD9/z1fbj7jIF7/vo+3H3GwD1/fR/uPmPgnr++D3efMXDPX9+Hu88YuOev78PdZwzc89f34e4zBu756/tw9xkD9/z1fbj7jIF7/vo+3H3GwD1/fR/uPmPgnr++D3efMXDPX9+Hu88YuOev78PdZwzc89f34e4zBu756/tw9xkD9/z1fbj7jIF7/vo+3H3GwD1/fR/uPmPgnr++D3efMXDPX9+Hu88YuOev78PdZwzc89f34e4zBu756/tw9xkD9/z1fbj7jIF7/vo+3H3G6++5DPThZKAPJwN9OBnow8nH6++5DPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IeTgT6cDPThZKAPJwN9OBnow8lAH04G+nAy0IdbA324NdCHWwN9uDXQh1sfr7/na6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3Bvpwa6APtwb6cGugD7cG+nBroA+3nvTh9pFfz3Bdf3rGr2OPr+6Xxx7fxi+PPb5gXx57fGe+PPb4Gnx17EkD7Mtjj1/WL489fv++PPb4lfryWO8teVKQ+vJY7y15UmP68ljvLXlSNvrq2JP+0JfHem/Jk5bPl8d6b8mTLs6Xx3pvyZPGzJfHem/Jk17Ll8d6b8mT9smXx3pvyZOOyJfHem/JkybHl8d6b8mTvsWXx3pvyZNWxJfHWm+JPukufHms9Zbok4bBl8dab4l+tN4SffLT/pfHWm+JPvkB/stjrbdEn/xM/tWxJ798f3ms95Y8+X36y2O9t+TJr8hfHuu9JU9+6/3yWO8tefKL7JfHem/Jk99NvzzWe0ue/Lr55bHeW/LkN8gvj/Xekie/FH55rPeWPPk978tjvbfkya9uXx7rvSVPfhv78ljvLXnyC9aXx3pvyZPfmb481ntLnvwa9OWx3lvy5DebL4/13pInv6x8eaz3ljz5/ePLY7235MmvFF8e670lT35L+PJY7y15kvh/eaz3ljzJ5b881ntLnqTnXx7rvSVPMu4vj/XekidJ9JfHem/Jk7z4y2O9t+RJqvvlsd5b0stetZe9ai971V72qr3sVXvZq/ayV+1lr9rLXrWXvWove9Ve9qq97FV72av2slftZa/ay161l71qL3vVXvaqvexVe9mr9rJX7WWv2stetZe9ai971V72qr3sVXvZq/ayV+1lr9rLXrWXvWove9Ve9mq97NV62av1slfrZa/Wy16tl71aL3u1XvZqvezVetmr9bJX62Wv1sterZe9Wi97tV72ar3s1XrZq/WyV+tlr9bLXq2XvVove7Ve9mq97NV62av1slfrZa/Wy16tl71aL3u1XvZqvezVetmr9bJX62Wv1sterZe9Wi97tV72ar3s1XrZq/WyV+tlr9bLXq2XvVove7Ve9mq97NV62av1slfrZa/Wy16tl71aL3u1XvZqvezVetmr9bJX62Wv1sterZe9Wi97tV72ar3s1XrZq/WyV+tlr9bLXq2XvVove7Ve9mq97NV62av1slfrZa/Wy16tl71aL3u1XvZqvezVetmr9bJX62Wv1sterZe9Wi97tV72ar3s1XrZq/WyV+tlr9bLXq2XvVove7Ve9mq97NV62av1slfrZa+7l73uXva6e9nr7mWvu5e97l72unvZ6+5lr7uXve5e9rp72evuZa+7l73uXva6e9nr7mWvu5e97l72unvZ6+5lr7uXve5e9rp72evuZa+7l73uXva6e9nr7mWvu5e97l72unvZ6+5lr7uXve5e9rp72evuZa+7l73uXva6e9nr7mWvu5e97l72unvZ6+5lr7uXve5e9rp72evuZa+7l73uXva6e9nr7mWvu5e97l72unvZ6+5lr7uXve5e9rp72evuZa+7l73uXva6e9nr7mWvu5e97l72unvZ6+5lr7uXve5e9rp72evuZa+7l73uXva6e9nr7mWvu5e97l72unvZ6+5lr7uXve5e9rp72evuZa+7l73uXva6e9nr7mWvu5e97l72unvZ6+5lr7uXve5e9rp72evuZa+7l73uXva6e9nr7mWv3stevZe9ei979V726r3s1XvZq/eyV+9lr97LXr2XvXove/Ve9uq97NV72av3slfvZa/ey169l716L3v1XvbqvezVe9mr97JX72Wv3stevZe9ei979V726r3s1XvZq/eyV+9lr97LXr2XvXove/Ve9uq97NV72av3slfvZa/ey169l716L3v1XvbqvezVe9mr97JX72Wv3stevZe9ei979V726r3s1XvZq/eyV+9lr97LXr2XvXove/Ve9uq97NV72av3slfvZa/ey169l716L3v1XvbqvezVe9mr97JX72Wv3stevZe9ei979V726r3s1XvZq/eyV+9lr97LXr2XvXove/Ve9uq97NV72av3slfvZa/ey169l716L3v1XvbqvezVe9mr97JX72Wv3stevZe9ei979V72Gr3sNXrZa/Sy1+hlr9HLXqOXvUYve41e9hq97DV62Wv0stfoZa/Ry16jl71GL3uNXvYavew1etlr9LLX6GWv0cteo5e9Ri97jV72Gr3sNXrZa/Sy1+hlr9HLXqOXvUYve41e9hq97DV62Wv0stfoZa/Ry16jl71GL3uNXvYavew1etlr9LLX6GWv0cteo5e9Ri97jV72Gr3sNXrZa/Sy1+hlr9HLXqOXvUYve41e9hq97DV62Wv0stfoZa/Ry16jl71GL3uNXvYavew1etlr9LLX6GWv0cteo5e9Ri97jV72Gr3sNXrZa/Sy1+hlr9HLXqOXvUYve41e9hq97DV62Wv0stfoZa/Ry16jl71GL3uNXvYavew1etlr9LLX6GWv0cteo5e9Ri97jV72Gr3sNXrZa/Sy1+hlr9nLXrOXvWYve81e9pq97DV72Wv2stfsZa/Zy16zl71mL3vNXvaavew1e9lr9rLX7GWv2ctes5e9Zi97zV72mr3sNXvZa/ay1+xlr9nLXrOXvWYve81e9pq97DV72Wv2stfsZa/Zy16zl71mL3vNXvaavew1e9lr9rLX7GWv2ctes5e9Zi97zV72mr3sNXvZa/ay1+xlr9nLXrOXvWYve81e9pq97DV72Wv2stfsZa/Zy16zl71mL3vNXvaavew1e9lr9rLX7GWv2ctes5e9Zi97zV72mr3sNXvZa/ay1+xlr9nLXrOXvWYve81e9pq97DV72Wv2stfsZa/Zy16zl71mL3vNXvaavew1e9lr9rLX7GWv2ctes5e9Zi97zV72mr3sNXvZa/ay1+xlr9nLXrOXvWYve81e9np62evpZa+nl72eXvZ6etnr6WWvp5e9nl72enrZ6+llr6eXvZ5e9np62evpZa+nl72eXvZ6etnr6WWvp5e9nl72enrZ6+llr6eXvZ5e9np62evpZa+nl72eXvZ6etnr6WWvp5e9nl72enrZ6+llr6eXvZ5e9np62evpZa+nl72eXvZ6etnr6WWvp5e9nl72enrZ6+llr6eXvZ5e9np62evpZa+nl72eXvZ6etnr6WWvp5e9nl72enrZ6+llr6eXvZ5e9np62evpZa+nl72eXvZ6etnr6WWvp5e9nl72enrZ6+llr6eXvZ5e9np62evpZa+nl72eXvZ6etnr6WWvp5e9nl72enrZ6+llr6eXvZ5e9np62evpZa+nl72eXvZ6etnr6WWvp5e9nl72enrZ6+llr6eXvZ5e9np62evpZa+nl72eVvaaH63s9R7rvCX3WOctucc6b8k91nlL7rHOW3KPdd6Se6zzltxjnbfkHuu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Huu9Ja3s9R7rvSWt7PUe670lrez1Hmu9JdLLXqWXvUove5Ve9iq97FV62av0slfpZa/Sy16ll71KL3uVXvYqvexVetmr9LJX6WWv0stepZe9Si97lV72Kr3sVXrZq/SyV+llr9LLXqWXvUove5Ve9iq97FV62av0slfpZa/Sy16ll71KL3uVXvYqvexVetmr9LJX6WWv0stepZe9Si97lV72Kr3sVXrZq/SyV+llr9LLXqWXvUove5Ve9iq97FV62av0slfpZa/Sy16ll71KL3uVXvYqvexVetmr9LJX6WWv0stepZe9Si97lV72Kr3sVXrZq/SyV+llr9LLXqWXvUove5Ve9iq97FV62av0slfpZa/Sy16ll71KL3uVXvYqvexVetmr9LJX6WWv0stepZe9Si97lV72Kr3sVXrZq/SyV+llr9LLXqWXvUove5Ve9rp62evqZa+rl72uXva6etnr6mWvq5e9rl72unrZ6+plr6uXva5e9rp62evqZa+rl72uXva6etnr6mWvq5e9rl72unrZ6+plr6uXva5e9rp62evqZa+rl72uXva6etnr6mWvq5e9rl72unrZ6+plr6uXva5e9rp62evqZa+rl72uXva6etnr6mWvq5e9rl72unrZ6+plr6uXva5e9rp62evqZa+rl72uXva6etnr6mWvq5e9rl72unrZ6+plr6uXva5e9rp62evqZa+rl72uXva6etnr6mWvq5e9rl72unrZ6+plr6uXva5e9rp62evqZa+rl72uXva6etnr6mWvq5e9rl72unrZ6+plr6uXva5e9rp62evqZa+rl72uXva6etnr6mWvq5e9rl72unrZ6+plr6uXva5e9rp62evqZa+rl72uXvaqvexVe9mr9rJX7WWv2stetZe9ai971V72qr3sVXvZq/ayV+1lr9rLXrWXvWove9Ve9qq97FV72av2slftZa/ay161l71qL3vVXvaqvexVe9mr9rJX7WWv2stetZe9ai971V72qr3sVXvZq/ayV+1lr9rLXrWXvWove9Ve9qq97FV72av2slftZa/ay161l71qL3vVXvaqvexVe9mr9rJX7WWv2stetZe9ai971V72qr3sVXvZq/ayV+1lr9rLXrWXvWove9Ve9qq97FV72av2slftZa/ay161l71qL3vVXvaqvexVe9mr9rJX/f+bu7fkaHLziqIT8kMB+K6D8VA0d2eFu/lL4Swz+zBzE68KooBQAxC1a6GptdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltdeltVfT2qtp7dW09mpaezWtvZrWXk1rr6a1V9Paq2nt1bT2alp7Na29mtZeTWuvprVX09qrae3VtPZqWns1rb2a1l5Na6+mtVfT2qtp7dW09mpaezWtvZrWXk1rr6a1V9Paq2nt1bT2alp7Na29mtZeTWuvprVX09qrae3VtPZqWns1rb2a1l5Na6+mtVfT2qtp7dW09mpaezWtvZrWXk1rr6a1V9Paq2nt1bT2alp7Na29mtZeTWuvprVX09qrae3VtPZqWns1rb2a1l5Na6+mtVfT2qtp7dW09mpaezWtvZrWXk1rr6a1V9Paq2nt1bT2alp7Na29mtZeTWuvprVX09qrae3VtPZqWns1rb2a1l5Na6+mtVfT2qtp7dW09mpae3WtvbrWXl1rr661V9faq2vt1bX26lp7da29utZeXWuvrrVX19qra+3VtfbqWnt1rb261l5da6+utVfX2qtr7dW19upae3WtvbrWXl1rr661V9faq2vt1bX26lp7da29utZeXWuvrrVX19qra+3VtfbqWnt1rb261l5da6+utVfX2qtr7dW19upae3WtvbrWXl1rr661V9faq2vt1bX26lp7da29utZeXWuvrrVX19qra+3VtfbqWnt1rb261l5da6+utVfX2qtr7dW19upae3WtvbrWXl1rr661V9faq2vt1bX26lp7da29utZeXWuvrrVX19qra+3VtfbqWnt1rb261l5da6+utVfX2qtr7dW19upae3WtvbrWXl1rr66119Daa2jtNbT2Glp7Da29htZeQ2uvobXX0NpraO01tPYaWnsNrb2G1l5Da6+htdfQ2mto7TW09hpaew2tvYbWXkNrr6G119Daa2jtNbT2Glp7Da29htZeQ2uvobXX0NpraO01tPYaWnsNrb2G1l5Da6+htdfQ2mto7TW09hpaew2tvYbWXkNrr6G119Daa2jtNbT2Glp7Da29htZeQ2uvobXX0NpraO01tPYaWnsNrb2G1l5Da6+htdfQ2mto7TW09hpaew2tvYbWXkNrr6G119Daa2jtNbT2Glp7Da29htZeQ2uvobXX0NpraO01tPYaWnsNrb2G1l5Da6+htdfQ2mto7TW09hpaew2tvYbWXkNrr6G119Daa2jtNbT2Glp7Ta29ptZeU2uvqbXX1Nprau01tfaaWntNrb2m1l5Ta6+ptdfU2mtq7TW19ppae02tvabWXlNrr6m119Taa2rtNbX2mlp7Ta29ptZeU2uvqbXX1Nprau01tfaaWntNrb2m1l5Ta6+ptdfU2mtq7TW19ppae02tvabWXlNrr6m119Taa2rtNbX2mlp7Ta29ptZeU2uvqbXX1Nprau01tfaaWntNrb2m1l5Ta6+ptdfU2mtq7TW19ppae02tvabWXlNrr6m119Taa2rtNbX2mlp7Ta29ptZeU2uvqbXX1Nprau01tfaaWntNrb2m1l5Ta6+ptdfU2mtq7TW19ppae02tvabWXlNrr6m119Taa2rtNbX2mlp7Ta29ptZeU2uvqbXX0tprae21tPZaWnstrb2W1l5La6+ltdfS2mtp7bW09lpaey2tvZbWXktrr6W119Laa2nttbT2Wlp7La29ltZeS2uvpbXX0tprae21tPZaWnstrb2W1l5La6+ltdfS2mtp7bW09lpaey2tvZbWXktrr6W119Laa2nttbT2Wlp7La29ltZeS2uvpbXX0tprae21tPZaWnstrb2W1l5La6+ltdfS2mtp7bW09lpaey2tvZbWXktrr6W119Laa2nttbT2Wlp7La29ltZeS2uvpbXX0tprae21tPZaWnstrb2W1l5La6+ltdfS2mtp7bW09lpaey2tvZbWXktrr6W119Laa2nttbT2Wlp7La29ltZeS2uvpbXX0tprae21tPZaWnttrb221l5ba6+ttdfW2mtr7bW19tpae22tvbbWXltrr62119baa2vttbX22lp7ba29ttZeW2uvrbXX1tpra+21tfbaWnttrb221l5ba6+ttdfW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P8/q3pMQJ/55WPeehDjxz9O69yTEiX8e170nIU7887zuPQlx4p8Hdu9JiBP/PLF7T0Kc+OeR3XsS4sQ/z+zekxAn/nlo956EOPHPU7v3JMSJfx7bvSchTvzz3O49CXHinwd370mIE/88uXtPApz4QZi7QZi7QZi7QZi78QJO/CDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3SDM3STM3STM3STM3STM3XwBJ34S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4S5m4R5m4R5m4R5m4R5m69gBO/CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3CHO3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"
    ],
    "fileMap": {
      "1": {
        "source": "// docs:start:all\ncontract PublicToken {\n    use dep::std::option::Option;\n\n    // docs:start:unencrypted_import\n    use dep::aztec::oracle::logs::emit_unencrypted_log;\n    // docs:end:unencrypted_import\n\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{\n            map::Map,\n            public_state::PublicState,\n        },\n        types::type_serialisation::field_serialisation::{\n            FieldSerialisationMethods, FIELD_SERIALISED_LEN,\n        },\n    };\n\n    struct Storage {\n        balances: Map<PublicState<Field, FIELD_SERIALISED_LEN>>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                balances: Map::new(\n                    context,\n                    1,\n                    |context, slot| {\n                        PublicState::new(context, slot, FieldSerialisationMethods)\n                    },\n                ),\n            }\n        }\n    }\n\n    // Constructs the contract.\n    // docs:start:empty-constructor\n    #[aztec(private)]\n    fn constructor() {}\n    // docs:end:empty-constructor\n\n    // Mints `amount` of tokens to a `recipient`.\n    #[aztec(public)]\n    fn mint(\n        amount: Field,\n        recipient: Field,\n    ) -> Field {\n\n        let storage = Storage::init(Context::public(&mut context));\n        let recipient_balance = storage.balances.at(recipient);\n        let new_amount = recipient_balance.read() + amount;\n        // TODO: Remove return value.\n        // docs:start:unencrypted_log\n        let _hash = emit_unencrypted_log(\"Coins minted\");\n        // docs:end:unencrypted_log\n        recipient_balance.write(new_amount);\n\n        new_amount\n    }\n\n    // Transfers `amount` of tokens from `msg_sender` to `recipient`.\n    #[aztec(public)]\n    fn transfer(\n        amount: Field,\n        recipient: Field,\n    ) -> Field {\n        let storage = Storage::init(Context::public(&mut context));\n        let sender = context.msg_sender();\n\n        let sender_balance = storage.balances.at(sender);\n        let recipient_balance = storage.balances.at(recipient);\n\n        let current_sender_balance: Field = sender_balance.read();\n        let current_recipient_balance = recipient_balance.read();\n\n        // TODO: Should support larger numbers.\n        let mut return_value = 0;\n\n        if (current_sender_balance as u126 > amount as u126) {\n            sender_balance.write(current_sender_balance - amount);\n            // TODO: Compiler complains if we don't assign the result of the write to anything\n            let _hash = emit_unencrypted_log(\"Coins transferred\");\n            let amount = current_recipient_balance + amount;\n            recipient_balance.write(amount);\n            return_value = amount;\n        } else {\n            // TODO: Revert if there is not enough balance\n            return_value = current_recipient_balance;\n        }\n        return_value\n    }\n\n    unconstrained fn publicBalanceOf(\n        owner: Field,\n    ) -> Field {\n        let storage = Storage::init(Context::none());\n        storage.balances.at(owner).read()\n    }\n}\n// docs:end:all",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/public_token_contract/src/main"
      },
      "3": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "33": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        self.nullified_commitments.push(nullified_commitment);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\nfn storage_read<T, N>(\n    storage_slot: Field,\n    deserialise: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialise(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_message: T)  -> Field {}\n\nunconstrained fn emit_unencrypted_log<T>(message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(message), 0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs"
      },
      "73": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n\nimpl<V> Map<V> {\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "74": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialisation::TypeSerialisationInterface;\nuse dep::std::option::Option;\n\nstruct PublicState<T, T_SERIALISED_LEN> {\n    storage_slot: Field,\n    serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n}\n\nimpl<T, T_SERIALISED_LEN> PublicState<T, T_SERIALISED_LEN> {\n    fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialisation_methods,\n        }\n    }\n\n    fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialisation_methods.deserialise)\n    }\n\n    fn write(self, value: T) {\n        let serialise = self.serialisation_methods.serialise;\n        let fields = serialise(value);\n        storage_write(self.storage_slot, fields);\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "80": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialised() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "83": {
        "source": "use crate::types::type_serialisation::TypeSerialisationInterface;\n\nglobal FIELD_SERIALISED_LEN: Field = 1;\n\nfn deserialiseField(fields: [Field; FIELD_SERIALISED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serialiseField(value: Field) -> [Field; FIELD_SERIALISED_LEN] {\n    [value]\n}\n\nglobal FieldSerialisationMethods = TypeSerialisationInterface {\n    deserialise: deserialiseField,\n    serialise: serialiseField,\n};",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialisation/field_serialisation"
      }
    }
  }
}
