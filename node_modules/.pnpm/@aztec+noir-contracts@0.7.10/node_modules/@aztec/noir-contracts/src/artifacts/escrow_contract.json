{
  "name": "Escrow",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "withdraw",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "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",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod address_note;\n\n// Sample escrow contract that stores a balance of a private token on behalf of an owner.\ncontract Escrow {\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        log::emit_encrypted_log,\n        note::{\n            note_getter_options::NoteGetterOptions,\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        oracle::get_public_key::get_public_key,\n        oracle::compute_selector::compute_selector,\n        state_vars::set::Set,\n    };\n\n    use crate::address_note::{\n        AddressNote,\n        AddressNoteMethods,\n        ADDRESS_NOTE_LEN,\n    };\n\n    struct Storage {\n        owners: Set<AddressNote, ADDRESS_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                owners: Set::new(context, 1, AddressNoteMethods),\n            }\n        }\n    }\n\n    // Creates a new instance\n    // docs:start:constructor\n    #[aztec(private)]\n    fn constructor(\n        owner: pub Field\n    ) {\n        let storage = Storage::init(Context::private(&mut context));\n\n        let this = context.this_address();\n\n        // Create a new note and add it to the owners set.\n        let mut note = AddressNote::new(owner, this);\n\n        // Insert the owner into storage\n        storage.owners.insert(&mut note);\n        emit_encrypted_log(\n            &mut context,\n            this,\n            storage.owners.storage_slot,\n            get_public_key(this),\n            note.serialise(),\n        );\n    }\n    // docs:end:constructor\n\n    // Withdraws balance. Requires that msg.sender is registered as an owner.\n    #[aztec(private)]\n    fn withdraw(\n        token: Field,\n        amount: Field,\n        recipient: Field,\n    ) {\n        let this = context.this_address();\n        let sender = context.msg_sender();\n        let storage = Storage::init(Context::private(&mut context));\n        \n        // We don't remove note from the owners set. If a note exists, the owner and recipient are legit.\n        let options = NoteGetterOptions::new().select(0, sender).select(1, this).set_limit(1);\n        let notes = storage.owners.get_notes(options);\n        let note = notes[0].unwrap_unchecked();\n        // Filter is not constrained. We still need to check if the note is what we expected.\n        assert(note.address == sender);\n        assert(note.owner == this);\n\n        let selector = compute_selector(\"transfer((Field),(Field),Field,Field)\");\n        let _callStackItem = context.call_private_function(\n            token,\n            selector,\n            [this, recipient, amount, 0]\n        );\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; ADDRESS_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader { contract_address, nonce, storage_slot };\n        assert(storage_slot == 1);\n        note_utils::compute_note_hash_and_nullifier(AddressNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/escrow_contract/src/main"
      },
      "3": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "15": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "16": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "33": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi"
      },
      "35": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\nfn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        self.nullified_commitments.push(nullified_commitment);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context"
      },
      "40": {
        "source": "use crate::context::PrivateContext;\nuse crate::oracle;\nuse crate::types::point::Point;\n\nfn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\nfn emit_unencrypted_log<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let _ = oracle::logs::emit_unencrypted_log(log);\n    context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/log"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\nfn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // 0 nonce implies \"transient\" nullifier (must nullify a commitment in this TX).\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.nonce == 0) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort},\n    note_interface::NoteInterface,\n    note_header::NoteHeader,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n    utils::compute_inner_note_hash,\n    utils::compute_siloed_note_hash,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\n// Ensure a note's hash exists in the tree without retrieving the entire\n// notes via the oracle.\nfn ensure_note_hash_exists<Note, N>(\n    context: &mut PrivateContext,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n    from_public: bool,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    // Check the note hash via oracle and early out if it doesn't exist.\n    let inner_note_hash = compute_inner_note_hash(note_interface, note);\n    let exists = oracle::notes::check_note_hash_exists(header.nonce, inner_note_hash);\n    assert(exists, \"Note hash does not exist.\");\n\n    let mut note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n    if from_public {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n        // Should remove this once public kernel applies nonces.\n        note_hash_for_read_request = compute_siloed_note_hash(note_interface, note);\n    }\n    context.push_read_request(note_hash_for_read_request);\n}\n\nfn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\nfn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            check_note_header(*context, storage_slot, note_interface, note);\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n        };\n    };\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "48": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\nfn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\nfn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nfn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\nfn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    if (header.nonce == 0) {\n        // when nonce is zero, that means we are reading a pending note (doesn't have a nonce yet),\n        // so we just read the inner_note_hash (kernel will silo by contract address)\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\nfn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    let mut note = deserialise(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\nfn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\nfn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(checkNoteHashExists)]\nfn check_note_hash_exists_oracle<N>(\n    _nonce: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn check_note_hash_exists(\n    nonce: Field,\n    inner_note_hash: Field,\n) -> bool {\n    check_note_hash_exists_oracle(nonce, inner_note_hash) == 1\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialise the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialise the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_some.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let header = NoteHeader { contract_address, nonce, storage_slot };\n            let is_some = fields[read_offset + 1] as bool;\n            if is_some {\n                let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n                let mut note = deserialise(preimage);\n                set_header(&mut note, header);\n                placeholder_opt_notes[i] = Option::some(note);\n            }\n        };\n    };\n    placeholder_opt_notes\n}\n\nunconstrained fn is_nullifier_emitted(nullifier: Field) -> bool {\n    // TODO\n    nullifier == 0\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_message: T)  -> Field {}\n\nunconstrained fn emit_unencrypted_log<T>(message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(message), 0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs"
      },
      "67": {
        "source": "#[oracle(computeSelector)]\nfn compute_selector_oracle<T>(_selector: T, _size: Field) -> Field {}\n\nunconstrained fn compute_selector<T>(signature: T) -> Field {\n  compute_selector_oracle(signature, 0)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/compute_selector"
      },
      "69": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
      },
      "80": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialised() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "85": {
        "source": "fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils"
      },
      "86": {
        "source": "use dep::aztec::note::note_interface::NoteInterface;\nuse dep::aztec::note::note_header::NoteHeader;\nuse dep::aztec::note::utils::compute_siloed_note_hash;\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal ADDRESS_NOTE_LEN: Field = 2;\n\n// Stores an address\nstruct AddressNote {\n    address: Field,\n    owner: Field,\n    header: NoteHeader,\n}\n\nimpl AddressNote {\n    fn new(address: Field, owner: Field) -> Self {\n        AddressNote {\n            address,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn serialise(self) -> [Field; ADDRESS_NOTE_LEN]{\n        [self.address, self.owner]\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let siloed_note_hash = compute_siloed_note_hash(AddressNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            siloed_note_hash,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialise(preimage: [Field; ADDRESS_NOTE_LEN]) -> AddressNote {\n    AddressNote {\n        address: preimage[0],\n        owner: preimage[1],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialise(note: AddressNote) -> [Field; ADDRESS_NOTE_LEN]{\n    note.serialise()\n}\n\nfn compute_note_hash(note: AddressNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialise())[0]\n}\n\nfn compute_nullifier(note: AddressNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: AddressNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut AddressNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nglobal AddressNoteMethods = NoteInterface {\n    deserialise,\n    serialise,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/escrow_contract/src/address_note"
      }
    }
  }
}
