{
  "name": "SchnorrHardcodedAccount",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "aztec::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "",
      "eJzd3d+OLMl13eF3mWvCqB37T8Tmqxi+IGwZECBIhqU7ge/uoFXnzMjMns41XZWdP19xQGQWV0yeit1cnfGdf//ln/7lv//l3/7xX/75X3/587//8vgvUb/8+b/++y//+r/+8s9/+y/+9d/+8r//7Zc/P/70yz/88//Y//nXP/3yP//xn/7hlz/bX//bn/52+dQuX9rlLV2eD+1y0y4fZy//099dZT7GeF65/zl/vdr9+en+1k+Pt356vvXTT/+J/EOffvoP8B/69NN/3v/Qp5/+evyRT6/T36Y/9Omnv3x/6NPf+l2tt35X663f1Xrrd7Xe+l2tt35X663f1Xrrd3W+9bs63/pdnV/6rkb6z0+Pmb/99KPLy/rn5eXx92G+9NV+dZgv7QSvDvOljePVYb60z7w6zJe2pVeH+dIu9uowX9r0XhxmfWmPfHWYL22prw5zpx143WkHXnfagdedduB1px143WkHXnfagdedduC+0w7cd9qB+047cN9pB+477cB9px2477QD95124L7TDtx32oHtcact2B532oPtcadN2B532oXtcadt2B532oftcaeN2B532ontcaet2B632ovtVnux3WovtlvtxXarvdhutRfbrfZiu9VebLfai+1We7Hdai8et9qLx6324nGrvXjcai8et9qLx6324nGrvXjcai8et9qLx632Yr/VXuy32ov9Vnux32ov9lvtxX6rvdhvtRf7rfZiv9Ve7Lfai+NWe3Hcai+OW+3Fcau9OG61F8et9uLzRywuSXOrvfj8AZFL0txqLz5/vOWSNLfai792OOflaW61F3/t8M/L09xqL/7a4aKXp7nVXvy1w0svT3Orvfhrh6NenuZWe/HXDl+9PM2t9uKvHe56eZorv+EzHj8vn2UHaa78hn+a5spjSRG/npHa/+wHaS78UxyR82eajKM0F/4pPpHmwp8oTqS58CeKE2ku/IniRJoL95sTaS7cb/6fNPX3aa48nnQizYU/UZxIc3q/eV5/ekd4Xq+hF3b+vMnzeo29sPOnNv7j+vMHK57Xa/KFnT+e8Lz+9LR6Xi8+3/Pv4T+vF5/v+bfZn9eLz/f8O+H/9/px/q3t5/Xa8x3n33x+Xq893/HQnu84/37v83rt+Y7z78g+r9ee7zj/nul/XH/+TdDn9eLzPf825fN68fmefyPxeb34fM+/1fe8Xny+59+Me14vPt/zb5c9rxef7/k3tJ7Xi8/3/FtOz+vF53v+TaHn9eLzPf+2zfN68fmef2Pleb34fM+/9fG8Xny+59+ceF4vPt/zbx88rxef7/nf4D+vF5/v+d+CP68Xn+/53yQ/rxef7/nfxj6vF5+viMYNUY0bIhs3RDduiHDcEOW4cf63U8/rxed7/jc8z+vF53v+tyTP68Xne/43Dc/rxed7vq1/Xi8+3/ON9/N68fmeb42f14vP9zzb9bxefL7ne+bn9eLzPc9fPa8Xn+/5Lvh5vfh8z/epz+vF53u+k3xeLz7f873e83rx+Z7vxp7Xi8/3PIDzvF58vmJ/NcT+aoj91RD7qyH2V0Psr4bYXw2xvxpifzXE/mqI/dUQ+6sh9ldD7K+G2F8Nsb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb9ysb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8Ksb8K9S/tVP/WTvWv7RT7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxD7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxT7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qxL7qyn2V1Psr6bYX02xv5pifzXF/mqK/dUU+6sp9ldT7K+m2F9Nsb+aYn81xf5qiv3VFPurKfZXU+yvpthfTbG/mmJ/NcX+aor91RT7qyn2V1Psr6bYX02xv5pifzXF/mqK/dUU+6sp9ldT7K+m2F9Nsb+aYn81xf5qiv3VFPurKfZXU+yvpthfTbG/mmJ/NcX+aor91RT7qyn2V1Psr6bYX02xv5pifzXF/mqK/dUU+6sp9ldT7K+m2F9Nsb+aYn81xf5qiv3VFPurKfZXU+yvpthfTbG/mmJ/NcX+aor91RT7qyn2V1Psr6bYX02xv5pifzXF/mqK/dUU+6sp9ldT7K+m2F9Nsb+aYn81xf5qiv3VFPurKfZXU+yvpthfTbG/mmJ/NcX+aor9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",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "// docs:start:contract\n// Account contract that uses Schnorr signatures for authentication using a hardcoded public key.\ncontract SchnorrHardcodedAccount {\n    use dep::std;\n    use dep::aztec::{\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        abi::{ PrivateCircuitPublicInputs, PrivateContextInputs, Hasher },\n        types::{ vec::BoundedVec, point::Point },\n        constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n        context::PrivateContext,\n        account::AccountActions,\n        oracle::auth_witness::get_auth_witness,\n    };\n\n    global public_key_x: Field = 0x0ede3d33c920df8fdf43f3e39ed38b0882c25b056620ef52fd016fe811aa2443;\n    global public_key_y: Field = 0x29155934ffaa105323695b5f91faadd84acc21f4a8bda2fad760f992d692bc7f;\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 1;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    // docs:start:is-valid\n    #[contract_library_method]\n    fn is_valid_impl(_context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        // Load auth witness and format as an u8 array\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 { signature[i] = witness[i] as u8; }\n\n        // Verify signature using hardcoded public key\n        let verification = std::schnorr::verify_signature(public_key_x, public_key_y, signature, message_hash.to_be_bytes(32));\n        assert(verification == true);\n        true\n    }\n    // docs:end:is-valid\n\n}\n// docs:end:contract",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_hardcoded_account_contract/src/main"
      },
      "3": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "20": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\nfn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\nfn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\nfn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\nfn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\nfn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "33": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        self.nullified_commitments.push(nullified_commitment);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context"
      },
      "39": {
        "source": "use crate::abi;\nuse crate::types::vec::BoundedVec;\nuse crate::context::PrivateContext;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;    \nuse crate::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nuse dep::std::hash;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    hash::pedersen_with_separator(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )[0]\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/entrypoint"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 6\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 12;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\nfn storage_read<T, N>(\n    storage_slot: Field,\n    deserialise: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialise(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "68": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/auth_witness"
      },
      "69": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
      },
      "70": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "73": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n\nimpl<V> Map<V> {\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "74": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialisation::TypeSerialisationInterface;\nuse dep::std::option::Option;\n\nstruct PublicState<T, T_SERIALISED_LEN> {\n    storage_slot: Field,\n    serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n}\n\nimpl<T, T_SERIALISED_LEN> PublicState<T, T_SERIALISED_LEN> {\n    fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialisation_methods,\n        }\n    }\n\n    fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialisation_methods.deserialise)\n    }\n\n    fn write(self, value: T) {\n        let serialise = self.serialisation_methods.serialise;\n        let fields = serialise(value);\n        storage_write(self.storage_slot, fields);\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "80": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialised() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "82": {
        "source": "use crate::types::type_serialisation::TypeSerialisationInterface;\n\nglobal BOOL_SERIALISED_LEN: Field = 1;\n\nfn deserialiseBool(fields: [Field; BOOL_SERIALISED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serialiseBool(value: bool) -> [Field; BOOL_SERIALISED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerialisationMethods = TypeSerialisationInterface {\n    deserialise: deserialiseBool,\n    serialise: serialiseBool,\n};",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialisation/bool_serialisation"
      }
    }
  }
}
