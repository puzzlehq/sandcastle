{
  "name": "Uniswap",
  "functions": [
    {
      "name": "_compute_swap_content_hash",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "inAmount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "uniswapFeeTier",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "outputTokenPortal",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amountOutMin",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "aztecRecipientAddress",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secretHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "deadlineForL1ToL2Message",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "callerOnL1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "swap",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "inputAsset",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "inputAmount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "uniswapFeeTier",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "outputAsset",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "minimumOutputAmount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "sender",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secretHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "deadlineForL1ToL2Message",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "cancellerForL1ToL2Message",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "callerOnL1",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod non_native_token_interface;\n\n// Demonstrates how to send a message to a portal contract on L1. We use Uniswap here as it's the most typical example.\ncontract Uniswap {\n    use dep::aztec::oracle::context::get_portal_address;\n    \n    use crate::non_native_token_interface::NonNativeTokenPrivateContextInterface;\n    \n    #[aztec(private)]\n    fn constructor() {}\n\n    // What we need to make this nicer:\n    // 1. A way to access other (and my own) contract's portal addresses (we need many additional args for no good reason now)\n    // 2. don't pass all args manually to initial context\n    // 3. Variable length arrays for input arguments (8 not enough)\n    // 4. Should have storage for fixed values.\n    // 5. account abstraction using its own \"custom\" constants instead of using shared constants...\n    // 6. currently have to manually set the args array for calling other contracts which is inconvenient when using structs etc.\n\n    #[aztec(private)]\n    fn swap(\n        inputAsset: Field, \n        inputAmount: Field,\n        uniswapFeeTier: Field, // which uniswap tier to use (eg 3000 for 0.3% fee)\n        outputAsset: Field,\n        minimumOutputAmount: Field, // minimum output amount to receive (slippage protection for the swap)\n        sender: Field, \n        recipient: Field, // receiver address of output asset after the swap\n        secretHash: Field, // for when l1 uniswap portal inserts the message to consume output assets on L2\n        deadlineForL1ToL2Message: Field, // for when l1 uniswap portal inserts the message to consume output assets on L2\n        cancellerForL1ToL2Message: Field, // L1 address of who can cancel the message to consume assets on L2.\n        callerOnL1: Field, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n    ) -> Field {\n        // Get portal addresses\n        let l1UniswapPortal = context.this_portal_address();\n        let inputAssetPortalAddress = get_portal_address(inputAsset);\n        let outputAssetPortalAddress = get_portal_address(outputAsset);\n\n        // inputAsset.withdraw(inputAmount, sender, recipient=l1UniswapPortal, callerOnL1=l1UniswapPortal) \n        // only uniswap portal can call this (done to safeguard ordering of message consumption)\n        // ref: https://docs.aztec.network/aztec/how-it-works/l1-l2-messaging#designated-caller\n        let inputAssetInterface = NonNativeTokenPrivateContextInterface::at(inputAsset);\n        let return_value = inputAssetInterface.withdraw(\n            &mut context,\n            inputAmount,\n            sender,\n            l1UniswapPortal,\n            l1UniswapPortal,\n        )[0];\n        \n        // Send the swap message to L1 portal\n        let content_hash = _compute_swap_content_hash(\n           inputAssetPortalAddress,\n           inputAmount,\n           uniswapFeeTier,\n           outputAssetPortalAddress,\n           minimumOutputAmount,\n           recipient,\n           secretHash,\n           deadlineForL1ToL2Message,\n           cancellerForL1ToL2Message,\n           callerOnL1,\n        );\n        context.message_portal(content_hash);\n\n        return_value\n    }\n\n    // refer `l1-contracts/test/portals/UniswapPortal.sol` on how L2 to L1 message is expected\n    fn _compute_swap_content_hash(\n        inputTokenPortal: Field,\n        inAmount: Field,\n        uniswapFeeTier: Field,\n        outputTokenPortal: Field,\n        amountOutMin: Field,\n        aztecRecipientAddress: Field,\n        secretHash: Field,\n        deadlineForL1ToL2Message: Field,\n        canceller: Field,\n        callerOnL1: Field, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n    ) -> pub Field {\n\n        let mut hash_bytes: [u8; 324] = [0; 324]; // 10 fields of 32 bytes each + 4 bytes fn selector\n\n        let inputTokenPortal_bytes = inputTokenPortal.to_be_bytes(32);\n        let inAmount_bytes = inAmount.to_be_bytes(32);\n        let uniswapFeeTier_bytes = uniswapFeeTier.to_be_bytes(32);\n        let outputTokenPortal_bytes = outputTokenPortal.to_be_bytes(32);\n        let amountOutMin_bytes = amountOutMin.to_be_bytes(32);\n        let aztecRecipientAddress_bytes = aztecRecipientAddress.to_be_bytes(32);\n        let secretHash_bytes = secretHash.to_be_bytes(32);\n        let deadlineForL1ToL2Message_bytes = deadlineForL1ToL2Message.to_be_bytes(32);\n        let canceller_bytes = canceller.to_be_bytes(32);\n        let callerOnL1_bytes = callerOnL1.to_be_bytes(32);\n\n        // function selector: 0x9c073c81 keccak256(\"swap(address,uint256,uint24,address,uint256,bytes32,bytes32,uint32,address,address)\")\n        hash_bytes[0] = 0x9c;\n        hash_bytes[1] = 0x07;\n        hash_bytes[2] = 0x3c;\n        hash_bytes[3] = 0x81;\n\n        for i in 0..32 {\n            hash_bytes[i + 4] = inputTokenPortal_bytes[i];\n            hash_bytes[i + 36] = inAmount_bytes[i];\n            hash_bytes[i + 68] = uniswapFeeTier_bytes[i];\n            hash_bytes[i + 100] = outputTokenPortal_bytes[i];\n            hash_bytes[i + 132] = amountOutMin_bytes[i];\n            hash_bytes[i + 164] = aztecRecipientAddress_bytes[i];\n            hash_bytes[i + 196] = secretHash_bytes[i];\n            hash_bytes[i + 228] = deadlineForL1ToL2Message_bytes[i];\n            hash_bytes[i + 260] = canceller_bytes[i];\n            hash_bytes[i + 292] = callerOnL1_bytes[i];\n        }\n\n        let content_sha256 = dep::std::hash::sha256(hash_bytes);\n\n        // // Convert the content_sha256 to a field element\n        let mut v = 1;\n        let mut high = 0 as Field;\n        let mut low = 0 as Field;\n\n        for i in 0..16 {\n            high = high + (content_sha256[15 - i] as Field) * v;\n            low = low + (content_sha256[16 + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n\n        // Abuse that a % p + b % p = (a + b) % p and that low < p\n        let content_hash = low + high * v;\n\n        content_hash\n    }\n}",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/uniswap_contract/src/main"
      },
      "20": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\nfn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\nfn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\nfn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\nfn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\nfn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "33": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        self.nullified_commitments.push(nullified_commitment);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
      },
      "56": {
        "source": "#[oracle(getPortalContractAddress)]\nfn _get_portal_address(_contract_address: Field) -> Field {}\n\nunconstrained fn get_portal_address(contract_address: Field) -> Field {\n    let portal_address = _get_portal_address(contract_address);\n    portal_address\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/context"
      },
      "69": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
      }
    }
  }
}
