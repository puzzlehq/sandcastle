{
  "name": "SchnorrSingleKeyAccount",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "aztec::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "aztec::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod util;\nmod auth_oracle;\n\ncontract SchnorrSingleKeyAccount {\n    use dep::std::{\n        hash::pedersen_with_separator,\n        option::Option,\n    };\n\n    use dep::aztec::{\n        entrypoint::EntrypointPayload,\n        account::AccountActions,\n        context::{ PrivateContext, PublicContext, Context },\n    };\n\n    use crate::{ util::recover_address, auth_oracle::get_auth_witness };\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 1;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        let witness = get_auth_witness(message_hash);\n        assert(recover_address(message_hash, witness) == context.this_address());\n        true\n    }\n}",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/main"
      },
      "3": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "20": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\nfn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\nfn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\nfn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\nfn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\nfn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "33": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi"
      },
      "35": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\nfn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        self.nullified_commitments.push(nullified_commitment);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context"
      },
      "39": {
        "source": "use crate::abi;\nuse crate::types::vec::BoundedVec;\nuse crate::context::PrivateContext;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;    \nuse crate::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nuse dep::std::hash;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    hash::pedersen_with_separator(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )[0]\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/entrypoint"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 6\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 12;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\nfn storage_read<T, N>(\n    storage_slot: Field,\n    deserialise: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialise(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "68": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/auth_witness"
      },
      "69": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
      },
      "70": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "73": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n\nimpl<V> Map<V> {\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "74": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialisation::TypeSerialisationInterface;\nuse dep::std::option::Option;\n\nstruct PublicState<T, T_SERIALISED_LEN> {\n    storage_slot: Field,\n    serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n}\n\nimpl<T, T_SERIALISED_LEN> PublicState<T, T_SERIALISED_LEN> {\n    fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialisation_methods,\n        }\n    }\n\n    fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialisation_methods.deserialise)\n    }\n\n    fn write(self, value: T) {\n        let serialise = self.serialisation_methods.serialise;\n        let fields = serialise(value);\n        storage_write(self.storage_slot, fields);\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "80": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialised() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "82": {
        "source": "use crate::types::type_serialisation::TypeSerialisationInterface;\n\nglobal BOOL_SERIALISED_LEN: Field = 1;\n\nfn deserialiseBool(fields: [Field; BOOL_SERIALISED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serialiseBool(value: bool) -> [Field; BOOL_SERIALISED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerialisationMethods = TypeSerialisationInterface {\n    deserialise: deserialiseBool,\n    serialise: serialiseBool,\n};",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialisation/bool_serialisation"
      },
      "86": {
        "source": "mod auth_oracle;\n\nuse dep::std::{schnorr::verify_signature};\nuse dep::aztec::address::compute_address;\nuse crate::auth_oracle::{AuthWitness};\n\nfn recover_address(\n    message_hash: Field,\n    witness: AuthWitness,\n) -> Field {\n    let message_bytes = message_hash.to_be_bytes(32);\n    let verification = verify_signature(witness.owner.x, witness.owner.y, witness.signature, message_bytes);\n    assert(verification == true);\n\n    let reproduced_address = compute_address(witness.owner.x, witness.owner.y, witness.partial_address);\n    reproduced_address\n}",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/util"
      },
      "87": {
        "source": "use dep::aztec::types::point::Point;\nuse dep::aztec::oracle::auth_witness;\n\nstruct AuthWitness {\n    owner: Point,\n    signature: [u8; 64],\n    partial_address: Field,\n}\n\nimpl AuthWitness {\n    fn deserialize(values: [Field; 67]) -> Self {\n        let mut signature = [0; 64];\n        for i in 0..64 {\n            signature[i] = values[i + 2] as u8;\n        }\n        Self {\n            owner: Point::new(values[0], values[1]),\n            signature,\n            partial_address: values[66],\n        }\n    }\n}\n\nunconstrained fn get_auth_witness(message_hash: Field) -> AuthWitness {\n    let witness: [Field; 67] = auth_witness::get_auth_witness(message_hash);\n    AuthWitness::deserialize(witness)\n}",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_single_key_account_contract/src/auth_oracle"
      }
    }
  }
}
