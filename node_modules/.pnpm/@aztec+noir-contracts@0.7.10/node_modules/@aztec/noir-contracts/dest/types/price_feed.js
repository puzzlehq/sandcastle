/* Autogenerated file, do not edit! */
/* eslint-disable */
import { ContractBase, DeployMethod, } from '@aztec/aztec.js';
import { Point } from '@aztec/foundation/fields';
import PriceFeedContractAbiJson from '../artifacts/price_feed_contract.json' assert { type: 'json' };
export const PriceFeedContractAbi = PriceFeedContractAbiJson;
/**
 * Type-safe interface for contract PriceFeed;
 */
export class PriceFeedContract extends ContractBase {
    constructor(
    /** The deployed contract's complete address. */
    completeAddress, 
    /** The wallet. */
    wallet) {
        super(completeAddress, PriceFeedContractAbi, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(
    /** The deployed contract's address. */
    address, 
    /** The wallet. */
    wallet) {
        const extendedContractData = await wallet.getExtendedContractData(address);
        if (extendedContractData === undefined) {
            throw new Error('Contract ' + address.toString() + ' is not deployed');
        }
        return new PriceFeedContract(extendedContractData.getCompleteAddress(), wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc) {
        return new DeployMethod(Point.ZERO, rpc, PriceFeedContractAbi, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc, publicKey) {
        return new DeployMethod(publicKey, rpc, PriceFeedContractAbi, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's ABI.
     */
    static get abi() {
        return PriceFeedContractAbi;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpY2VfZmVlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9wcmljZV9mZWVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUdMLFlBQVksRUFHWixZQUFZLEdBR2IsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQU0sS0FBSyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHckQsT0FBTyx3QkFBd0IsTUFBTSx1Q0FBdUMsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUVyRyxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyx3QkFBdUMsQ0FBQztBQUU1RTs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxZQUFZO0lBQ2pEO0lBQ0UsZ0RBQWdEO0lBQ2hELGVBQWdDO0lBQ2hDLGtCQUFrQjtJQUNsQixNQUFjO1FBRWQsS0FBSyxDQUFDLGVBQWUsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDcEIsdUNBQXVDO0lBQ3ZDLE9BQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQixNQUFjO1FBRWQsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzRSxJQUFJLG9CQUFvQixLQUFLLFNBQVMsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztTQUN4RTtRQUNELE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBYTtRQUNoQyxPQUFPLElBQUksWUFBWSxDQUFvQixLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BILENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFhLEVBQUUsU0FBb0I7UUFDbkUsT0FBTyxJQUFJLFlBQVksQ0FBb0IsU0FBUyxFQUFFLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ILENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sS0FBSyxHQUFHO1FBQ25CLE9BQU8sb0JBQW9CLENBQUM7SUFDOUIsQ0FBQztDQWNGIn0=