import { AztecAddress, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, Wallet } from '@aztec/aztec.js';
import { ContractAbi } from '@aztec/foundation/abi';
import { AztecRPC, PublicKey } from '@aztec/types';
export declare const TestContractAbi: ContractAbi;
/**
 * Type-safe interface for contract Test;
 */
export declare class TestContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(
    /** The deployed contract's address. */
    address: AztecAddress, 
    /** The wallet. */
    wallet: Wallet): Promise<TestContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc: AztecRPC): DeployMethod<TestContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc: AztecRPC, publicKey: PublicKey): DeployMethod<TestContract>;
    /**
     * Returns this contract's ABI.
     */
    static get abi(): ContractAbi;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** createL2ToL1MessagePublic(amount: field, secretHash: field) */
        createL2ToL1MessagePublic: ((amount: FieldLike, secretHash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** createNullifierPublic(amount: field, secretHash: field) */
        createNullifierPublic: ((amount: FieldLike, secretHash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** emit_unencrypted(value: field) */
        emit_unencrypted: ((value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** getPortalContractAddress(aztec_address: field) */
        getPortalContractAddress: ((aztec_address: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** getPublicKey(address: field) */
        getPublicKey: ((address: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** getRandom(kindaSeed: field) */
        getRandom: ((kindaSeed: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** getThisAddress() */
        getThisAddress: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** getThisPortalAddress() */
        getThisPortalAddress: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** isTimeEqual(time: field) */
        isTimeEqual: ((time: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** testCodeGen(aField: field, aBool: boolean, aNumber: integer, anArray: array, aStruct: struct, aDeepStruct: struct) */
        testCodeGen: ((aField: FieldLike, aBool: boolean, aNumber: bigint | number, anArray: FieldLike[], aStruct: {
            amount: FieldLike;
            secretHash: FieldLike;
        }, aDeepStruct: {
            aField: FieldLike;
            aBool: boolean;
            aNote: {
                amount: FieldLike;
                secretHash: FieldLike;
            };
            manyNotes: {
                amount: FieldLike;
                secretHash: FieldLike;
            }[];
        }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=test.d.ts.map