import { AztecAddress, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, Wallet } from '@aztec/aztec.js';
import { ContractAbi } from '@aztec/foundation/abi';
import { AztecRPC, PublicKey } from '@aztec/types';
export declare const SchnorrSingleKeyAccountContractAbi: ContractAbi;
/**
 * Type-safe interface for contract SchnorrSingleKeyAccount;
 */
export declare class SchnorrSingleKeyAccountContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(
    /** The deployed contract's address. */
    address: AztecAddress, 
    /** The wallet. */
    wallet: Wallet): Promise<SchnorrSingleKeyAccountContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc: AztecRPC): DeployMethod<SchnorrSingleKeyAccountContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc: AztecRPC, publicKey: PublicKey): DeployMethod<SchnorrSingleKeyAccountContract>;
    /**
     * Returns this contract's ABI.
     */
    static get abi(): ContractAbi;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** entrypoint(payload: struct) */
        entrypoint: ((payload: {
            function_calls: {
                args_hash: FieldLike;
                function_selector: FieldLike;
                target_address: FieldLike;
                is_public: boolean;
            }[];
            nonce: FieldLike;
        }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** is_valid(message_hash: field) */
        is_valid: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** is_valid_public(message_hash: field) */
        is_valid_public: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_is_valid_storage(message_hash: field, value: boolean) */
        set_is_valid_storage: ((message_hash: FieldLike, value: boolean) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=schnorr_single_key_account.d.ts.map