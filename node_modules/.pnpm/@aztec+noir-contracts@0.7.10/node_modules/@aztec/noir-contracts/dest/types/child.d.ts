import { AztecAddress, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, Wallet } from '@aztec/aztec.js';
import { ContractAbi } from '@aztec/foundation/abi';
import { AztecRPC, PublicKey } from '@aztec/types';
export declare const ChildContractAbi: ContractAbi;
/**
 * Type-safe interface for contract Child;
 */
export declare class ChildContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(
    /** The deployed contract's address. */
    address: AztecAddress, 
    /** The wallet. */
    wallet: Wallet): Promise<ChildContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc: AztecRPC): DeployMethod<ChildContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc: AztecRPC, publicKey: PublicKey): DeployMethod<ChildContract>;
    /**
     * Returns this contract's ABI.
     */
    static get abi(): ContractAbi;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** check_sender() */
        check_sender: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** pubGetValue(base_value: field) */
        pubGetValue: ((base_value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** pubIncValue(new_value: field) */
        pubIncValue: ((new_value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** pubIncValueInternal(new_value: field) */
        pubIncValueInternal: ((new_value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** pubSetValue(new_value: field) */
        pubSetValue: ((new_value: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** setValueTwiceWithNestedFirst() */
        setValueTwiceWithNestedFirst: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** setValueTwiceWithNestedLast() */
        setValueTwiceWithNestedLast: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** value(input: field) */
        value: ((input: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** valueInternal(input: field) */
        valueInternal: ((input: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=child.d.ts.map