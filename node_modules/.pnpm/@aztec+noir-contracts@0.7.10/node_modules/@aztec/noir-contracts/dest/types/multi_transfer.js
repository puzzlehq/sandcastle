/* Autogenerated file, do not edit! */
/* eslint-disable */
import { ContractBase, DeployMethod, } from '@aztec/aztec.js';
import { Point } from '@aztec/foundation/fields';
import MultiTransferContractAbiJson from '../artifacts/multi_transfer_contract.json' assert { type: 'json' };
export const MultiTransferContractAbi = MultiTransferContractAbiJson;
/**
 * Type-safe interface for contract MultiTransfer;
 */
export class MultiTransferContract extends ContractBase {
    constructor(
    /** The deployed contract's complete address. */
    completeAddress, 
    /** The wallet. */
    wallet) {
        super(completeAddress, MultiTransferContractAbi, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(
    /** The deployed contract's address. */
    address, 
    /** The wallet. */
    wallet) {
        const extendedContractData = await wallet.getExtendedContractData(address);
        if (extendedContractData === undefined) {
            throw new Error('Contract ' + address.toString() + ' is not deployed');
        }
        return new MultiTransferContract(extendedContractData.getCompleteAddress(), wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc) {
        return new DeployMethod(Point.ZERO, rpc, MultiTransferContractAbi, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc, publicKey) {
        return new DeployMethod(publicKey, rpc, MultiTransferContractAbi, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's ABI.
     */
    static get abi() {
        return MultiTransferContractAbi;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlfdHJhbnNmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvbXVsdGlfdHJhbnNmZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBR0wsWUFBWSxFQUdaLFlBQVksR0FHYixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFBTSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUdyRCxPQUFPLDRCQUE0QixNQUFNLDJDQUEyQyxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRTdHLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLDRCQUEyQyxDQUFDO0FBRXBGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFlBQVk7SUFDckQ7SUFDRSxnREFBZ0Q7SUFDaEQsZUFBZ0M7SUFDaEMsa0JBQWtCO0lBQ2xCLE1BQWM7UUFFZCxLQUFLLENBQUMsZUFBZSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUNwQix1Q0FBdUM7SUFDdkMsT0FBcUI7SUFDckIsa0JBQWtCO0lBQ2xCLE1BQWM7UUFFZCxNQUFNLG9CQUFvQixHQUFHLE1BQU0sTUFBTSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNFLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxJQUFJLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdEYsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFhO1FBQ2hDLE9BQU8sSUFBSSxZQUFZLENBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQ1YsR0FBRyxFQUNILHdCQUF3QixFQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFhLEVBQUUsU0FBb0I7UUFDbkUsT0FBTyxJQUFJLFlBQVksQ0FDckIsU0FBUyxFQUNULEdBQUcsRUFDSCx3QkFBd0IsRUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssR0FBRztRQUNuQixPQUFPLHdCQUF3QixDQUFDO0lBQ2xDLENBQUM7Q0FjRiJ9