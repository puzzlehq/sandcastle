import { AztecAddress, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, Wallet } from '@aztec/aztec.js';
import { ContractAbi } from '@aztec/foundation/abi';
import { AztecRPC, PublicKey } from '@aztec/types';
export declare const UniswapContractAbi: ContractAbi;
/**
 * Type-safe interface for contract Uniswap;
 */
export declare class UniswapContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(
    /** The deployed contract's address. */
    address: AztecAddress, 
    /** The wallet. */
    wallet: Wallet): Promise<UniswapContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc: AztecRPC): DeployMethod<UniswapContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc: AztecRPC, publicKey: PublicKey): DeployMethod<UniswapContract>;
    /**
     * Returns this contract's ABI.
     */
    static get abi(): ContractAbi;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** _compute_swap_content_hash(inAmount: field, uniswapFeeTier: field, outputTokenPortal: field, amountOutMin: field, aztecRecipientAddress: field, secretHash: field, deadlineForL1ToL2Message: field, canceller: field, callerOnL1: field) */
        _compute_swap_content_hash: ((inAmount: FieldLike, uniswapFeeTier: FieldLike, outputTokenPortal: FieldLike, amountOutMin: FieldLike, aztecRecipientAddress: FieldLike, secretHash: FieldLike, deadlineForL1ToL2Message: FieldLike, canceller: FieldLike, callerOnL1: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** swap(inputAsset: field, inputAmount: field, uniswapFeeTier: field, outputAsset: field, minimumOutputAmount: field, sender: field, recipient: field, secretHash: field, deadlineForL1ToL2Message: field, cancellerForL1ToL2Message: field, callerOnL1: field) */
        swap: ((inputAsset: FieldLike, inputAmount: FieldLike, uniswapFeeTier: FieldLike, outputAsset: FieldLike, minimumOutputAmount: FieldLike, sender: FieldLike, recipient: FieldLike, secretHash: FieldLike, deadlineForL1ToL2Message: FieldLike, cancellerForL1ToL2Message: FieldLike, callerOnL1: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
}
//# sourceMappingURL=uniswap.d.ts.map