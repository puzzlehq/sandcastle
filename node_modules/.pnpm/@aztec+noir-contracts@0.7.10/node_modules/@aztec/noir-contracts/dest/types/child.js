/* Autogenerated file, do not edit! */
/* eslint-disable */
import { ContractBase, DeployMethod, } from '@aztec/aztec.js';
import { Point } from '@aztec/foundation/fields';
import ChildContractAbiJson from '../artifacts/child_contract.json' assert { type: 'json' };
export const ChildContractAbi = ChildContractAbiJson;
/**
 * Type-safe interface for contract Child;
 */
export class ChildContract extends ContractBase {
    constructor(
    /** The deployed contract's complete address. */
    completeAddress, 
    /** The wallet. */
    wallet) {
        super(completeAddress, ChildContractAbi, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(
    /** The deployed contract's address. */
    address, 
    /** The wallet. */
    wallet) {
        const extendedContractData = await wallet.getExtendedContractData(address);
        if (extendedContractData === undefined) {
            throw new Error('Contract ' + address.toString() + ' is not deployed');
        }
        return new ChildContract(extendedContractData.getCompleteAddress(), wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc) {
        return new DeployMethod(Point.ZERO, rpc, ChildContractAbi, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc, publicKey) {
        return new DeployMethod(publicKey, rpc, ChildContractAbi, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's ABI.
     */
    static get abi() {
        return ChildContractAbi;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvY2hpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBR0wsWUFBWSxFQUdaLFlBQVksR0FHYixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFBTSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUdyRCxPQUFPLG9CQUFvQixNQUFNLGtDQUFrQyxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRTVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLG9CQUFtQyxDQUFDO0FBRXBFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWMsU0FBUSxZQUFZO0lBQzdDO0lBQ0UsZ0RBQWdEO0lBQ2hELGVBQWdDO0lBQ2hDLGtCQUFrQjtJQUNsQixNQUFjO1FBRWQsS0FBSyxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDcEIsdUNBQXVDO0lBQ3ZDLE9BQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQixNQUFjO1FBRWQsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzRSxJQUFJLG9CQUFvQixLQUFLLFNBQVMsRUFBRTtZQUN0QyxNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztTQUN4RTtRQUNELE9BQU8sSUFBSSxhQUFhLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQWE7UUFDaEMsT0FBTyxJQUFJLFlBQVksQ0FBZ0IsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsR0FBYSxFQUFFLFNBQW9CO1FBQ25FLE9BQU8sSUFBSSxZQUFZLENBQWdCLFNBQVMsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssR0FBRztRQUNuQixPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7Q0ErQkYifQ==