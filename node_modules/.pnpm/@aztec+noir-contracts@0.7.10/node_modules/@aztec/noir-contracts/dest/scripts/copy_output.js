import { createConsoleLogger } from '@aztec/foundation/log';
import { generateAztecAbi, generateNoirContractInterface, generateTypescriptContractInterface, } from '@aztec/noir-compiler';
import { readFileSync, writeFileSync } from 'fs';
import camelCase from 'lodash.camelcase';
import omit from 'lodash.omit';
import snakeCase from 'lodash.snakecase';
import upperFirst from 'lodash.upperfirst';
import { join as pathJoin } from 'path';
// const STATEMENT_TYPES = ['type', 'params', 'return'] as const;
const log = createConsoleLogger('aztec:noir-contracts');
const PROJECT_CONTRACTS = [
    { name: 'SchnorrSingleKeyAccount', target: '../aztec.js/src/abis/', exclude: [] },
    { name: 'SchnorrAccount', target: '../aztec.js/src/abis/', exclude: [] },
    { name: 'EcdsaAccount', target: '../aztec.js/src/abis/', exclude: [] },
];
const INTERFACE_CONTRACTS = ['private_token', 'private_token_airdrop', 'non_native_token', 'test'];
/**
 * Writes the contract to a specific project folder, if needed.
 * @param abi - The Abi to write.
 */
function writeToProject(abi) {
    for (const projectContract of PROJECT_CONTRACTS) {
        if (abi.name === projectContract.name) {
            const toWrite = {
                ...abi,
                functions: abi.functions.map((f) => omit(f, projectContract.exclude)),
                // If we maintain debug symbols they will get commited to git.
                debug: undefined,
            };
            const targetFilename = pathJoin(projectContract.target, `${snakeCase(abi.name)}_contract.json`);
            writeFileSync(targetFilename, JSON.stringify(toWrite, null, 2) + '\n');
            log(`Written ${targetFilename}`);
        }
    }
}
const main = () => {
    const name = process.argv[2];
    if (!name)
        throw new Error(`Missing argument contract name`);
    const projectName = `${snakeCase(name)}_contract`;
    const contractName = upperFirst(camelCase(name));
    const artifactFile = `${projectName}-${contractName}.json`;
    const buildJsonFilePath = `./target/${artifactFile}`;
    const buildJson = JSON.parse(readFileSync(buildJsonFilePath).toString());
    const debugArtifactFile = `debug_${artifactFile}`;
    let debug = undefined;
    try {
        const debugJsonFilePath = `./target/${debugArtifactFile}`;
        const debugJson = JSON.parse(readFileSync(debugJsonFilePath).toString());
        if (debugJson) {
            debug = debugJson;
        }
    }
    catch (err) {
        // Ignore
    }
    // Remove extraneous information from the buildJson (which was output by Nargo) to hone in on the function data we actually care about:
    const artifactJson = generateAztecAbi({ contract: buildJson, debug });
    // Write the artifact:
    const artifactsDir = 'src/artifacts';
    const artifactFileName = `${snakeCase(name)}_contract.json`;
    writeFileSync(pathJoin(artifactsDir, artifactFileName), JSON.stringify(artifactJson, null, 2) + '\n');
    log(`Written ${pathJoin(artifactsDir, artifactFileName)}`);
    // Write some artifacts to other packages in the monorepo:
    writeToProject(artifactJson);
    // Write a .ts contract interface, for consumption by the typescript code
    const tsInterfaceDestFilePath = `src/types/${name}.ts`;
    const tsAbiImportPath = `../artifacts/${artifactFileName}`;
    writeFileSync(tsInterfaceDestFilePath, generateTypescriptContractInterface(artifactJson, tsAbiImportPath));
    log(`Written ${tsInterfaceDestFilePath}`);
    // Write a .nr contract interface, for consumption by other Aztec.nr contracts
    if (INTERFACE_CONTRACTS.includes(name)) {
        const projectDirPath = `src/contracts/${projectName}`;
        const noirInterfaceDestFilePath = `${projectDirPath}/src/interface.nr`;
        try {
            writeFileSync(noirInterfaceDestFilePath, generateNoirContractInterface(artifactJson));
            log(`Written ${noirInterfaceDestFilePath}`);
        }
        catch (err) {
            log(`Error generating Aztec.nr interface for ${name}: ${err}`);
        }
    }
};
try {
    main();
}
catch (err) {
    log(err);
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weV9vdXRwdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9jb3B5X291dHB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLDZCQUE2QixFQUM3QixtQ0FBbUMsR0FDcEMsTUFBTSxzQkFBc0IsQ0FBQztBQUU5QixPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLElBQUksQ0FBQztBQUNqRCxPQUFPLFNBQVMsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLElBQUksTUFBTSxhQUFhLENBQUM7QUFDL0IsT0FBTyxTQUFTLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxVQUFVLE1BQU0sbUJBQW1CLENBQUM7QUFDM0MsT0FBTyxFQUFFLElBQUksSUFBSSxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFeEMsaUVBQWlFO0FBQ2pFLE1BQU0sR0FBRyxHQUFHLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFFeEQsTUFBTSxpQkFBaUIsR0FBRztJQUN4QixFQUFFLElBQUksRUFBRSx5QkFBeUIsRUFBRSxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtJQUNqRixFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtJQUN4RSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLHVCQUF1QixFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7Q0FDdkUsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxlQUFlLEVBQUUsdUJBQXVCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFFbkc7OztHQUdHO0FBQ0gsU0FBUyxjQUFjLENBQUMs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