{
    "name": "SchnorrAccount",
    "functions": [
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "preimage",
                    "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "signing_pub_key_x",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                },
                {
                    "name": "signing_pub_key_y",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "public"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "entrypoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "payload",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::entrypoint::EntrypointPayload",
                        "fields": [
                            {
                                "name": "function_calls",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "struct",
                                        "path": "aztec::entrypoint::FunctionCall",
                                        "fields": [
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "target_address",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "is_public",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nonce",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "set_is_valid_storage",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "value",
                    "type": {
                        "kind": "boolean"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "debug": {
        "debugSymbols": [
            "",
            "eJzlms1q4zAUhd9F6xCk+yPJeZWhizDTQqGkwyS7kHdv0lqySS8WgY5yIKskcCQ+H9nf9SJH9/b+e3t4fd/t3ebo2G1+Hd3+73Z3+bU/bP8d3Mav3PPuz/nztHIvr2/PbhNOq2+pwKI8Js/fk9Y0sxUXGqTEhVOax59WTmBIFIYkwpAkGJIMQzLAkASPgxJwUAgHBcezAUe0Ace0AUe1Ace1AUe2Ace2hGNbwrEt4diWcGxLOLYlHNsSjm0Jx7aEY1vCsS3j2JZxbMs4tmUc2zKObbmnbUVTRVHha5Setm2g9LRtA6WnbRsoPW27jCI9bdtA6WnbBkpP2zZQetq2gdLTtg0UHNsKjm0Fx7aCY1vBsa3i2FZxbKumbYNyKIs0p2UgokIeSIeaTWSFY6gvconjPHyBMX17LxjTuPeCMZ17EwwP9bZR8cswKcYxmwPVqKgRlVSiMkyXqOYlZtGCkGe4ORph8qUO4tn7/mcZpvUftQxz7iCUob5EVeNyGZTzGGWaDCX5xirMufeYVZhz9yGriObc/29VDH4Ys0Mc5lVcUMy53wMlyTWKPfcTVykl1UWU85mU05klz2Pusrs9yH9qd3sy37C75DKYlWW+u9F4qndWms6Tv0q0p/IdQOyJeAOI1mmkSa77tkdMrE9yyF4Wd6fk62nOHgr/ubtt7Z/a3a/N/UWKWzRMzUT5ejbWZp9E5Xmav82NHdHabKmxxmRrrDHVvrgmre0/ragvhx45TCXE09Pp9AF1bEp4",
            "",
            "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",
            "",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "mod public_key_note;\n\n// Account contract that uses Schnorr signatures for authentication.\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\ncontract SchnorrAccount {\n    use dep::std;\n\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        entrypoint::{ENTRYPOINT_PAYLOAD_SIZE, EntrypointPayload},\n        log::emit_encrypted_log,\n        note::{ note_header::NoteHeader, utils as note_utils },\n        oracle::{ get_public_key::get_public_key, auth_witness::get_auth_witness },\n        state_vars::immutable_singleton::ImmutableSingleton,\n        account::AccountActions,\n    };\n\n    use crate::public_key_note::{PublicKeyNote, PublicKeyNoteMethods, PUBLIC_KEY_NOTE_LEN};\n\n    struct Storage {\n        signing_public_key: ImmutableSingleton<PublicKeyNote, PUBLIC_KEY_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                signing_public_key: ImmutableSingleton::new(context, 1, PublicKeyNoteMethods),\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Constructs the contract\n    #[aztec(private)]\n    fn constructor(\n        signing_pub_key_x: pub Field,\n        signing_pub_key_y: pub Field,\n    ) {\n        let storage = Storage::init(Context::private(&mut context));\n        \n        let this = context.this_address();\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.signing_public_key.initialise(&mut pub_key_note);\n        \n        emit_encrypted_log(\n            &mut context,\n            this,\n            storage.signing_public_key.storage_slot,\n            get_public_key(this),\n            pub_key_note.serialise(),\n        );\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        // docs:start:entrypoint\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n        let public_key = storage.signing_public_key.get_note();\n\n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 { signature[i] = witness[i] as u8; }\n\n        // Verify signature of the payload bytes\n        let verification = std::schnorr::verify_signature(public_key.x, public_key.y, signature, message_hash.to_be_bytes(32));\n        assert(verification == true);\n        // docs:end:entrypoint\n        true\n    }\n\n    // Computes notes hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader { contract_address, nonce, storage_slot };\n        note_utils::compute_note_hash_and_nullifier(PublicKeyNoteMethods, note_header, preimage)\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_account_contract/src/main"
            },
            "3": {
                "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
                "path": "std/hash"
            },
            "15": {
                "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
                "path": "std/grumpkin_scalar"
            },
            "16": {
                "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
                "path": "std/grumpkin_scalar_mul"
            },
            "20": {
                "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\nfn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\nfn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\nfn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\nfn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\nfn modulus_le_bytes() -> [u8] {}\n",
                "path": "std/field"
            },
            "31": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option"
            },
            "33": {
                "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi"
            },
            "35": {
                "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\nfn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/address"
            },
            "38": {
                "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        self.nullified_commitments.push(nullified_commitment);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context"
            },
            "39": {
                "source": "use crate::abi;\nuse crate::types::vec::BoundedVec;\nuse crate::context::PrivateContext;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;    \nuse crate::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nuse dep::std::hash;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    hash::pedersen_with_separator(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )[0]\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/entrypoint"
            },
            "40": {
                "source": "use crate::context::PrivateContext;\nuse crate::oracle;\nuse crate::types::point::Point;\n\nfn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\nfn emit_unencrypted_log<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let _ = oracle::logs::emit_unencrypted_log(log);\n    context.accumulate_unencrypted_logs(log);\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/log"
            },
            "45": {
                "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\nfn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // 0 nonce implies \"transient\" nullifier (must nullify a commitment in this TX).\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.nonce == 0) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/lifecycle"
            },
            "46": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort},\n    note_interface::NoteInterface,\n    note_header::NoteHeader,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n    utils::compute_inner_note_hash,\n    utils::compute_siloed_note_hash,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\n// Ensure a note's hash exists in the tree without retrieving the entire\n// notes via the oracle.\nfn ensure_note_hash_exists<Note, N>(\n    context: &mut PrivateContext,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n    from_public: bool,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    // Check the note hash via oracle and early out if it doesn't exist.\n    let inner_note_hash = compute_inner_note_hash(note_interface, note);\n    let exists = oracle::notes::check_note_hash_exists(header.nonce, inner_note_hash);\n    assert(exists, \"Note hash does not exist.\");\n\n    let mut note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n    if from_public {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n        // Should remove this once public kernel applies nonces.\n        note_hash_for_read_request = compute_siloed_note_hash(note_interface, note);\n    }\n    context.push_read_request(note_hash_for_read_request);\n}\n\nfn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\nfn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            check_note_header(*context, storage_slot, note_interface, note);\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n        };\n    };\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_getter"
            },
            "48": {
                "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\nfn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\nfn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_hash"
            },
            "52": {
                "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nfn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\nfn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    if (header.nonce == 0) {\n        // when nonce is zero, that means we are reading a pending note (doesn't have a nonce yet),\n        // so we just read the inner_note_hash (kernel will silo by contract address)\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\nfn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    let mut note = deserialise(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/utils"
            },
            "55": {
                "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
            },
            "59": {
                "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\nfn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
            },
            "60": {
                "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\nfn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
            },
            "62": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 6\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 12;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
            },
            "64": {
                "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(checkNoteHashExists)]\nfn check_note_hash_exists_oracle<N>(\n    _nonce: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn check_note_hash_exists(\n    nonce: Field,\n    inner_note_hash: Field,\n) -> bool {\n    check_note_hash_exists_oracle(nonce, inner_note_hash) == 1\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialise the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialise the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_some.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let header = NoteHeader { contract_address, nonce, storage_slot };\n            let is_some = fields[read_offset + 1] as bool;\n            if is_some {\n                let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n                let mut note = deserialise(preimage);\n                set_header(&mut note, header);\n                placeholder_opt_notes[i] = Option::some(note);\n            }\n        };\n    };\n    placeholder_opt_notes\n}\n\nunconstrained fn is_nullifier_emitted(nullifier: Field) -> bool {\n    // TODO\n    nullifier == 0\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/notes"
            },
            "65": {
                "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\nfn storage_read<T, N>(\n    storage_slot: Field,\n    deserialise: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialise(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage"
            },
            "66": {
                "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_message: T)  -> Field {}\n\nunconstrained fn emit_unencrypted_log<T>(message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(message), 0]\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs"
            },
            "68": {
                "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/auth_witness"
            },
            "69": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
            },
            "70": {
                "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
            },
            "72": {
                "source": "use crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALISATION_NULLIFIER};\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle;\nuse dep::std::hash::pedersen_with_separator;\nuse dep::std::option::Option;\n\nstruct ImmutableSingleton<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n\n    unconstrained fn is_initialised(self) -> bool {\n        let nullifier = self.compute_initialisation_nullifier();\n        oracle::notes::is_nullifier_emitted(nullifier)\n    }\n\n    fn initialise(self, note: &mut Note) {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialisation_nullifier();\n        self.context.private\n            .unwrap()\n            .push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n\n    fn compute_initialisation_nullifier(self) -> Field {\n        pedersen_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    }\n\n    fn get_note(self) -> Note {\n        let storage_slot = self.storage_slot;\n        get_note(self.context.private.unwrap(), storage_slot, self.note_interface)\n    }\n\n    unconstrained fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton"
            },
            "73": {
                "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n\nimpl<V> Map<V> {\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/map"
            },
            "74": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialisation::TypeSerialisationInterface;\nuse dep::std::option::Option;\n\nstruct PublicState<T, T_SERIALISED_LEN> {\n    storage_slot: Field,\n    serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n}\n\nimpl<T, T_SERIALISED_LEN> PublicState<T, T_SERIALISED_LEN> {\n    fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialisation_methods,\n        }\n    }\n\n    fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialisation_methods.deserialise)\n    }\n\n    fn write(self, value: T) {\n        let serialise = self.serialisation_methods.serialise;\n        let fields = serialise(value);\n        storage_write(self.storage_slot, fields);\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
            },
            "80": {
                "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialised() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec"
            },
            "82": {
                "source": "use crate::types::type_serialisation::TypeSerialisationInterface;\n\nglobal BOOL_SERIALISED_LEN: Field = 1;\n\nfn deserialiseBool(fields: [Field; BOOL_SERIALISED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serialiseBool(value: bool) -> [Field; BOOL_SERIALISED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerialisationMethods = TypeSerialisationInterface {\n    deserialise: deserialiseBool,\n    serialise: serialiseBool,\n};",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialisation/bool_serialisation"
            },
            "85": {
                "source": "fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils"
            },
            "86": {
                "source": "use dep::aztec::note::note_interface::NoteInterface;\nuse dep::aztec::note::note_header::NoteHeader;\nuse dep::aztec::note::utils::compute_unique_siloed_note_hash;\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal PUBLIC_KEY_NOTE_LEN: Field = 3;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct PublicKeyNote {\n    x: Field,\n    y: Field,\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier\n    header: NoteHeader,\n}\n\nimpl PublicKeyNote {\n    fn new(x: Field, y: Field, owner: Field) -> Self {\n        PublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // Serialise the note as 3 fields\n    fn serialise(self) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n        [self.x, self.y, self.owner]\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(PublicKeyNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialise(preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> PublicKeyNote {\n    PublicKeyNote {\n        x: preimage[0],\n        y: preimage[1],\n        owner: preimage[2],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialise(note: PublicKeyNote) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n    note.serialise()\n}\n\nfn compute_note_hash(note: PublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialise())[0]\n}\n\nfn compute_nullifier(note: PublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: PublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut PublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nglobal PublicKeyNoteMethods = NoteInterface {\n    deserialise,\n    serialise,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/schnorr_account_contract/src/public_key_note"
            }
        }
    }
}
