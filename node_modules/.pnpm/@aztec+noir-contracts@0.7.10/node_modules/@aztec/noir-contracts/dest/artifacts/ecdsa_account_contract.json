{
    "name": "EcdsaAccount",
    "functions": [
        {
            "name": "compute_note_hash_and_nullifier",
            "functionType": "unconstrained",
            "isInternal": false,
            "parameters": [
                {
                    "name": "contract_address",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "nonce",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "storage_slot",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "preimage",
                    "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                            "kind": "field"
                        }
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "array",
                    "length": 4,
                    "type": {
                        "kind": "field"
                    }
                }
            ],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "signing_pub_key_x",
                    "type": {
                        "kind": "array",
                        "length": 32,
                        "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                        }
                    },
                    "visibility": "public"
                },
                {
                    "name": "signing_pub_key_y",
                    "type": {
                        "kind": "array",
                        "length": 32,
                        "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 8
                        }
                    },
                    "visibility": "public"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "entrypoint",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "payload",
                    "type": {
                        "kind": "struct",
                        "path": "aztec::entrypoint::EntrypointPayload",
                        "fields": [
                            {
                                "name": "function_calls",
                                "type": {
                                    "kind": "array",
                                    "length": 4,
                                    "type": {
                                        "kind": "struct",
                                        "path": "aztec::entrypoint::FunctionCall",
                                        "fields": [
                                            {
                                                "name": "args_hash",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "function_selector",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "target_address",
                                                "type": {
                                                    "kind": "field"
                                                }
                                            },
                                            {
                                                "name": "is_public",
                                                "type": {
                                                    "kind": "boolean"
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            {
                                "name": "nonce",
                                "type": {
                                    "kind": "field"
                                }
                            }
                        ]
                    },
                    "visibility": "public"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "is_valid_public",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "set_is_valid_storage",
            "functionType": "open",
            "isInternal": true,
            "parameters": [
                {
                    "name": "message_hash",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                },
                {
                    "name": "value",
                    "type": {
                        "kind": "boolean"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "debug": {
        "debugSymbols": [
            "",
            "eJztnM1qIkEUhd+l1yL1/+OrDFnIJAOBYIbRnfju6TFd3Yd4040Y2sI+KxVuXQ9fdd36Nnps3t5/bw+v77t9szk2ITebX8dm/3e7+/9xf9j+OzQbtWpeds/t62nV/Hl9e2k2+rS6qNLWedtVtu+j76utlcqdya6UOxsjlj+tmqjqiaLriWLqiWJnjOJ87KN4Z79GcfVE8fVECfVEifVESfVEmXPajkdJc07biShzTtuJKHNO24ko9UzbVM+0TfVM21TPtE31TNtUz7RN4rTVyeiyKIU8HsiYklwbP9RGIxUH3dtTtAGL2zBZnLf3CiNO3HuFEWfuVWFs7h8b79R4mBhCV5u06UudF0pdLKUuDwm81NWkWOKarIcnMQWpWBUcxoJkn2GIU3+pMMR7Z6kwxJtvqTDEu3epMMTbf6kwRP9YKozbDehxYGh1u4I9Eo3bHfCRaFBCkQYtFGlQQ5EGPRRpUESRBk0UaVBFkQZdFGhouijSoIsiDboo0qCLIg26KNKgiyINuijSoIsiDboo0qCLAg1DF0UadFGkQRdFGnRRpEEXRRp0UaRBF0UadFGkQRdFGnRRoGHpokiDLoo06KJIgy6KNOiiSIMuijTookiDLoo06KJIgy4KNBxdFGnQRZEGXRRp0EWRBl0UadBFkQZdFGnQRZEGXRRp0EWBhqeLIg26KNKgiyINuijSqNZFvSql3ocpGqkrtWZg4dK1LKo10TuwqNZD78BiXgvNKne1Gdq2LM5Z5nVAyBLdRRbRwIzq1xhlxrO021I2yA9/5uPzuX0Qlebn2ouOcE17l8pf3HjrsL0APfaPVxya2k+OQbyf75JEvBuvSeKdL0miu0D+zWXTH1OjYhptb6LqdxTOhvps/838/qH2Pq7Fw+dc6e/18JQF152RtThJjemRwjd1nNpF4siZWiTGm1okH+KxRcGt5Z+neVU2P1g9kAinp9PpA5jSTgs=",
            "",
            "",
            "eJzd3c2ONMd2neF74fjAqB37/9yK4YFgy4AAQTIszYRz7w5Z9X2kzGx2bnZVdr4eiRAy66xgdsUurq54+t9++cd//u9/96//8M//9C+//PXffnn8F4tf/vpf/+2Xf/lff/dP//7/+Jd//bv//a+//PXxl1/+/p/+x/6/f/vLL//zH/7x73/5q/ztv/3l3y/P2eU1u7xHl/tjdrnMLl9nL//L764SXWs9r9z/7L9erfp8dX3rq9tbX93f+uqnfyL/1Kuf/gH+U69++uf9T7366bfHn3n1OP1u+lOvfvrN96de/a3v1XjrezXe+l6Nt75X463v1XjrezXe+l6Nt75X863v1XzrezW/9F4115+vbum/ffWjy0P65+Wh9vswX3prvzrMl3aCV4f50sbx6jBf2mdeHeZL29Krw3xpF3t1mC9tei8OU1/aI18d5ktb6qvD3GkHrjvtwHWnHbjutAPXnXbgutMOXHfagetOO3DfaQfuO+3AfacduO+0A/edduC+0w7cd9qB+047cN9pB+477cDyuNMWLI877cHyuNMmLI877cLyuNM2LI877cPyuNNGLI877cTyuNNWLI9b7cVyq71YbrUXy632YrnVXiy32ovlVnux3GovllvtxXKrvVhutRevW+3F61Z78brVXrxutRevW+3F61Z78brVXrxutRevW+3F61Z7sd5qL9Zb7cV6q71Yb7UX6632Yr3VXqy32ov1Vnux3mov1lvtxXarvdhutRfbrfZiu9VebLfai+1We/H5IxaXpLnVXnz+gMglaW61F58/3nJJmlvtxV87nPPyNLfai792+OflaW61F3/tcNHL09xqL/7a4aWXp7nVXvy1w1EvT3Orvfhrh69enuZWe/HXDne9PM2V7/C0x8/LM+QgzZXv8E/TXHksyezXM1L7n/UgzYU/xWaeP9O4HaW58Kf4RJoLP1GcSHPhJ4oTaS78RHEizYX7zYk0F+43/0+a+H2aK48nnUhz4SeKE2lO7zfP60/vCM/rZ+iFnD9v8rx+xl7I+VMb/3H9+YMVz+tn8oWcP57wvP70tHpeP3y+57+H/7x++HzPf5v9ef3w+Z7/Tvj/vX6d/9b28/rZ813nv/n8vH72fNdj9nzX+e/3Pq+fPd91/juyz+tnz3ed/57pf1x//pugz+uHz/f8tymf1w+f7/lvJD6vHz7f89/qe14/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",
            ""
        ],
        "fileMap": {
            "1": {
                "source": "mod ecdsa_public_key_note;\n\n// Account contract that uses ECDSA signatures for authentication on the same curve as Ethereum.\n// The signing key is stored in an immutable private note and should be different from the signing key.\ncontract EcdsaAccount {\n    use dep::std;\n    use dep::std::option::Option;\n    use dep::aztec::{\n        abi::CallContext,\n        constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n        context::{PrivateContext, PublicContext, Context},\n        entrypoint::{EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE},\n        log::emit_encrypted_log,\n        note::{\n            note_header::NoteHeader,\n            utils as note_utils,\n        },\n        oracle::get_public_key::get_public_key,\n        oracle::auth_witness::get_auth_witness,\n        state_vars::immutable_singleton::ImmutableSingleton,\n        account::AccountActions,\n    };\n\n    use crate::ecdsa_public_key_note::{\n        EcdsaPublicKeyNote, EcdsaPublicKeyNoteInterface, ECDSA_PUBLIC_KEY_NOTE_LEN,\n    };\n\n    struct Storage {\n        public_key: ImmutableSingleton<EcdsaPublicKeyNote, ECDSA_PUBLIC_KEY_NOTE_LEN>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                public_key: ImmutableSingleton::new(context, 1, EcdsaPublicKeyNoteInterface),\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Creates a new account out of an ECDSA public key to use for signature verification\n    #[aztec(private)]\n    fn constructor(\n        signing_pub_key_x: pub [u8;32],\n        signing_pub_key_y: pub [u8;32],\n    ) {\n        let storage = Storage::init(Context::private(&mut context));\n        \n        let this = context.this_address();\n        let mut pub_key_note = EcdsaPublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.public_key.initialise(&mut pub_key_note);\n        \n        emit_encrypted_log(\n            &mut context,\n            this,\n            storage.public_key.storage_slot,\n            get_public_key(this),\n            pub_key_note.serialise(),\n        );\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_field: Field) -> pub bool {\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n        let public_key = storage.public_key.get_note();\n        \n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(message_field);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 { signature[i] = witness[i] as u8; }\n\n        // Verify payload signature using Ethereum's signing scheme\n        // Note that noir expects the hash of the message/challenge as input to the ECDSA verification.\n        let hashed_message: [u8; 32] = std::hash::sha256(message_field.to_be_bytes(32));\n        let verification = std::ecdsa_secp256k1::verify_signature(public_key.x, public_key.y, signature, hashed_message);\n        assert(verification == true);\n\n        true\n    }\n\n    // Computes note hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader { contract_address, nonce, storage_slot };\n        note_utils::compute_note_hash_and_nullifier(EcdsaPublicKeyNoteInterface, note_header, preimage)\n    }\n}\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/ecdsa_account_contract/src/main"
            },
            "3": {
                "source": "mod poseidon;\n\n#[foreign(sha256)]\nfn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\nfn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\nfn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\nfn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\nfn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\nfn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\nfn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
                "path": "std/hash"
            },
            "15": {
                "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
                "path": "std/grumpkin_scalar"
            },
            "16": {
                "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
                "path": "std/grumpkin_scalar_mul"
            },
            "20": {
                "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\nfn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\nfn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\nfn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\nfn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\nfn modulus_le_bytes() -> [u8] {}\n",
                "path": "std/field"
            },
            "31": {
                "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
                "path": "std/option"
            },
            "33": {
                "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi"
            },
            "35": {
                "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\nfn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/address"
            },
            "38": {
                "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        self.nullified_commitments.push(nullified_commitment);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context"
            },
            "39": {
                "source": "use crate::abi;\nuse crate::types::vec::BoundedVec;\nuse crate::context::PrivateContext;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;    \nuse crate::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nuse dep::std::hash;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    hash::pedersen_with_separator(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )[0]\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/entrypoint"
            },
            "40": {
                "source": "use crate::context::PrivateContext;\nuse crate::oracle;\nuse crate::types::point::Point;\n\nfn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\nfn emit_unencrypted_log<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let _ = oracle::logs::emit_unencrypted_log(log);\n    context.accumulate_unencrypted_logs(log);\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/log"
            },
            "45": {
                "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\nfn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialise = note_interface.serialise;\n    let preimage = serialise(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0 };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\nfn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // 0 nonce implies \"transient\" nullifier (must nullify a commitment in this TX).\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.nonce == 0) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/lifecycle"
            },
            "46": {
                "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort},\n    note_interface::NoteInterface,\n    note_header::NoteHeader,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n    utils::compute_inner_note_hash,\n    utils::compute_siloed_note_hash,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\n// Ensure a note's hash exists in the tree without retrieving the entire\n// notes via the oracle.\nfn ensure_note_hash_exists<Note, N>(\n    context: &mut PrivateContext,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n    from_public: bool,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    // Check the note hash via oracle and early out if it doesn't exist.\n    let inner_note_hash = compute_inner_note_hash(note_interface, note);\n    let exists = oracle::notes::check_note_hash_exists(header.nonce, inner_note_hash);\n    assert(exists, \"Note hash does not exist.\");\n\n    let mut note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n    if from_public {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n        // Should remove this once public kernel applies nonces.\n        note_hash_for_read_request = compute_siloed_note_hash(note_interface, note);\n    }\n    context.push_read_request(note_hash_for_read_request);\n}\n\nfn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\nfn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            check_note_header(*context, storage_slot, note_interface, note);\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n        };\n    };\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_getter"
            },
            "48": {
                "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\nfn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\nfn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/note_hash"
            },
            "52": {
                "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\nfn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\nfn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    if (header.nonce == 0) {\n        // when nonce is zero, that means we are reading a pending note (doesn't have a nonce yet),\n        // so we just read the inner_note_hash (kernel will silo by contract address)\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\nfn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    let mut note = deserialise(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/note/utils"
            },
            "55": {
                "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
            },
            "59": {
                "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\nfn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
            },
            "60": {
                "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\nfn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
            },
            "62": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 6\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 12;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
            },
            "64": {
                "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(checkNoteHashExists)]\nfn check_note_hash_exists_oracle<N>(\n    _nonce: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained fn check_note_hash_exists(\n    nonce: Field,\n    inner_note_hash: Field,\n) -> bool {\n    check_note_hash_exists_oracle(nonce, inner_note_hash) == 1\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialise the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialise the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialise = note_interface.deserialise;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_some.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let header = NoteHeader { contract_address, nonce, storage_slot };\n            let is_some = fields[read_offset + 1] as bool;\n            if is_some {\n                let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n                let mut note = deserialise(preimage);\n                set_header(&mut note, header);\n                placeholder_opt_notes[i] = Option::some(note);\n            }\n        };\n    };\n    placeholder_opt_notes\n}\n\nunconstrained fn is_nullifier_emitted(nullifier: Field) -> bool {\n    // TODO\n    nullifier == 0\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/notes"
            },
            "65": {
                "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\nfn storage_read<T, N>(\n    storage_slot: Field,\n    deserialise: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialise(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/storage"
            },
            "66": {
                "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_message: T)  -> Field {}\n\nunconstrained fn emit_unencrypted_log<T>(message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(message), 0]\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs"
            },
            "68": {
                "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/auth_witness"
            },
            "69": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
            },
            "70": {
                "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
            },
            "72": {
                "source": "use crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALISATION_NULLIFIER};\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle;\nuse dep::std::hash::pedersen_with_separator;\nuse dep::std::option::Option;\n\nstruct ImmutableSingleton<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n\n    unconstrained fn is_initialised(self) -> bool {\n        let nullifier = self.compute_initialisation_nullifier();\n        oracle::notes::is_nullifier_emitted(nullifier)\n    }\n\n    fn initialise(self, note: &mut Note) {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialisation_nullifier();\n        self.context.private\n            .unwrap()\n            .push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n\n    fn compute_initialisation_nullifier(self) -> Field {\n        pedersen_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    }\n\n    fn get_note(self) -> Note {\n        let storage_slot = self.storage_slot;\n        get_note(self.context.private.unwrap(), storage_slot, self.note_interface)\n    }\n\n    unconstrained fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton"
            },
            "73": {
                "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n\nimpl<V> Map<V> {\n    fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n\n    fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/map"
            },
            "74": {
                "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialisation::TypeSerialisationInterface;\nuse dep::std::option::Option;\n\nstruct PublicState<T, T_SERIALISED_LEN> {\n    storage_slot: Field,\n    serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n}\n\nimpl<T, T_SERIALISED_LEN> PublicState<T, T_SERIALISED_LEN> {\n    fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialisation_methods: TypeSerialisationInterface<T, T_SERIALISED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialisation_methods,\n        }\n    }\n\n    fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialisation_methods.deserialise)\n    }\n\n    fn write(self, value: T) {\n        let serialise = self.serialisation_methods.serialise;\n        let fields = serialise(value);\n        storage_write(self.storage_slot, fields);\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
            },
            "80": {
                "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialised() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec"
            },
            "82": {
                "source": "use crate::types::type_serialisation::TypeSerialisationInterface;\n\nglobal BOOL_SERIALISED_LEN: Field = 1;\n\nfn deserialiseBool(fields: [Field; BOOL_SERIALISED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serialiseBool(value: bool) -> [Field; BOOL_SERIALISED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerialisationMethods = TypeSerialisationInterface {\n    deserialise: deserialiseBool,\n    serialise: serialiseBool,\n};",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/type_serialisation/bool_serialisation"
            },
            "85": {
                "source": "fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils"
            },
            "86": {
                "source": "use dep::aztec::note::note_interface::NoteInterface;\nuse dep::aztec::note::note_header::NoteHeader;\nuse dep::aztec::note::utils::compute_unique_siloed_note_hash;\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier\n    header: NoteHeader,\n}\n\nimpl EcdsaPublicKeyNote {\n    fn new(x: [u8; 32], y: [u8; 32], owner: Field) -> Self {\n        EcdsaPublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // Serialise the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = owner\n    fn serialise(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let bytex: Field = self.x[31 - i] as Field;\n          x = x + (bytex * mul);\n          let bytey: Field = self.y[31 - i] as Field;\n          y = y + (bytey * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n        \n        let res: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] = [x, last_x, y, last_y, self.owner];\n        res\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(EcdsaPublicKeyNoteInterface, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialise(preimage: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n    let mut x: [u8; 32] = [0;32];\n    let mut y: [u8; 32] = [0;32];\n\n    let part_x = preimage[0].to_be_bytes(32);\n    for i in 0..31 { x[i] = part_x[i + 1]; }\n    x[31] = preimage[1].to_be_bytes(32)[31];\n\n    let part_y = preimage[2].to_be_bytes(32);\n    for i in 0..31 { y[i] = part_y[i + 1]; }\n    y[31] = preimage[3].to_be_bytes(32)[31];\n\n    EcdsaPublicKeyNote {\n        x,\n        y,\n        owner: preimage[4],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialise(note: EcdsaPublicKeyNote) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n    note.serialise()\n}\n\nfn compute_note_hash(note: EcdsaPublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialise())[0]\n}\n\nfn compute_nullifier(note: EcdsaPublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: EcdsaPublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut EcdsaPublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nglobal EcdsaPublicKeyNoteInterface = NoteInterface {\n    deserialise,\n    serialise,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/ecdsa_account_contract/src/ecdsa_public_key_note"
            }
        }
    }
}
