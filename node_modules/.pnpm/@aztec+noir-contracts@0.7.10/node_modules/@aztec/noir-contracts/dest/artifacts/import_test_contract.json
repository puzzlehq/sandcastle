{
    "name": "ImportTest",
    "functions": [
        {
            "name": "callNoArgs",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "callOpenFn",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "constructor",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "main",
            "functionType": "secret",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [],
            "bytecode": "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",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        },
        {
            "name": "pubCallOpenFn",
            "functionType": "open",
            "isInternal": false,
            "parameters": [
                {
                    "name": "target",
                    "type": {
                        "kind": "field"
                    },
                    "visibility": "private"
                }
            ],
            "returnTypes": [
                {
                    "kind": "struct",
                    "path": "aztec::abi::PublicCircuitPublicInputs",
                    "fields": [
                        {
                            "name": "call_context",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::CallContext",
                                "fields": [
                                    {
                                        "name": "msg_sender",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "storage_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "portal_contract_address",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "is_delegate_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_static_call",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    },
                                    {
                                        "name": "is_contract_deployment",
                                        "type": {
                                            "kind": "boolean"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "args_hash",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "return_values",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "contract_storage_update_requests",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageUpdateRequest",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "old_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "new_value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "contract_storage_read",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "struct",
                                    "path": "aztec::abi::ContractStorageRead",
                                    "fields": [
                                        {
                                            "name": "storage_slot",
                                            "type": {
                                                "kind": "field"
                                            }
                                        },
                                        {
                                            "name": "value",
                                            "type": {
                                                "kind": "field"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "public_call_stack",
                            "type": {
                                "kind": "array",
                                "length": 4,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_commitments",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_nullifiers",
                            "type": {
                                "kind": "array",
                                "length": 16,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "new_l2_to_l1_msgs",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_logs_hash",
                            "type": {
                                "kind": "array",
                                "length": 2,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "unencrypted_log_preimages_length",
                            "type": {
                                "kind": "field"
                            }
                        },
                        {
                            "name": "block_data",
                            "type": {
                                "kind": "struct",
                                "path": "aztec::abi::HistoricBlockData",
                                "fields": [
                                    {
                                        "name": "private_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "nullifier_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "contract_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "l1_to_l2_messages_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "blocks_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "public_data_tree_root",
                                        "type": {
                                            "kind": "field"
                                        }
                                    },
                                    {
                                        "name": "global_variables_hash",
                                        "type": {
                                            "kind": "field"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "prover_address",
                            "type": {
                                "kind": "field"
                            }
                        }
                    ]
                }
            ],
            "bytecode": "",
            "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
        }
    ],
    "debug": {
        "debugSymbols": [
            "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",
            "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
            "eJzdnd1O3EgQhd/F1yhy/1Y3rxLlAm0SKVJEVoE7xLvHS3DPZNzbpVn1FudwBUht+FwM5+uxmTNPy/cff909fvtx/7DcPi1huf34tDz8fXf/z1cPj3c/H5fb9Wb5cv95+/h8s3z99v3Lcuuebw6rXIgpvK7cPpfUVofQWx59jfvyGETOl3+6WSIMSYIhyTAkAkNSYEgqDIlbcVAcDorHQcHJWYcTtA4naR1O1DqcrHU4Yetw0tbjpK3HSVuPk7YeJ209Ttp6nLT1OGnrcdLW46Stx0nbgJO2ASdtA07aBpy0DThpG3DSNlimbUzSUFIMlyiWaaugWKatgmKZtmOUaJm2Copl2ioolmmroFimrYJimbYKimXaKig4aRtx0jbipG3ESduEk7YJJ20TTtqmbtq6NbT9luQxUHRh/wHRr7WtLbmzWMJaXxdL8PEEU/7LbaxuPJOwd/OchL0rABL2rjFI2LuKIWHvOomDPXclRsLetR4Je1eTJOzEXs3EXs3EXs3EXs3EXs3EXs3EXhVirwqxV4XYq0LsVSH2qhB7VYi9KsReFWKvCrFXC7FXC7FXC7FXC7FXC7FXC7FXC7FXC7RXx/dsCrRXFXZor47ZK7RXFXZoryrs0F5V2KG9qrBDe1Vhh/aqwg7tVYWd2KuV2KuV2KtuJRarW4nN6lZitW6UzPDWck2xwZd0Dv9CY63L6EY01gKseaeJRca/WKllRy9ulQO6tf8molvr7wr0cvrbK8HnA7q1/eah95sNONCtzTcR3dp7E9GtrTcR3dp5E9GtBTkRHdimGjqwTTV0Xpv2mygo0PvNFRzovDbtN2NwoEPbNOWGLuGADm3TMTq0Tcfo0DYdo0PbdIwObdMxOrRNh+j9ZhIOdGibjtGhbTpG57Vpv1mFA53Xpv3mFg50Xpv2m2FA0OO6f+cS/7zL8oKObNMxer95hgMd2aYKOrJNFXRkmyroyDZV0JFtqqAj21RBR7apgs5r035TEAV6v1mIA53Xpv3mIg50ZJtuP3pHF5EDOrJNFXRkmyroyDZV0JFtqqAj21RBR7bpGN284mgiOrJNFXRkmyrovDY1rzeaiM5rU/Nyo4novDY1rza6Br24dpG6hMNFavNmo3no5sVGE9GRbaqgI9tUQUe2qYKObFMFHdmmCjqyTRV0ZJsq6Lw2Ne8zmoduXmc0EZ3XpuZlRhPRoW0q7d+RSz3s182rjCaiQ9t0jA5t0zE6tE3H6NA2HaND23SIbl5iNBEd2qZjdGibjtF5bWpeYDQRndem5vVFE9F5bWpeXnQFunN+9TuG894d4IF9qsF78/aiqfDATtXhga2qwwN7VYcHNqsOD+xWHR7Yrjo8sF91eGLDeuSGJBUeuSNJh2c2LHJPkg6PbdhYT/B1PcBDGzaspcGHfFng55Hbkjbg0jBc9Ed4aMPGeAYv5QAPbdhS21sXu5qOj3low9bcHvNb8FzedfLIrUkbcCvcdJtOL18c4ZF7kzZg33J+i/nLSx8euTlpAw6pwQd3kBRyd9IGnE6TDzmMl8e8/3XHcgqmXDtLk2/nl+L5C9TD76Egm/vNhoK8I3izoSDvNK4bSmq72eRlPJQsZd885uL+GMpxcaitAS3U8wvHrxNE3u5wTBB5z8UxQeSNH8cEoXefDBNELjv7/yYoKe3bU0nVjSfoN9DXxT6V4wSh9+EUE3w/TwaumWCW/fxEDu/U55FL5d5uKO/nyUBoJ5rO9vfbUF7O8/3s70fn6db4ob8PLzuPP/Nbir8Pyh+6G6fTNcKUToGU0n5Qd6+gHdS/CaMe1XXCvx/1/PwLmda+xA==",
            "eJzV3d2OZLlxruF7meOBkcGfIEO3YvhA2LYBA4a8saUzQfduajuruuXm9OI3uYr58sgNY62sCLFWMOvLfDh//eU//+v//PEv//Fff/rzL3/46y+Pfyr+yx/++a+//Pn//vFPf/9//Pkvf/x/f/nlD49ff/m3P/3r+L9/+/WXf/+P//y3X/5gf/uXX/9+edMu79rlIV1eH9rlpl2eVi//9YerLKeUnleOf9dvV+f8fPX8pa9evvTV65e++vJv5O969eVf4N/16su/77/r1Zcfj9/z6r78NP2uV19++H7Xq3/ps+pf+qz6lz6r/qXPqn/ps+pf+qz6lz6r/qXPavvSZ7V96bPaXnpWS82fr15a/f7VZ5e7xeflnsuPxbz0aN9dzEuT4O5iXhocdxfz0py5u5iXxtLdxbw0xe4u5qWhd3Mx/aUZeXcxL43Uu4shTeBOmsCdNIE7aQJ30gTupAncSRO4kyZwkCZwkCZwkCZwkCZwkCZwkCZwkCZwkCZwkCZwkCawPUgj2B6kGWwP0hC2B2kK24M0hu1BmsP2IA1ie5AmsT1Io9geqFlsqFlsqFlsqFlsqFlsqFlsqFlsqFlsqFlsqFlsqFmcULM4oWZxQs3ihJrFCTWLE2oWJ9QsTqhZnFCzOKFmcUbN4oyaxRk1izNqFmfULM6oWZxRszijZnFGzeKMmsUFNYsLahYX1CwuqFlcULO4oGbxOrHYUg1qFq8DkS3VoGbxOm/ZUg1qFr+Gc26vBjWLX8M/t1eDmsWv4aLbq0HN4tfw0u3VoGbxazjq9mpQs/g1fHV7NahZ/Bruur2anU94K4/Py5vbpJqdT/hlNTtZUinfjNT4d55Us/G3uJTaPqupZVbNxt/ihWo2vqNYqGbjO4qFaja+o1ioZuO8Wahm47z5X9X4j9Xs5EkL1Wx8R7FQzfK8eV6/PBGe12uHXti6N3lerx17Yetq43+uX4cVz+u1ky9snSc8r1/erZ7Xi+u7/j385/Xi+q5/m/15vbi+698J///Xp/VvbT+v19Y3rX/z+Xm9tr7poa1vWv9+7/N6bX3T+ndkn9dr65vWv2f6P9evfxP0eb24vuvfpnxeL67v+jcSn9eL67v+rb7n9eL6rn8z7nm9uL7r3y57Xi+u7/o3tJ7Xi+u7/i2n5/Xi+q5/U+h5vbi+69+2eV4vru/6N1ae14vru/6tj+f14vquf3Pieb24vuvfPnheL67v+if4z+vF9V3/FPx5vbi+658kP68X13f909jn9eL6iofGJfHUuCQeG5fEc+OSeHBcEk+OS+ufTj2vF9d3/ROe5/Xi+q5/SvK8Xlzf9U8anteL67ue1j+vF9d3PfF+Xi+u73pq/LxeXN/1Y7ue14vru54zP68X13f9+Kvn9eL6rmfBz+vF9V3PU5/Xi+u7nkk+rxfXdz3Xe14vru96Nva8Xlzf9QNwnteL6yvmV0nMr5KYXyUxv0pifpXE/CqJ+VUS86sk5ldJzK+SmF8lMb9KYn6VxPwqiflVEvOrLOZXWcyvsphfZTG/ymJ+lcX8Kov5VRbzqyzmV1nMr7KYX2Uxv8pifpXF/CqL+VUW86ss5ldZzK+ymF9lMb/KYn6Vxfwqi/lVFvOrLOZXWcyvsphfZTG/ymJ+lcX8Kov5VRbzqyzmV1nMr7KYX2Uxv8pifpXF/CqL+VUW86ss5ldZzK+ymF9lMb/KYn6Vxfwqi/lVFvOrLOZXWcyvsphfZTG/ymJ+lcX8Kov5VRbzqyzmV1nMr7KYX2Uxv8pifpXF/CqL+VUW86ss5ldZzK+ymF9lMb/KYn6Vxfwqi/lVFvOrLOZXWcyvsphfZTG/ymJ+lcX8Kov5VRbzqyzmV1nMr7KYX2Uxv8pifpXF/CqL+VUW86ss5ldZzK+ymF9lMb/KYn6Vxfwqi/lVFvOrLOZXWcyvsphfZTG/KmJ+VcT8qoj5VRHzqyLmV0XMr4qYXxUxvypiflXE/KqI+VUR86si5ldFzK+KmF8VMb8qYn5VxPyqiPlVEfOrIuZXRcyviphfFTG/KmJ+VcT8qoj5VRHzqyLmV0XMr4qYXxUxvypiflXE/KqI+VUR86si5ldFzK+KmF8VMb8qYn5VxPyqiPlVEfOrIuZXRcyvivof7VT/q53qf7ZTzK+KmF8VMb8qYn5VxPyqiPlVEfOrIuZXRcyviphfFTG/KmJ+VcT8qoj5VRHzqyLmV0XMr4qYXxUxvypiflXE/KqI+VUR86si5ldFzK+KmF8VMb8qYn5VxPyqiPlVEfOrIuZXRcyviphfFTG/KmJ+VcT8qoj5VRHzqyLmV0XMr4qYXxUxvypiflXE/KqI+VUR86si5ldFzK+KmF8VMb+qYn5VxfyqivlVFfOrKuZXVcyvqphfVTG/qmJ+VcX8qor5VRXzqyrmV1XMr6qYX1Uxv6piflXF/KqK+VUV86sq5ldVzK+qmF9VMb+qYn5VxfyqivlVFfOrKuZXVcyvqphfVTG/qmJ+VcX8qor5VRXzqyrmV1XMr6qYX1Uxv6piflXF/KqK+VUV86sq5ldVzK+qmF9VMb+qYn5VxfyqivlVFfOrKuZXVcyvqphfVTG/qmJ+VcX8qor5VRXzqyrmV1XMr6qYX1Uxv6piflXF/KqK+VUV86sq5ldVzK+qmF9VMb+qYn5VxfyqivlVFfOrKuZXVcyvqphfVTG/qmJ+VcX8qor5VRXzqyrmV1XMr6qYX1Uxv6piflXF/KqK+VUV86sq5ldVzK+qmF9VMb+qYn5VxfyqivlVFfMrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/MrF/OrJuZXTcyvmphfNTG/amJ+1cT8qon5VRPzqybmV03Mr5qYXzUxv2piftXE/KqJ+VUT86sm5ldNzK+amF81Mb9qYn7VxPyqiflVE/OrJuZXTcyvmphfNTG/amJ+1cT8qon5VRPzqybmV03Mr5qYXzUxv2piftXE/KqJ+VUT86sm5ldNzK+amF81Mb9qYn7VxPyqiflVE/OrJuZXTcyvmphfNTG/amJ+1cT8qon5VRPzqybmV03Mr5qYXzUxv2piftXE/KqJ+VUT86sm5ldNzK+amF81Mb9qYn7VxPyqiflVE/OrJuZXTcyvmphfNTG/amJ+1cT8qon5VRPzqybmV03Mr5qYXzUxv2piftXE/KqJ+VUT86sm5ldNzK+amF81Mb9qYn7VxPyqiflVE/OrJuZXTcyvmphfNTG/6mJ+1cX8qov5VRfzqy7mV13Mr7qYX3Uxv+piftXF/KqL+VUX86su5lddzK+6mF91Mb/qYn7Vxfyqi/lVF/OrLuZXXcyvuphfdTG/6mJ+1cX8qov5VRfzqy7mV13Mr7qYX3Uxv+piftXF/KqL+VUX86su5lddzK+6mF91Mb/qYn7Vxfyqi/lVF/OrLuZXXcyvuphfdTG/6mJ+1cX8qov5VRfzqy7mV13Mr7qYX3Uxv+piftXF/KqL+VUX86su5lddzK+6mF91Mb/qYn7Vxfyqi/lVF/OrLuZXXcyvuphfdTG/6mJ+1cX8qov5VRfzqy7mV13Mr7qYX3Uxv+piftXF/KqL+VUX86su5lddzK+6mF91Mb/qYn7Vxfyqi/lVF/OrLuZXXcyvuphfdTG/6mJ+1cX8qov5VRfzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzqxDzK3uIAda4QVvhcYO2xOMGbY3HDdoijxu0VR43aMs8btDWedygLfS4QV1pMcoaN6grLYZZ4wZ1pcU4a9ygrrQYaI0b1JUWI61xg7rSYqg1blBXWoy1xg3qSovB1rhBXWkx2ho3qCsthlvjBnWlxXhr3KCutBhwjRvUlRYjrnGDutJiyDVuUFdajLnGDepKi0HXuEFdaTHqGjeoKy2GXeMGdaXFuGvcoK60GHiNG9SVFiOvcYO60mLoNW5QV1qMvcYN6kqLwde4QV1pMfoaN6grLYZf4wZ1pcX4a9ygrrQYgI0b1JUWI7Bxg7rSYgg2blBXWozBxg3qSotB2LhBXWkxChs3qCsthmHjBnWlxThs3KCutBiIjRvUlRYjsXGDutJiKDZuUFdajMXGDepKi8HYuEFdaTEaGzeoKy2GY+MGdaXFeGzcoK60GJCNG9SVFiOycYO40qZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZKZmZEnNyJKakSU1I0tqRpbUjCypGVlSM7KkZmRJzciSmpElNSNLakaW1IwsqRlZUjOypGZkSc3IkpqRJTUjS2pGltSMLKkZWVIzsqRmZEnNyJKakSU1I0tqRpbUjCypGVlSM7KkZmRJzcjSPCPLZh/35PEnxne3/frDtaXH89L6SJ9X9sfnT5j+atz6E6a/S7f+hOkvn/IT6qPY548o3/0M//wZ09/Xm3/G9Ff85p8xfSru/RnzCPLmnzF99m7+GdPH9eaf8fITvvAzXn7GF37Gy0/5ws/Y8JzPc96bf8aG53yeJt/7M+YB9M0/Y8NzPo+5b/4ZG57zeZh+88/Y8JzPI3vtZ3j++BmWy/c/48eLx18dqT+vHv8u/fPy3CeXW3b7eD8y/v3dq+f82cENU+TNHdwwo97cwQ0T8L0dzD/2OaqDG6b3mzu4YW94cwc37Dxv7uCGfe3NHdywa765g+P35PmnvUd1cPyePP88/KQO5h/QH9XB8Xvy/CsMR3Vw/J48/5LHUR0cvyfPvwZzVAfH78nzLwod1cHxe/L8q1RHdXD8njz/stlRHRy/J8+/jndUB8fvyfMvLB7VwfF78vwrnUd1cPyePP/S61EdHL8nz78WfFQHx+/J8y9OH9XB8Xvy/KvlR3Vw/J48//L9UR2cvifnOU84qoPT9+Q8BxxHdXD6npwfp+/JeW5ujurg9D05z1XSUR2cvifnuds6qYM5JDuqg+P35Dm1O6qD4/fkOUY8qoPj9+Q51zyqg+P35DloPaqD4/fkOfk9qoPj9+Q5ij6qg+P35DkbP6qD4/fkOaw/qoPj9+T50QNHdXD8njw/nOGoDo7fk+fHVxzVwfF78uvndby9g+P35DvOG3lzB8fvyXeclfLmDo7fk+845+XNHRy/J99xRs2bOzh+T77jfJ03d3D8nnzH2UBv7uD4PfmOc43e28EdJwF9ZQetPD47aG6zDuDTdKED9pNcSkofHYx/51kH7Ce5lNo+O6hl2gH7SV7pgP3ueqED+Ok/Kx2w312vdMDeD1Y6YO8H/6sDn3XAfne90gH73fVKB9v35Patg/6I7zv4KGn7Jntd0vZd87qk7dvgZUn7T9C5Lmn7RnVd0vad57qk7VvJdUnb94brkrYP++uSeNN7/8Ev1yXxpvf+o1kuS9p/1sp1Sbzpvf80lOuSeNN7/3kl1yXxpvf+E0WuS+JN7/1nflyXxJve+0/luC6JN733n5txXRJveu8/2eK6JN703n/2xHVJvOm9/3SI65Jw07vsP7/huiTc9C77T1i4Lgk3vcsDN73L/kMNrkvCTe+y/9iB65Jw07vsPxjgsqT90v+6JN703m/xr0viTe/9Wv66JN703u/Zr0viTe/94vy6JN703m/Cr0viTe/9avu6JN703u+qr0viTe/98vm6JN703m+Tr0viTe/9evi6JN703u97r0viTe/9Ave6JN703m9kr0viTe/9ivW6JN703u9Mr0viTe/9EvS6JN703m81r0viTe/9mvK6JN703u8dr0viTe/Km96VN733y9PrknjTu/Kmd+VN7/2C9rok3vTeb1yvS+JN7/0K9bok3vTe70SvS+JN7/2S87ok3vTmWcvCs5aFZy0Lz1oWnrUsPGtZeNay8Kxl4VnLwrOWhWctC89aFp61LDxrWXjWsvCsZeFZy8KzloVnLQvPWhaetSw8a1l41rLwrGXhWcvCs5aFZy0Lz1oWnrUsPGtZeNay8Kxl4VnLwrOWlWctK89aVp61rDxrWR+46V151rLyrGXlWcvKs5aVZy0rz1pWnrWsPGtZeday8qxl5VnLyrOWlWctK89aVp61rDxrWXnWsvKsZeVZy8qzlpVnLSvPWlaetaw8a1l51rLyrGXlWcvKs5aVZy0rz1pWnrWsPGtZeday8qxl5VnLyrOWlWctK89aVp61rDxrWXnWsvKsZeVZy8qzlpVnLSvPWlaetaw8a1l51rLyrGXlWcvKs5aVZy0rz1pWnrWsPGtZeday8qxl5VnLyrOWlWctK89aVp61rDxrWXnWsvKsZeVZy8qzlpVnLSvPWlaetaw8a1l51rLyrGXlWcvKs5aVZy0rz1pWnrWsPGtZeday8qxl5VnLyrOWlWctK89aVp61rDxrWXnWsvKsZeVZy8qzlpVnLSvPWlaetXSetXSetXSetXSetfQHbno7z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o6z1o2nrVsPGvZeNay8axle+Cmd+NZy8azlo1nLRvPWjaetWw8a9l41rLxrGXjWcvGs5aNZy0bz1o2nrVsPGvZeNay8axl41nLxrOWjWctG89aNp61bDxr2XjWsvGsZeNZy8azlo1nLRvPWjaetWw8a9l41rLxrGXjWcvGs5aNZy0bz1o2nrVsPGvZeNay8axl41nLxrOWjWctG89aNp61bDxr2XjWsvGsZeNZy8azlo1nLRvPWjaetWw8a9l41rLxrGXjWcvGs5aNZy0bz1o2nrVsPGvZeNay8axl41nLxrOWjWctG89aNp61bDxr2XjWsvGsZeNZy8azlo1nLRvPWjaetWw8a9l41rLxrGXjWcvGs5aNZy0bz1o2nrVsPGvZeNay8axl41nLxrOWjWctG89aNp61bDxr2XjWsvOsZedZy86zlp1nLfsDN707z1p2nrXsPGvZeday86xl51nLzrOWnWctO89adp617Dxr2XnWsvOsZedZy86zlp1nLTvPWnaetew8a9l51rLzrGXnWcvOs5adZy07z1p2nrXsPGvZeday86xl51nLzrOWnWctO89adp61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t5YLJfGm93ZruVASb3pvt5YLJeGmd9luLRdKwk3vst1aLpSEm97lgZveZbu1XCgJN73Ldmu5UBJuepft1vK6pO3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJN7+3WcqEk3vTebi0XSuJNb561LDxrWXjWsvCsZeFZy8KzloVnLQvPWhaetSw8a1l41rLwrGXhWcvCs5aFZy0Lz1oWnrUsPGtZeNay8Kxl4VnLwrOWhWctC89aFp61LDxrWXjWsvCsZeFZy8KzloVnLQvPWhaetSw8a1l41rLwrGXhWcvCs5aVZy0rz1pWnrWsPGtZH7jpXXnWsvKsZeVZy8qzlpVnLSvPWlaetaw8a1l51rLyrGXlWcvKs5aVZy0rz1pWnrWsPGtZeday8qxl5VnLyrOWlWctK89aVp61rDxrWXnWsvKsZeVZy8qzlpVnLSvPWlaetaw8a1l51rLyrGXlWcvKs5aVZy0rz1pWnrWsPGtZeday8qxl5VnLyrOWlWctK89aVp61rDxrWXnWsvKsZeVZy8qzlpVnLSvPWlaetaw8a1l51rLyrGXlWcvKs5aVZy0rz1pWnrWsPGtZeday8qxl5VnLyrOWlWctK89aVp61rDxrWXnWsvKsZeVZy8qzlpVnLSvPWlaetaw8a1l51rLyrGXlWcvKs5aVZy0rz1pWnrWsPGtZeday8qxl5VnLyrOWlWctK89aVp61dJ61dJ61dJ61dJ619AduejvPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjrPWjaetWw8a9l41rLxrGV74KZ341nLxrOWjWctG89aNp61bDxr2XjWsvGsZeNZy8azlo1nLRvPWjaetWw8a9l41rLxrGXjWcvGs5aNZy0bz1o2nrVsPGvZeNay8axl41nLxrOWjWctG89aNp61bDxr2XjWsvGsZeNZy8azlo1nLRvPWjaetWw8a9l41rLxrGXjWcvGs5aNZy0bz1o2nrVsPGvZeNay8axl41nLxrOWjWctG89aNp61bDxr2XjWsvGsZeNZy8azlo1nLRvPWjaetWw8a9l41rLxrGXjWcvGs5aNZy0bz1o2nrVsPGvZeNay8axl41nLxrOWjWctG89aNp61bDxr2XjWsvGsZeNZy8azlo1nLRvPWjaetWw8a9l41rLxrGXjWcvGs5aNZy0bz1o2nrVsPGvZeNay86xl51nLzrOWnWct+wM3vTvPWnaetew8a9l51rLzrGXnWcvOs5adZy07z1p2nrXsPGvZeday86xl51nLzrOWnWctO89adp617Dxr2XnWsvOsZedZy86zlp1nLTvPWnaetew8a9l51rLzrGXnWcvOs5adZy07z1p2nrXsPGvZeday86xl51nLzrOWnWctO89adp617Dxr2XnWsvOsZedZy86zlp1nLTvPWnaetew8a9l51rLzrGXnWcvOs5adZy07z1p2nrXsPGvZeday86xl51nLzrOWnWctO89adp617Dxr2XnWsvOsZedZy86zlp1nLTvPWnaetew8a9l51rLzrGXnWcvOs5adZy07z1p2nrXsPGvZeday86xl51nLzrOWnWctO89adp617Dxr2XnWsvOsZedZy86zlsGzlsGzlsGzlsGzlvHATe/gWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvgWcvg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"
        ],
        "fileMap": {
            "1": {
                "source": "mod test_contract_interface;\n\n// Contract that uses the autogenerated interface of the Test contract for calling its functions.\n// Used for testing calling into other contracts via autogenerated interfaces.\ncontract ImportTest {\n    use crate::test_contract_interface::{\n        TestPrivateContextInterface,\n        TestPublicContextInterface,\n        AStructTestCodeGenStruct,\n        ADeepStructTestCodeGenStruct,\n        ANoteADeepStructTestCodeGenStruct,\n        ManyNotesADeepStructTestCodeGenStruct,\n    };\n\n\n    #[aztec(private)]\n    fn constructor(\n    ) {}\n \n    // Calls the testCodeGen on the Test contract at the target address\n    // Used for testing calling a function with arguments of multiple types\n    // See yarn-project/acir-simulator/src/client/private_execution.ts\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn main(\n        target: Field\n    ) -> Field {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        let return_values = test_contract_instance.testCodeGen(\n            &mut context,\n            1,\n            true,\n            1 as u32,\n            [1, 2],\n            AStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n            ADeepStructTestCodeGenStruct {\n                aField: 1, \n                aBool: true, \n                aNote: ANoteADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n                manyNotes: [\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n                    ManyNotesADeepStructTestCodeGenStruct { amount: 1, secretHash: 2 },\n                ]\n            }\n        );\n\n        return_values[0]\n    }\n\n    // Calls the getThisAddress on the Test contract at the target address\n    // Used for testing calling a function with no arguments\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn callNoArgs(\n        target: Field\n    ) -> Field {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        let return_values = test_contract_instance.getThisAddress(&mut context);\n        \n        return_values[0]\n    }\n\n    // Calls the createNullifierPublic on the Test contract at the target address\n    // Used for testing calling an open function\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(private)]\n    fn callOpenFn(\n        target: Field,\n    ) {\n        let test_contract_instance = TestPrivateContextInterface::at(target);\n        test_contract_instance.createNullifierPublic(&mut context, 1, 2);\n    }\n\n    // Calls the createNullifierPublic on the Test contract at the target address\n    // Used for testing calling an open function from another open function\n    // See yarn-project/end-to-end/src/e2e_nested_contract.test.ts\n    #[aztec(public)]\n    fn pubCallOpenFn(\n        target: Field,\n    ) -> Field {\n        let test_contract_instance = TestPublicContextInterface::at(target);\n        let ret = test_contract_instance.createNullifierPublic(context, 1, 2);\n        \n        ret[0]\n    }\n}\n\n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/import_test_contract/src/main"
            },
            "33": {
                "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\nfn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi"
            },
            "38": {
                "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        self.nullified_commitments.push(nullified_commitment);\n    }\n\n    // docs:start:context_message_portal\n    fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[11],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 12),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 16),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 48),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 64),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 80),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 96),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 100),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 104),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 106),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 108),\n                encrypted_log_preimages_length: fields[110],\n                unencrypted_log_preimages_length: fields[111],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[112],\n                    nullifier_tree_root : fields[113],\n                    contract_tree_root : fields[114],\n                    l1_to_l2_messages_tree_root : fields[115],\n                    blocks_tree_root : fields[116],\n                    public_data_tree_root: fields[117],\n                    global_variables_hash: fields[118],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[119], fields[120]),\n                    constructor_vk_hash : fields[121],\n                    function_tree_root : fields[122],\n                    contract_address_salt : fields[123],\n                    portal_contract_address : fields[124],\n                },\n                chain_id: fields[125],\n                version: fields[126],\n            },\n            is_execution_request: fields[127] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    \n                    is_delegate_call : fields[8] as bool,\n                    is_static_call : fields[9] as bool,\n                    is_contract_deployment: fields[10] as bool,\n                },\n                args_hash: fields[11],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context"
            },
            "54": {
                "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/arguments"
            },
            "55": {
                "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
            },
            "62": {
                "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 6\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 12;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
            },
            "63": {
                "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained fn call_public_function_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/public_call"
            },
            "69": {
                "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
            },
            "70": {
                "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
            },
            "80": {
                "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialised() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
                "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec"
            },
            "86": {
                "source": "/* Autogenerated file, do not edit! */\n  \nuse dep::std;\nuse dep::aztec::context::{ PrivateContext, PublicContext };\nuse dep::aztec::constants_gen::RETURN_VALUES_LENGTH;\n\nstruct AStructTestCodeGenStruct {\n  amount: Field,\n  secretHash: Field,\n}\n\nstruct ADeepStructTestCodeGenStruct {\n  aField: Field,\n  aBool: bool,\n  aNote: ANoteADeepStructTestCodeGenStruct,\n  manyNotes: [ManyNotesADeepStructTestCodeGenStruct;3],\n}\n\nstruct ANoteADeepStructTestCodeGenStruct {\n  amount: Field,\n  secretHash: Field,\n}\n\nstruct ManyNotesADeepStructTestCodeGenStruct {\n  amount: Field,\n  secretHash: Field,\n}\n\n\n// Interface for calling Test functions from a private context\nstruct TestPrivateContextInterface {\n  address: Field,\n}\n\nimpl TestPrivateContextInterface {\n  fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  fn createL2ToL1MessagePublic(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secretHash: Field\n  ) {\n    let mut serialised_args = [0; 2];\n    serialised_args[0] = amount;\n    serialised_args[1] = secretHash;\n\n    context.call_public_function(self.address, 0xbac98727, serialised_args)\n  }\n  \n\n  fn createNullifierPublic(\n    self,\n    context: &mut PrivateContext,\n    amount: Field,\n    secretHash: Field\n  ) {\n    let mut serialised_args = [0; 2];\n    serialised_args[0] = amount;\n    serialised_args[1] = secretHash;\n\n    context.call_public_function(self.address, 0x42040a24, serialised_args)\n  }\n  \n\n  fn emit_unencrypted(\n    self,\n    context: &mut PrivateContext,\n    value: Field\n  ) {\n    let mut serialised_args = [0; 1];\n    serialised_args[0] = value;\n\n    context.call_public_function(self.address, 0x817a64cb, serialised_args)\n  }\n  \n\n  fn getPortalContractAddress(\n    self,\n    context: &mut PrivateContext,\n    aztec_address: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 1];\n    serialised_args[0] = aztec_address;\n\n    context.call_private_function(self.address, 0xaf15a45f, serialised_args)\n  }\n  \n\n  fn getPublicKey(\n    self,\n    context: &mut PrivateContext,\n    address: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 1];\n    serialised_args[0] = address;\n\n    context.call_private_function(self.address, 0x88f0753b, serialised_args)\n  }\n  \n\n  fn getThisAddress(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 0];\n\n    context.call_private_function(self.address, 0xd3953822, serialised_args)\n  }\n  \n\n  fn getThisPortalAddress(\n    self,\n    context: &mut PrivateContext\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 0];\n\n    context.call_private_function(self.address, 0x82cc9431, serialised_args)\n  }\n  \n\n  fn isTimeEqual(\n    self,\n    context: &mut PrivateContext,\n    time: Field\n  ) {\n    let mut serialised_args = [0; 1];\n    serialised_args[0] = time;\n\n    context.call_public_function(self.address, 0xfff6026c, serialised_args)\n  }\n  \n\n  fn testCodeGen(\n    self,\n    context: &mut PrivateContext,\n    aField: Field,\n    aBool: bool,\n    aNumber: u32,\n    anArray: [Field;2],\n    aStruct: AStructTestCodeGenStruct,\n    aDeepStruct: ADeepStructTestCodeGenStruct\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 17];\n    serialised_args[0] = aField;\n    serialised_args[1] = aBool as Field;\n    serialised_args[2] = aNumber as Field;\n    serialised_args[3] = anArray[0];\n    serialised_args[4] = anArray[1];\n    serialised_args[5] = aStruct.amount;\n    serialised_args[6] = aStruct.secretHash;\n    serialised_args[7] = aDeepStruct.aField;\n    serialised_args[8] = aDeepStruct.aBool as Field;\n    serialised_args[9] = aDeepStruct.aNote.amount;\n    serialised_args[10] = aDeepStruct.aNote.secretHash;\n    serialised_args[11] = aDeepStruct.manyNotes[0].amount;\n    serialised_args[12] = aDeepStruct.manyNotes[0].secretHash;\n    serialised_args[13] = aDeepStruct.manyNotes[1].amount;\n    serialised_args[14] = aDeepStruct.manyNotes[1].secretHash;\n    serialised_args[15] = aDeepStruct.manyNotes[2].amount;\n    serialised_args[16] = aDeepStruct.manyNotes[2].secretHash;\n\n    context.call_private_function(self.address, 0x81d7c118, serialised_args)\n  }\n  \n}\n  \n  \n\n\n// Interface for calling Test functions from a public context\nstruct TestPublicContextInterface {\n  address: Field,\n}\n\nimpl TestPublicContextInterface {\n  fn at(address: Field) -> Self {\n      Self {\n          address,\n      }\n  }\n  \n  fn createL2ToL1MessagePublic(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secretHash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 2];\n    serialised_args[0] = amount;\n    serialised_args[1] = secretHash;\n\n    context.call_public_function(self.address, 0xbac98727, serialised_args)\n  }\n  \n\n  fn createNullifierPublic(\n    self,\n    context: PublicContext,\n    amount: Field,\n    secretHash: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 2];\n    serialised_args[0] = amount;\n    serialised_args[1] = secretHash;\n\n    context.call_public_function(self.address, 0x42040a24, serialised_args)\n  }\n  \n\n  fn emit_unencrypted(\n    self,\n    context: PublicContext,\n    value: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 1];\n    serialised_args[0] = value;\n\n    context.call_public_function(self.address, 0x817a64cb, serialised_args)\n  }\n  \n\n  fn isTimeEqual(\n    self,\n    context: PublicContext,\n    time: Field\n  ) -> [Field; RETURN_VALUES_LENGTH] {\n    let mut serialised_args = [0; 1];\n    serialised_args[0] = time;\n\n    context.call_public_function(self.address, 0xfff6026c, serialised_args)\n  }\n  \n}\n  \n  \n",
                "path": "/usr/src/yarn-project/noir-contracts/src/contracts/import_test_contract/src/test_contract_interface"
            }
        }
    }
}
