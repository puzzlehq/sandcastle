/// <reference types="node" resolution-mode="require"/>
import { Fr } from '../fields/index.js';
import { BufferReader } from '../serialize/buffer_reader.js';
/**
 * AztecAddress represents a 32-byte address in the Aztec Protocol. It provides methods to create, manipulate, and
 * compare addresses. The maximum value of an address is determined by the field modulus and all instances of AztecAddress
 * should have a value less than or equal to this max value. This class also provides helper functions to convert
 * addresses from strings, buffers, and other formats.
 */
export declare class AztecAddress {
    /**
     * The buffer field.
     */
    readonly buffer: Buffer;
    static SIZE_IN_BYTES: number;
    static ZERO: AztecAddress;
    static MODULUS: bigint;
    static MAX_VALUE: bigint;
    constructor(
    /**
     * The buffer field.
     */
    buffer: Buffer);
    /**
     * Generates a random AztecAddress instance, using the Fr field (a finite field) to create a random value
     * within a valid range and then converting it into a Buffer of a fixed size in bytes.
     *
     * @returns A new AztecAddress instance with a random value.
     */
    static random(): AztecAddress;
    /**
     * Creates an AztecAddress instance from a given buffer or BufferReader.
     * If the input is a Buffer, it wraps it in a BufferReader before processing.
     * Throws an error if the input length is not equal to the expected size.
     *
     * @param buffer - The input buffer or BufferReader containing the address data.
     * @returns - A new AztecAddress instance with the extracted address data.
     */
    static fromBuffer(buffer: Buffer | BufferReader): AztecAddress;
    /**
     * Create an AztecAddress instance from a hex-encoded string.
     * The input 'address' should be prefixed with '0x' or not, and have exactly 64 hex characters.
     * Throws an error if the input length is invalid or address value is out of range.
     *
     * @param address - The hex-encoded string representing the Aztec address.
     * @returns An AztecAddress instance.
     */
    static fromString(address: string): AztecAddress;
    /**
     * Creates an AztecAddress from a bigint.
     * The provided value must be within the range of a field.
     * @param address - The bigint representation of the address.
     * @returns An AztecAddress instance.
     */
    static fromBigInt(address: bigint): AztecAddress;
    /**
     * Converts the AztecAddress instance into a Buffer.
     * This method should be used when encoding the address for storage, transmission or serialization purposes.
     *
     * @returns A Buffer representation of the AztecAddress instance.
     */
    toBuffer(): Buffer;
    /**
     * Convert the AztecAddress to a hexadecimal string representation, with a "0x" prefix.
     * The resulting string will have a length of 66 characters (including the prefix).
     *
     * @returns A hexadecimal string representation of the AztecAddress.
     */
    toString(): `0x${string}`;
    /**
     * Returns a shortened string representation of the AztecAddress, displaying only the first 10 characters and last 4 characters.
     * This is useful for human-readable displays where the full address is not necessary.
     *
     * @returns A shortened string representation of the address.
     */
    toShortString(): string;
    /**
     * Returns this address from a Field element.
     * @param field - The Field element to convert.
     * @returns An Address Object from a Field element with the same value.
     */
    static fromField(field: Fr): AztecAddress;
    /**
     * Returns this address as a field element.
     * @returns A field element with the same value as the address.
     */
    toField(): Fr;
    /**
     * Returns this address as a bigint. Useful for creating maps indexed by addresses.
     * @returns A bigint with the same value as the address.
     */
    toBigInt(): bigint;
    /**
     * Determines if this AztecAddress instance is equal to the given AztecAddress instance.
     * Equality is based on the content of their respective buffers.
     *
     * @param other - The AztecAddress instance to compare against.
     * @returns True if the buffers of both instances are equal, false otherwise.
     */
    equals(other: AztecAddress): boolean;
    /**
     * Checks if the AztecAddress is zero.
     *
     * @returns Returns true if the AztecAddress is equal to the zero address, otherwise returns false.
     */
    isZero(): boolean;
    /**
     * Friendly representation for debugging purposes.
     *
     * @returns A hex string representing the address.
     */
    toFriendlyJSON(): `0x${string}`;
}
//# sourceMappingURL=index.d.ts.map