import { toBigIntBE, toBufferBE, toHex } from '../bigint-buffer/index.js';
import { randomBytes } from '../crypto/index.js';
import { BufferReader } from '../serialize/buffer_reader.js';
import { Fr } from './fields.js';
/**
 * Represents a field element in a prime finite field with modulus defined by the constant MODULUS.
 * @remarks Called GrumpkinScalar because it is used to represent elements in Grumpkin's scalar field as defined in
 *          the Aztec Yellow Paper.
 */
export class GrumpkinScalar {
    constructor(
    /**
     * The element's value as a bigint in the finite field.
     */
    value) {
        this.value = value;
        if (value > GrumpkinScalar.MAX_VALUE) {
            throw new Error(`GrumpkinScalar out of range ${value}.`);
        }
    }
    get low() {
        return new Fr(this.value & GrumpkinScalar.LOW_MASK);
    }
    get high() {
        return new Fr(this.value >> GrumpkinScalar.HIGH_SHIFT);
    }
    /**
     * Deserialize a grumpkin scalar serialized in 2 Fr.
     * @param high - The high Fr element.
     * @param low - The low Fr element.
     * @returns A GrumpkinScalar instance with the value of the two Fr elements.
     */
    static fromHighLow(high, low) {
        return new GrumpkinScalar((high.value << GrumpkinScalar.HIGH_SHIFT) + low.value);
    }
    /**
     * Generates a random GrumpkinScalar.
     *
     * @returns A new GrumpkinScalar instance with a randomly generated value.
     */
    static random() {
        const r = toBigIntBE(randomBytes(64)) % GrumpkinScalar.MODULUS;
        return new this(r);
    }
    /**
     * Create an instance of GrumpkinScalar from a given buffer or BufferReader.
     * @remarks Reads SIZE_IN_BYTES from the provided buffer and converts it to a bigint, then creates a new instance
     * with that value. Throws an error if the value is out of range for the calling class.
     *
     * @param buffer - The input buffer or BufferReader containing the bytes representing the value.
     * @returns A GrumpkinScalar instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new this(toBigIntBE(reader.readBytes(this.SIZE_IN_BYTES)));
    }
    /**
     * Like fromBuffer, but reduces the value modulo MODULUS.
     *
     * @param buffer - The Buffer or BufferReader containing the bytes representing the value.
     * @returns GrumpkinScalar with the decoded value.
     */
    static fromBufferWithReduction(buffer) {
        const reader = BufferReader.asReader(buffer);
        const value = toBigIntBE(reader.readBytes(GrumpkinScalar.SIZE_IN_BYTES)) % GrumpkinScalar.MODULUS;
        return new GrumpkinScalar(value);
    }
    /**
     * Create a GrumpkinScalar instance from a hex-encoded string.
     * The input 'address' can be either prefixed with '0x' or not, and should have exactly 64 hex characters.
     * Throws an error if the input length is invalid or the address value is out of range.
     *
     * @param address - The hex-encoded string representing the field element.
     * @returns A GrumpkinScalar instance.
     */
    static fromString(address) {
        return GrumpkinScalar.fromBuffer(Buffer.from(address.replace(/^0x/i, ''), 'hex'));
    }
    /**
     * Converts the bigint value of the instance to a Buffer representation.
     * The output buffer has a fixed size, determined by the 'SIZE_IN_BYTES' constant.
     *
     * @returns A Buffer containing the byte representation of the instance's value.
     */
    toBuffer() {
        return toBufferBE(this.value, GrumpkinScalar.SIZE_IN_BYTES);
    }
    /**
     * Converts the GrumpkinScalar value to a hexadecimal string representation.
     * The resulting string is prefixed with '0x' and contains the exact number of hex characters required
     * to represent the numeric value of this instance.
     *
     * @param padTo32 - Whether to pad the resulting string to 32 bytes.
     * @returns A hexadecimal string representing the GrumpkinScalar value.
     */
    toString(padTo32 = false) {
        return toHex(this.value, padTo32);
    }
    /**
     * Check if the value of the current instance is zero.
     * This function compares the internal 'value' property with 0n (BigInt representation of zero).
     * Returns true if the value is zero, otherwise returns false.
     *
     * @returns A boolean indicating whether the value is zero or not.
     */
    isZero() {
        return this.value === 0n;
    }
    /**
     * Converts the value of the GrumpkinScalar instance to a friendly JSON format.
     * The output is a hexadecimal string representation of the value with '0x' prefix.
     *
     * @returns A string representing the value in the JSON format.
     */
    toFriendlyJSON() {
        return this.toString();
    }
}
GrumpkinScalar.MODULUS = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47n;
GrumpkinScalar.MAX_VALUE = GrumpkinScalar.MODULUS - 1n;
GrumpkinScalar.SIZE_IN_BYTES = 32;
// The following constants are used to split a GrumpkinScalar into two Fr elements.
GrumpkinScalar.HIGH_SHIFT = BigInt((GrumpkinScalar.SIZE_IN_BYTES / 2) * 8);
GrumpkinScalar.LOW_MASK = (1n << GrumpkinScalar.HIGH_SHIFT) - 1n;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3J1bXBraW5fc2NhbGFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZpZWxkcy9ncnVtcGtpbl9zY2FsYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sY0FBYztJQVN6QjtJQUNFOztPQUVHO0lBQ2EsS0FBYTtRQUFiLFVBQUssR0FBTCxLQUFLLENBQVE7UUFFN0IsSUFBSSxLQUFLLEdBQUcsY0FBYyxDQUFDLFNBQVMsRUFBRTtZQUNwQyxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQUVELElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFRLEVBQUUsR0FBTztRQUNsQyxPQUFPLElBQUksY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLE1BQU07UUFDWCxNQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQztRQUMvRCxPQUFPLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsdUJBQXVCLENBQUMsTUFBNkI7UUFDMUQsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDO1FBQ2xHLE9BQU8sSUFBSSxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQWU7UUFDL0IsT0FBTyxjQUFjLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxRQUFRLENBQUMsT0FBTyxHQUFHLEtBQUs7UUFDdEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7O0FBN0hNLHNCQUFPLEdBQUcsbUVBQW1FLENBQUM7QUFDOUUsd0JBQVMsR0FBRyxjQUFjLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUN4Qyw0QkFBYSxHQUFHLEVBQUUsQ0FBQztBQUUxQixtRkFBbUY7QUFDcEUseUJBQVUsR0FBRyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzVELHVCQUFRLEdBQUcsQ0FBQyxFQUFFLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyJ9