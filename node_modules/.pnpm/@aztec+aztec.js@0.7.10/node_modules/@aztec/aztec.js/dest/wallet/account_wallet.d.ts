/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/circuits.js';
import { AuthWitness, AztecRPC, FunctionCall, TxExecutionRequest } from '@aztec/types';
import { AccountInterface } from '../account/interface.js';
import { ContractFunctionInteraction } from '../index.js';
import { BaseWallet } from './base_wallet.js';
/**
 * A wallet implementation that forwards authentication requests to a provided account.
 */
export declare class AccountWallet extends BaseWallet {
    protected account: AccountInterface;
    constructor(rpc: AztecRPC, account: AccountInterface);
    createTxExecutionRequest(execs: FunctionCall[]): Promise<TxExecutionRequest>;
    createAuthWitness(message: Fr | Buffer): Promise<AuthWitness>;
    /**
     * Returns a function interaction to set a message hash as authorized in this account.
     * Public calls can then consume this authorization.
     * @param message - Message hash to authorize.
     * @param authorized - True to authorize, false to revoke authorization.
     * @returns - A function interaction.
     */
    setPublicAuth(message: Fr | Buffer, authorized: boolean): ContractFunctionInteraction;
    /** Returns the complete address of the account that implements this wallet. */
    getCompleteAddress(): import("@aztec/circuits.js").CompleteAddress;
    /** Returns the address of the account that implements this wallet. */
    getAddress(): import("@aztec/circuits.js").AztecAddress;
    private getSetIsValidStorageAbi;
}
//# sourceMappingURL=account_wallet.d.ts.map