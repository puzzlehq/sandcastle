import { abiChecker } from './checker.js';
describe('abiChecker', () => {
    let abi;
    it('should throw an error if it has no functions', () => {
        abi = {
            name: 'TEST_ABI',
        };
        expect(() => abiChecker(abi)).toThrowError('ABI has no functions');
        abi = {
            name: 'TEST_ABI',
            functions: [],
        };
        expect(() => abiChecker(abi)).toThrowError('ABI has no functions');
    });
    it('should error if ABI has no names', () => {
        abi = {
            name: 'TEST_ABI',
            functions: [{ bytecode: '0af', parameters: [{ type: { kind: 'test' } }] }],
        };
        expect(() => abiChecker(abi)).toThrowError('ABI function has no name');
    });
    it('should error if ABI function has unrecognised type', () => {
        abi = {
            name: 'TEST_ABI',
            functions: [
                {
                    name: 'Function name',
                    bytecode: '0af',
                    parameters: [{ type: { kind: 'test' } }],
                },
            ],
        };
        expect(() => abiChecker(abi)).toThrowError('ABI function parameter has an unrecognised type');
    });
    it('should error if integer is incorrectly formed', () => {
        abi = {
            name: 'TEST_ABI',
            functions: [
                {
                    name: 'constructor',
                    bytecode: '0af',
                    parameters: [{ type: { kind: 'integer', sign: 5 } }],
                },
            ],
        };
        expect(() => abiChecker(abi)).toThrowError('Unrecognised attribute on type integer');
    });
    it('should error if string is incorrectly formed', () => {
        abi = {
            name: 'TEST_ABI',
            functions: [
                {
                    name: 'constructor',
                    bytecode: '0af',
                    parameters: [{ type: { kind: 'string', sign: 5, additionalParam: true } }],
                },
            ],
        };
        expect(() => abiChecker(abi)).toThrowError('Unrecognised attribute on type string');
    });
    it('should error if struct is incorrectly formed', () => {
        abi = {
            name: 'TEST_ABI',
            functions: [
                {
                    name: 'constructor',
                    bytecode: '0af',
                    parameters: [
                        {
                            type: {
                                kind: 'struct',
                            },
                        },
                    ],
                },
            ],
        };
        expect(() => abiChecker(abi)).toThrowError('Unrecognised attribute on type struct');
    });
    it('should error if array is incorrectly formed', () => {
        abi = {
            name: 'TEST_ABI',
            functions: [
                {
                    name: 'constructor',
                    bytecode: '0af',
                    parameters: [
                        {
                            type: {
                                kind: 'array',
                                length: 5,
                                type: {
                                    kind: 'array',
                                    length: '5',
                                    type: {
                                        sign: 'value',
                                        width: 5,
                                        kind: 'integer',
                                    },
                                },
                            },
                        },
                    ],
                },
            ],
        };
        expect(() => abiChecker(abi)).toThrowError('ABI function parameter has an incorrectly formed array');
    });
    it('valid matrix should pass checker', () => {
        abi = {
            name: 'TEST_ABI',
            functions: [
                {
                    name: 'constructor',
                    bytecode: '0af',
                    parameters: [
                        {
                            type: {
                                kind: 'array',
                                length: 5,
                                type: {
                                    kind: 'array',
                                    length: 5,
                                    type: {
                                        sign: 'value',
                                        width: 5,
                                        kind: 'integer',
                                    },
                                },
                            },
                        },
                    ],
                },
            ],
        };
        expect(abiChecker(abi)).toBe(true);
    });
    it('valid struct should pass checker', () => {
        abi = {
            name: 'TEST_ABI',
            functions: [
                {
                    name: 'constructor',
                    bytecode: '0af',
                    parameters: [
                        {
                            type: {
                                kind: 'struct',
                                path: 'mystruct',
                                fields: [
                                    {
                                        name: 'name',
                                        type: {
                                            sign: 'value',
                                            width: 5,
                                            kind: 'integer',
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            ],
        };
        expect(abiChecker(abi)).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0L2NoZWNrZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQzFCLElBQUksR0FBUSxDQUFDO0lBRWIsRUFBRSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtRQUN0RCxHQUFHLEdBQUc7WUFDSixJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDO1FBQ0YsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ25FLEdBQUcsR0FBRztZQUNKLElBQUksRUFBRSxVQUFVO1lBQ2hCLFNBQVMsRUFBRSxFQUFFO1NBQ2QsQ0FBQztRQUNGLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUNyRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7UUFDMUMsR0FBRyxHQUFHO1lBQ0osSUFBSSxFQUFFLFVBQVU7WUFDaEIsU0FBUyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQzNFLENBQUM7UUFDRixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDekUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0RB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