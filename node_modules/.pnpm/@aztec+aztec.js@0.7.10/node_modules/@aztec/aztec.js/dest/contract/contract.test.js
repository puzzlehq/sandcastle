import { CompleteAddress, EthAddress } from '@aztec/circuits.js';
import { ABIParameterVisibility, FunctionType } from '@aztec/foundation/abi';
import { ExtendedContractData, randomContractAbi, randomDeployedContract, } from '@aztec/types';
import { mock } from 'jest-mock-extended';
import { Contract } from './contract.js';
describe('Contract Class', () => {
    let wallet;
    let resolvedExtendedContractData;
    let contractAddress;
    let account;
    const mockTx = { type: 'Tx' };
    const mockTxRequest = { type: 'TxRequest' };
    const mockTxHash = { type: 'TxHash' };
    const mockTxReceipt = { type: 'TxReceipt' };
    const mockViewResultValue = 1;
    const mockNodeInfo = {
        sandboxVersion: 'vx.x.x',
        compatibleNargoVersion: 'vx.x.x-aztec.x',
        protocolVersion: 1,
        chainId: 2,
        rollupAddress: EthAddress.random(),
    };
    const defaultAbi = {
        name: 'FooContract',
        functions: [
            {
                name: 'bar',
                functionType: FunctionType.SECRET,
                isInternal: false,
                parameters: [
                    {
                        name: 'value',
                        type: {
                            kind: 'field',
                        },
                        visibility: ABIParameterVisibility.PUBLIC,
                    },
                    {
                        name: 'value',
                        type: {
                            kind: 'field',
                        },
                        visibility: ABIParameterVisibility.SECRET,
                    },
                ],
                returnTypes: [],
                bytecode: '0af',
            },
            {
                name: 'baz',
                functionType: FunctionType.OPEN,
                isInternal: false,
                parameters: [],
                returnTypes: [],
                bytecode: '0be',
            },
            {
                name: 'qux',
                functionType: FunctionType.UNCONSTRAINED,
                isInternal: false,
                parameters: [
                    {
                        name: 'value',
                        type: {
                            kind: 'field',
                        },
                        visibility: ABIParameterVisibility.PUBLIC,
                    },
                ],
                returnTypes: [
                    {
                        kind: 'integer',
                        sign: '',
                        width: 32,
                    },
                ],
                bytecode: '0cd',
            },
        ],
    };
    beforeEach(async () => {
        resolvedExtendedContractData = ExtendedContractData.random();
        contractAddress = resolvedExtendedContractData.contractData.contractAddress;
        account = await CompleteAddress.random();
        wallet = mock();
        wallet.createTxExecutionRequest.mockResolvedValue(mockTxRequest);
        wallet.getExtendedContractData.mockResolvedValue(resolvedExtendedContractData);
        wallet.sendTx.mockResolvedValue(mockTxHash);
        wallet.viewTx.mockResolvedValue(mockViewResultValue);
        wallet.getTxReceipt.mockResolvedValue(mockTxReceipt);
        wallet.getNodeInfo.mockResolvedValue(mockNodeInfo);
        wallet.simulateTx.mockResolvedValue(mockTx);
        wallet.getRegisteredAccounts.mockResolvedValue([account]);
    });
    it('should create and send a contract method tx', async () => {
        const fooContract = await Contract.at(contractAddress, defaultAbi, wallet);
        const param0 = 12;
        const param1 = 345n;
        const sentTx = fooContract.methods.bar(param0, param1).send();
        const txHash = await sentTx.getTxHash();
        const receipt = await sentTx.getReceipt();
        expect(txHash).toBe(mockTxHash);
        expect(receipt).toBe(mockTxReceipt);
        expect(wallet.createTxExecutionRequest).toHaveBeenCalledTimes(1);
        expect(wallet.sendTx).toHaveBeenCalledTimes(1);
        expect(wallet.sendTx).toHaveBeenCalledWith(mockTx);
    });
    it('should call view on an unconstrained function', async () => {
        const fooContract = await Contract.at(contractAddress, defaultAbi, wallet);
        const result = await fooContract.methods.qux(123n).view({
            from: account.address,
        });
        expect(wallet.viewTx).toHaveBeenCalledTimes(1);
        expect(wallet.viewTx).toHaveBeenCalledWith('qux', [123n], contractAddress, account.address);
        expect(result).toBe(mockViewResultValue);
    });
    it('should not call create on an unconstrained function', async () => {
        const fooContract = await Contract.at(contractAddress, defaultAbi, wallet);
        await expect(fooContract.methods.qux().create()).rejects.toThrow();
    });
    it('should not call view on a secret or open function', async () => {
        const fooContract = await Contract.at(contractAddress, defaultAbi, wallet);
        expect(() => fooContract.methods.bar().view()).toThrow();
        expect(() => fooContract.methods.baz().view()).toThrow();
    });
    it('should add contract and dependencies to aztec rpc', async () => {
        const entry = {
            abi: randomContractAbi(),
            completeAddress: resolvedExtendedContractData.getCompleteAddress(),
            portalContract: EthAddress.random(),
        };
        const contract = await Contract.at(entry.completeAddress.address, entry.abi, wallet);
        {
            await contract.attach(entry.portalContract);
            expect(wallet.addContracts).toHaveBeenCalledTimes(1);
            expect(wallet.addContracts).toHaveBeenCalledWith([entry]);
            wallet.addContracts.mockClear();
        }
        {
            const dependencies = [await randomDeployedContract(), await randomDeployedContract()];
            await contract.attach(entry.portalContract, dependencies);
            expect(wallet.addContracts).toHaveBeenCalledTimes(1);
            expect(wallet.addContracts).toHaveBeenCalledWith([entry, ...dependencies]);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9jb250cmFjdC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0IsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBZSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRixPQUFPLEVBRUwsb0JBQW9CLEVBTXBCLGlCQUFpQixFQUNqQixzQkFBc0IsR0FDdkIsTUFBTSxjQUFjLENBQUM7QUFFdEIsT0FBTyxFQUFhLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR3JELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLE1BQXlCLENBQUM7SUFDOUIsSUFBSSw0QkFBa0QsQ0FBQztJQUN2RCxJQUFJLGVBQTZCLENBQUM7SUFDbEMsSUFBSSxPQUF3QixDQUFDO0lBRTdCLE1BQU0sTUFBTSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBZSxDQUFDO0lBQzNDLE1BQU0sYUFBYSxHQUFHLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBK0IsQ0FBQztJQUN6RSxNQUFNLFVBQVUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQW1CLENBQUM7SUFDdkQsTUFBTSxhQUFhLEdBQUcsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFzQixDQUFDO0lBQ2hFLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sWUFBWSxHQUFhO1FBQzdCLGNBQWMsRUFBRSxRQUFRO1FBQ3hCLHNCQUFzQixFQUFFLGdCQUFnQjtRQUN4QyxlQUFlLEVBQUUsQ0FBQztRQUNsQixPQUFPLEVBQUUsQ0FBQztRQUNWLGFBQWEsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFF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