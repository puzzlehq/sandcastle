import { FunctionData } from '@aztec/circuits.js';
import { FunctionType, encodeArguments } from '@aztec/foundation/abi';
import { BaseContractInteraction } from './base_contract_interaction.js';
/**
 * This is the class that is returned when calling e.g. `contract.methods.myMethod(arg0, arg1)`.
 * It contains available interactions one can call on a method, including view.
 */
export class ContractFunctionInteraction extends BaseContractInteraction {
    constructor(wallet, contractAddress, functionDao, args) {
        super(wallet);
        this.wallet = wallet;
        this.contractAddress = contractAddress;
        this.functionDao = functionDao;
        this.args = args;
        if (args.some(arg => arg === undefined || arg === null)) {
            throw new Error('All function interaction arguments must be defined and not null. Received: ' + args);
        }
    }
    /**
     * Create a transaction execution request that represents this call, encoded and authenticated by the
     * user's wallet, ready to be simulated.
     * @returns A Promise that resolves to a transaction instance.
     */
    async create() {
        if (this.functionDao.functionType === FunctionType.UNCONSTRAINED) {
            throw new Error("Can't call `create` on an unconstrained function.");
        }
        if (!this.txRequest) {
            this.txRequest = await this.wallet.createTxExecutionRequest([this.request()]);
        }
        return this.txRequest;
    }
    /**
     * Returns an execution request that represents this operation. Useful as a building
     * block for constructing batch requests.
     * @param options - An optional object containing additional configuration for the transaction.
     * @returns An execution request wrapped in promise.
     */
    request() {
        const args = encodeArguments(this.functionDao, this.args);
        const functionData = FunctionData.fromAbi(this.functionDao);
        return { args, functionData, to: this.contractAddress };
    }
    /**
     * Execute a view (read-only) transaction on an unconstrained function.
     * This method is used to call functions that do not modify the contract state and only return data.
     * Throws an error if called on a non-unconstrained function.
     * @param options - An optional object containing additional configuration for the transaction.
     * @returns The result of the view transaction as returned by the contract function.
     */
    view(options = {}) {
        if (this.functionDao.functionType !== FunctionType.UNCONSTRAINED) {
            throw new Error('Can only call `view` on an unconstrained function.');
        }
        const { from } = options;
        return this.wallet.viewTx(this.functionDao.name, this.args, this.contractAddress, from);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfZnVuY3Rpb25faW50ZXJhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3RfZnVuY3Rpb25faW50ZXJhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnQixZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRSxPQUFPLEVBQXFCLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUl6RixPQUFPLEVBQUUsdUJBQXVCLEVBQXFCLE1BQU0sZ0NBQWdDLENBQUM7QUFlNUY7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLDJCQUE0QixTQUFRLHVCQUF1QjtJQUN0RSxZQUNZLE1BQWMsRUFDZCxlQUE2QixFQUM3QixXQUE4QixFQUM5QixJQUFXO1FBRXJCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUxKLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxvQkFBZSxHQUFmLGVBQWUsQ0FBYztRQUM3QixnQkFBVyxHQUFYLFdBQVcsQ0FBbUI7UUFDOUIsU0FBSSxHQUFKLElBQUksQ0FBTztRQUdyQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUMsRUFBRTtZQUN2RCxNQUFNLElBQUksS0FBSyxDQUFDLDZFQUE2RSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBQ3ZHO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsTUFBTTtRQUNqQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxLQUFLLFlBQVksQ0FBQyxhQUFhLEVBQUU7WUFDaEUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQy9FO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE9BQU87UUFDWixNQUFNLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDNUQsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksSUFBSSxDQUFDLFVBQTZCLEVBQUU7UUFDekMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksS0FBSyxZQUFZLENBQUMsYUFBYSxFQUFFO1lBQ2hFLE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELENBQUMsQ0FBQztTQUN2RTtRQUVELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUYsQ0FBQztDQUNGIn0=