import { DeployMethod, Point } from '../index.js';
import { ContractBase } from './contract_base.js';
/**
 * The Contract class represents a contract and provides utility methods for interacting with it.
 * It enables the creation of ContractFunctionInteraction instances for each function in the contract's ABI,
 * allowing users to call or send transactions to these functions. Additionally, the Contract class can be used
 * to attach the contract instance to a deployed contract on-chain through the AztecRPCClient, which facilitates
 * interaction with Aztec's privacy protocol.
 */
export class Contract extends ContractBase {
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param abi - The Application Binary Interface for the contract.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, abi, wallet) {
        const extendedContractData = await wallet.getExtendedContractData(address);
        if (extendedContractData === undefined) {
            throw new Error('Contract ' + address.toString() + ' is not deployed');
        }
        return new Contract(extendedContractData.getCompleteAddress(), abi, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of a contract.
     * @param wallet - The wallet for executing the deployment.
     * @param abi - ABI of the contract to deploy.
     * @param args - Arguments for the constructor.
     */
    static deploy(wallet, abi, args) {
        return new DeployMethod(Point.ZERO, wallet, abi, args);
    }
    /**
     * Creates a tx to deploy a new instance of a contract using the specified public key to derive the address.
     * @param publicKey - Public key for deriving the address.
     * @param wallet - The wallet for executing the deployment.
     * @param abi - ABI of the contract to deploy.
     * @param args - Arguments for the constructor.
     */
    static deployWithPublicKey(publicKey, wallet, abi, args) {
        return new DeployMethod(publicKey, wallet, abi, args);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxEOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyxRQUFTLFNBQVEsWUFBWTtJQUN4Qzs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFxQixFQUFFLEdBQWdCLEVBQUUsTUFBYztRQUM1RSxNQUFNLG9CQUFvQixHQUFHLE1BQU0sTUFBTSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNFLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxJQUFJLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxHQUFnQixFQUFFLElBQVc7UUFDaEUsT0FBTyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFvQixFQUFFLE1BQWMsRUFBRSxHQUFnQixFQUFFLElBQVc7UUFDbkcsT0FBTyxJQUFJLFlBQVksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0YifQ==