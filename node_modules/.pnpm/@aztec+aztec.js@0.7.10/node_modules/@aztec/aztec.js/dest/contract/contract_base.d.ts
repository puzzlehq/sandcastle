import { ContractAbi, FunctionSelector } from '@aztec/foundation/abi';
import { EthAddress } from '@aztec/foundation/eth-address';
import { CompleteAddress, DeployedContract } from '@aztec/types';
import { Wallet } from '../wallet/index.js';
import { ContractFunctionInteraction } from './contract_function_interaction.js';
/**
 * Type representing a contract method that returns a ContractFunctionInteraction instance
 * and has a readonly 'selector' property of type Buffer. Takes any number of arguments.
 */
export type ContractMethod = ((...args: any[]) => ContractFunctionInteraction) & {
    /**
     * The unique identifier for a contract function in bytecode.
     */
    readonly selector: FunctionSelector;
};
/**
 * Abstract implementation of a contract extended by the Contract class and generated contract types.
 */
export declare class ContractBase {
    /**
     * The deployed contract's complete address.
     */
    readonly completeAddress: CompleteAddress;
    /**
     * The Application Binary Interface for the contract.
     */
    readonly abi: ContractAbi;
    /**
     * The wallet.
     */
    protected wallet: Wallet;
    /**
     * An object containing contract methods mapped to their respective names.
     */
    methods: {
        [name: string]: ContractMethod;
    };
    protected constructor(
    /**
     * The deployed contract's complete address.
     */
    completeAddress: CompleteAddress, 
    /**
     * The Application Binary Interface for the contract.
     */
    abi: ContractAbi, 
    /**
     * The wallet.
     */
    wallet: Wallet);
    /**
     * Address of the contract.
     */
    get address(): import("@aztec/circuits.js").AztecAddress;
    /**
     * Creates a new instance of the contract wrapper attached to a different wallet.
     * @param wallet - Wallet to use for sending txs.
     * @returns A new contract instance.
     */
    withWallet(wallet: Wallet): this;
    /**
     * Attach the current contract instance to a portal contract and optionally add its dependencies.
     * The function will return a promise that resolves when all contracts have been added to the AztecRPCClient.
     * This is useful when you need to interact with a deployed contract that has multiple nested contracts.
     *
     * @param portalContract - The Ethereum address of the portal contract.
     * @param dependencies - An optional array of additional DeployedContract instances to be attached.
     * @returns A promise that resolves when all contracts are successfully added to the AztecRPCClient.
     */
    attach(portalContract: EthAddress, dependencies?: DeployedContract[]): Promise<void>;
}
//# sourceMappingURL=contract_base.d.ts.map