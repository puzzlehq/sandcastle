import { FunctionSelector } from '@aztec/foundation/abi';
import { ContractFunctionInteraction } from './contract_function_interaction.js';
/**
 * Abstract implementation of a contract extended by the Contract class and generated contract types.
 */
export class ContractBase {
    constructor(
    /**
     * The deployed contract's complete address.
     */
    completeAddress, 
    /**
     * The Application Binary Interface for the contract.
     */
    abi, 
    /**
     * The wallet.
     */
    wallet) {
        this.completeAddress = completeAddress;
        this.abi = abi;
        this.wallet = wallet;
        /**
         * An object containing contract methods mapped to their respective names.
         */
        this.methods = {};
        abi.functions.forEach((f) => {
            const interactionFunction = (...args) => {
                return new ContractFunctionInteraction(this.wallet, this.completeAddress.address, f, args);
            };
            this.methods[f.name] = Object.assign(interactionFunction, {
                /**
                 * A getter for users to fetch the function selector.
                 * @returns Selector of the function.
                 */
                get selector() {
                    return FunctionSelector.fromNameAndParameters(f.name, f.parameters);
                },
            });
        });
    }
    /**
     * Address of the contract.
     */
    get address() {
        return this.completeAddress.address;
    }
    /**
     * Creates a new instance of the contract wrapper attached to a different wallet.
     * @param wallet - Wallet to use for sending txs.
     * @returns A new contract instance.
     */
    withWallet(wallet) {
        return new ContractBase(this.completeAddress, this.abi, wallet);
    }
    /**
     * Attach the current contract instance to a portal contract and optionally add its dependencies.
     * The function will return a promise that resolves when all contracts have been added to the AztecRPCClient.
     * This is useful when you need to interact with a deployed contract that has multiple nested contracts.
     *
     * @param portalContract - The Ethereum address of the portal contract.
     * @param dependencies - An optional array of additional DeployedContract instances to be attached.
     * @returns A promise that resolves when all contracts are successfully added to the AztecRPCClient.
     */
    attach(portalContract, dependencies = []) {
        const deployedContract = {
            abi: this.abi,
            completeAddress: this.completeAddress,
            portalContract,
        };
        return this.wallet.addContracts([deployedContract, ...dependencies]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9jb250cmFjdF9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBNEIsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUtuRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQWFqRjs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFZO0lBTXZCO0lBQ0U7O09BRUc7SUFDYSxlQUFnQztJQUNoRDs7T0FFRztJQUNhLEdBQWdCO0lBQ2hDOztPQUVHO0lBQ08sTUFBYztRQVJSLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUloQyxRQUFHLEdBQUgsR0FBRyxDQUFhO1FBSXRCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFqQjFCOztXQUVHO1FBQ0ksWUFBTyxHQUF1QyxFQUFFLENBQUM7UUFnQnRELEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBYyxFQUFFLEVBQUU7WUFDdkMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEdBQUcsSUFBVyxFQUFFLEVBQUU7Z0JBQzdDLE9BQU8sSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBUSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM5RixDQUFDLENBQUM7WUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFO2dCQUN4RDs7O21CQUdHO2dCQUNILElBQUksUUFBUTtvQkFDVixPQUFPLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUN0RSxDQUFDO2FBQ0YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQztJQUN0QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLFVBQVUsQ0FBQyxNQUFjO1FBQzlCLE9BQU8sSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBUyxDQUFDO0lBQzFFLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLE1BQU0sQ0FBQyxjQUEwQixFQUFFLGVBQW1DLEVBQUU7UUFDN0UsTUFBTSxnQkFBZ0IsR0FBcUI7WUFDekMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQ3JDLGNBQWM7U0FDZixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0NBQ0YifQ==