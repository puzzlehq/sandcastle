import { Fr, GrumpkinScalar } from '@aztec/circuits.js';
import { AccountWallet, AztecRPC } from '../index.js';
export declare const INITIAL_SANDBOX_ENCRYPTION_KEYS: GrumpkinScalar[];
export declare const INITIAL_SANDBOX_SIGNING_KEYS: GrumpkinScalar[];
export declare const INITIAL_SANDBOX_SALTS: Fr[];
export declare const INITIAL_SANDBOX_ACCOUNT_CONTRACT_ABI: {
    name: string;
    functions: ({
        name: string;
        functionType: string;
        isInternal: boolean;
        parameters: ({
            name: string;
            type: {
                kind: string;
                length?: undefined;
                type?: undefined;
            };
            visibility: string;
        } | {
            name: string;
            type: {
                kind: string;
                length: number;
                type: {
                    kind: string;
                };
            };
            visibility: string;
        })[];
        returnTypes: {
            kind: string;
            length: number;
            type: {
                kind: string;
            };
        }[];
        bytecode: string;
        verificationKey: string;
    } | {
        name: string;
        functionType: string;
        isInternal: boolean;
        parameters: {
            name: string;
            type: {
                kind: string;
                path: string;
                fields: ({
                    name: string;
                    type: {
                        kind: string;
                        length: number;
                        type: {
                            kind: string;
                            path: string;
                            fields: {
                                name: string;
                                type: {
                                    kind: string;
                                };
                            }[];
                        };
                    };
                } | {
                    name: string;
                    type: {
                        kind: string;
                        length?: undefined;
                        type?: undefined;
                    };
                })[];
            };
            visibility: string;
        }[];
        returnTypes: never[];
        bytecode: string;
        verificationKey: string;
    } | {
        name: string;
        functionType: string;
        isInternal: boolean;
        parameters: {
            name: string;
            type: {
                kind: string;
            };
            visibility: string;
        }[];
        returnTypes: {
            kind: string;
            path: string;
            fields: ({
                name: string;
                type: {
                    kind: string;
                    path: string;
                    fields: {
                        name: string;
                        type: {
                            kind: string;
                        };
                    }[];
                    length?: undefined;
                    type?: undefined;
                };
            } | {
                name: string;
                type: {
                    kind: string;
                    path?: undefined;
                    fields?: undefined;
                    length?: undefined;
                    type?: undefined;
                };
            } | {
                name: string;
                type: {
                    kind: string;
                    length: number;
                    type: {
                        kind: string;
                        path?: undefined;
                        fields?: undefined;
                    };
                    path?: undefined;
                    fields?: undefined;
                };
            } | {
                name: string;
                type: {
                    kind: string;
                    length: number;
                    type: {
                        kind: string;
                        path: string;
                        fields: {
                            name: string;
                            type: {
                                kind: string;
                            };
                        }[];
                    };
                    path?: undefined;
                    fields?: undefined;
                };
            })[];
        }[];
        bytecode: string;
        verificationKey: string;
    })[];
};
export declare const SANDBOX_URL: string;
/**
 * Gets a collection of wallets for the Aztec accounts that are initially stored in the sandbox.
 * @param aztecRpc - An instance of the Aztec RPC interface.
 * @returns A set of AccountWallet implementations for each of the initial accounts.
 */
export declare function getSandboxAccountsWallets(aztecRpc: AztecRPC): Promise<AccountWallet[]>;
/**
 * Deploys the initial set of schnorr signature accounts to the sandbox
 * @param aztecRpc - An instance of the Aztec RPC interface.
 * @returns The set of deployed Account objects and associated private encryption keys
 */
export declare function deployInitialSandboxAccounts(aztecRpc: AztecRPC): Promise<{
    account: import("../index.js").AccountManager;
    privateKey: GrumpkinScalar;
}[]>;
/**
 * Function to wait until the sandbox becomes ready for use.
 * @param rpc - The rpc client connected to the sandbox.
 */
export declare function waitForSandbox(rpc?: AztecRPC): Promise<void>;
//# sourceMappingURL=index.d.ts.map