import { Schnorr } from '@aztec/circuits.js/barretenberg';
import { AuthWitness } from '@aztec/types';
import SchnorrSingleKeyAccountContractAbi from '../../abis/schnorr_single_key_account_contract.json' assert { type: 'json' };
import { generatePublicKey } from '../../index.js';
import { BaseAccountContract } from './base_account_contract.js';
/**
 * Account contract that authenticates transactions using Schnorr signatures verified against
 * the note encryption key, relying on a single private key for both encryption and authentication.
 */
export class SingleKeyAccountContract extends BaseAccountContract {
    constructor(encryptionPrivateKey) {
        super(SchnorrSingleKeyAccountContractAbi);
        this.encryptionPrivateKey = encryptionPrivateKey;
    }
    getDeploymentArgs() {
        return Promise.resolve([]);
    }
    getAuthWitnessProvider({ partialAddress }) {
        return new SingleKeyAuthWitnessProvider(this.encryptionPrivateKey, partialAddress);
    }
}
/**
 * Creates auth witnesses using Schnorr signatures and including the partial address and public key
 * in the witness, so verifiers do not need to store the public key and can instead validate it
 * by reconstructing the current address.
 */
class SingleKeyAuthWitnessProvider {
    constructor(privateKey, partialAddress) {
        this.privateKey = privateKey;
        this.partialAddress = partialAddress;
    }
    async createAuthWitness(message) {
        const schnorr = await Schnorr.new();
        const signature = schnorr.constructSignature(message.toBuffer(), this.privateKey);
        const publicKey = await generatePublicKey(this.privateKey);
        const witness = [...publicKey.toFields(), ...signature.toBuffer(), this.partialAddress];
        return new AuthWitness(message, witness);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlX2tleV9hY2NvdW50X2NvbnRyYWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FjY291bnQvY29udHJhY3Qvc2luZ2xlX2tleV9hY2NvdW50X2NvbnRyYWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUUxRCxPQUFPLEVBQUUsV0FBVyxFQUF1QyxNQUFNLGNBQWMsQ0FBQztBQUVoRixPQUFPLGtDQUFrQyxNQUFNLHFEQUFxRCxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQzdILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRWpFOzs7R0FHRztBQUNILE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxtQkFBbUI7SUFDL0QsWUFBb0Isb0JBQXdDO1FBQzFELEtBQUssQ0FBQyxrQ0FBaUQsQ0FBQyxDQUFDO1FBRHZDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBb0I7SUFFNUQsQ0FBQztJQUVELGlCQUFpQjtRQUNmLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsc0JBQXNCLENBQUMsRUFBRSxjQUFjLEVBQW1CO1FBQ3hELE9BQU8sSUFBSSw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDckYsQ0FBQztDQUNGO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sNEJBQTRCO0lBQ2hDLFlBQW9CLFVBQThCLEVBQVUsY0FBOEI7UUFBdEUsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFBRyxDQUFDO0lBRTlGLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFXO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xGLE1BQU0sU0FBUyxHQUFHLE1BQU0saUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNELE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDRiJ9