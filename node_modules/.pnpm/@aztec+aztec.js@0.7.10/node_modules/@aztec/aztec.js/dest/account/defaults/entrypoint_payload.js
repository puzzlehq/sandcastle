import { CircuitsWasm, Fr, GeneratorIndex } from '@aztec/circuits.js';
import { pedersenPlookupCompressWithHashIndex } from '@aztec/circuits.js/barretenberg';
import { padArrayEnd } from '@aztec/foundation/collection';
import { PackedArguments, emptyFunctionCall } from '@aztec/types';
// These must match the values defined in yarn-project/aztec-nr/aztec/src/entrypoint.nr
export const ACCOUNT_MAX_CALLS = 4;
/** Assembles an entrypoint payload from a set of private and public function calls */
export async function buildPayload(calls) {
    const nonce = Fr.random();
    const paddedCalls = padArrayEnd(calls, emptyFunctionCall(), ACCOUNT_MAX_CALLS);
    const packedArguments = [];
    for (const call of paddedCalls) {
        packedArguments.push(await PackedArguments.fromArgs(call.args));
    }
    const formattedCalls = paddedCalls.map((call, index) => ({
        // eslint-disable-next-line camelcase
        args_hash: packedArguments[index].hash,
        // eslint-disable-next-line camelcase
        function_selector: call.functionData.selector.toField(),
        // eslint-disable-next-line camelcase
        target_address: call.to.toField(),
        // eslint-disable-next-line camelcase
        is_public: !call.functionData.isPrivate,
    }));
    return {
        payload: {
            // eslint-disable-next-line camelcase
            function_calls: formattedCalls,
            nonce,
        },
        packedArguments,
    };
}
/** Compresses an entrypoint payload to a 32-byte buffer (useful for signing) */
export async function hashPayload(payload) {
    return pedersenPlookupCompressWithHashIndex(await CircuitsWasm.get(), flattenPayload(payload).map(fr => fr.toBuffer()), GeneratorIndex.SIGNATURE_PAYLOAD);
}
/** Flattens an entrypoint payload */
export function flattenPayload(payload) {
    return [
        ...payload.function_calls.flatMap(call => [
            call.args_hash,
            call.function_selector,
            call.target_address,
            new Fr(call.is_public),
        ]),
        payload.nonce,
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50cnlwb2ludF9wYXlsb2FkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FjY291bnQvZGVmYXVsdHMvZW50cnlwb2ludF9wYXlsb2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMzRCxPQUFPLEVBQWdCLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVoRix1RkFBdUY7QUFDdkYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBMkJuQyxzRkFBc0Y7QUFDdEYsTUFBTSxDQUFDLEtBQUssVUFBVSxZQUFZLENBQUMsS0FBcUI7SUFNdEQsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRTFCLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9FLE1BQU0sZUFBZSxHQUFzQixFQUFFLENBQUM7SUFDOUMsS0FBSyxNQUFNLElBQUksSUFBSSxXQUFXLEVBQUU7UUFDOUIsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDakU7SUFFRCxNQUFNLGNBQWMsR0FBNkIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakYscUNBQXFDO1FBQ3JDLFNBQVMsRUFBRSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSTtRQUN0QyxxQ0FBcUM7UUFDckMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ3ZELHFDQUFxQztRQUNyQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUU7UUFDakMscUNBQXFDO1FBQ3JDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUztLQUN4QyxDQUFDLENBQUMsQ0FBQztJQUVKLE9BQU87UUFDTCxPQUFPLEVBQUU7WUFDUCxxQ0FBcUM7WUFDckMsY0FBYyxFQUFFLGNBQWM7WUFDOUIsS0FBSztTQUNOO1FBQ0QsZUFBZTtLQUNoQixDQUFDO0FBQ0osQ0FBQztBQUVELGdGQUFnRjtBQUNoRixNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FBQyxPQUEwQjtJQUMxRCxPQUFPLG9DQUFvQyxDQUN6QyxNQUFNLFlBQVksQ0FBQyxHQUFHLEVBQUUsRUFDeEIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUNoRCxjQUFjLENBQUMsaUJBQWlCLENBQ2pDLENBQUM7QUFDSixDQUFDO0FBRUQscUNBQXFDO0FBQ3JDLE1BQU0sVUFBVSxjQUFjLENBQUMsT0FBMEI7SUFDdkQsT0FBTztRQUNMLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUN4QyxJQUFJLENBQUMsU0FBUztZQUNkLElBQUksQ0FBQyxpQkFBaUI7WUFDdEIsSUFBSSxDQUFDLGNBQWM7WUFDbkIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN2QixDQUFDO1FBQ0YsT0FBTyxDQUFDLEtBQUs7S0FDZCxDQUFDO0FBQ0osQ0FBQyJ9