import { Ecdsa } from '@aztec/circuits.js/barretenberg';
import { AuthWitness } from '@aztec/types';
import EcdsaAccountContractAbi from '../../abis/ecdsa_account_contract.json' assert { type: 'json' };
import { BaseAccountContract } from './base_account_contract.js';
/**
 * Account contract that authenticates transactions using ECDSA signatures
 * verified against a secp256k1 public key stored in an immutable encrypted note.
 */
export class EcdsaAccountContract extends BaseAccountContract {
    constructor(signingPrivateKey) {
        super(EcdsaAccountContractAbi);
        this.signingPrivateKey = signingPrivateKey;
    }
    async getDeploymentArgs() {
        const signingPublicKey = await Ecdsa.new().then(e => e.computePublicKey(this.signingPrivateKey));
        return [signingPublicKey.subarray(0, 32), signingPublicKey.subarray(32, 64)];
    }
    getAuthWitnessProvider(_address) {
        return new EcdsaAuthWitnessProvider(this.signingPrivateKey);
    }
}
/** Creates auth witnesses using ECDSA signatures. */
class EcdsaAuthWitnessProvider {
    constructor(signingPrivateKey) {
        this.signingPrivateKey = signingPrivateKey;
    }
    async createAuthWitness(message) {
        const ecdsa = await Ecdsa.new();
        const signature = ecdsa.constructSignature(message.toBuffer(), this.signingPrivateKey);
        return new AuthWitness(message, [...signature.r, ...signature.s]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWNkc2FfYWNjb3VudF9jb250cmFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY2NvdW50L2NvbnRyYWN0L2VjZHNhX2FjY291bnRfY29udHJhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRXhELE9BQU8sRUFBRSxXQUFXLEVBQW1CLE1BQU0sY0FBYyxDQUFDO0FBRTVELE9BQU8sdUJBQXVCLE1BQU0sd0NBQXdDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFckcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFakU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLG9CQUFxQixTQUFRLG1CQUFtQjtJQUMzRCxZQUFvQixpQkFBeUI7UUFDM0MsS0FBSyxDQUFDLHVCQUFzQyxDQUFDLENBQUM7UUFENUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFRO0lBRTdDLENBQUM7SUFFRCxLQUFLLENBQUMsaUJBQWlCO1FBQ3JCLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDakcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxRQUF5QjtRQUM5QyxPQUFPLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDOUQsQ0FBQztDQUNGO0FBRUQscURBQXFEO0FBQ3JELE1BQU0sd0JBQXdCO0lBQzVCLFlBQW9CLGlCQUF5QjtRQUF6QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQVE7SUFBRyxDQUFDO0lBRWpELEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFXO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDdkYsT0FBTyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDO0NBQ0YifQ==