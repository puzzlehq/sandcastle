import { ContractDeploymentData, FunctionData, TxContext, getContractDeploymentInfo, } from '@aztec/circuits.js';
import { encodeArguments } from '@aztec/foundation/abi';
import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { PackedArguments, TxExecutionRequest } from '@aztec/types';
import { BaseContractInteraction } from '../contract/base_contract_interaction.js';
import { DeploySentTx } from './deploy_sent_tx.js';
/**
 * Creates a TxRequest from a contract ABI, for contract deployment.
 * Extends the ContractFunctionInteraction class.
 */
export class DeployMethod extends BaseContractInteraction {
    constructor(publicKey, arc, abi, args = []) {
        super(arc);
        this.publicKey = publicKey;
        this.arc = arc;
        this.abi = abi;
        this.args = args;
        /** The complete address of the contract. */
        this.completeAddress = undefined;
        const constructorAbi = abi.functions.find(f => f.name === 'constructor');
        if (!constructorAbi)
            throw new Error('Cannot find constructor in the ABI.');
        this.constructorAbi = constructorAbi;
    }
    /**
     * Create a contract deployment transaction, given the deployment options.
     * This function internally calls `request()` and `sign()` methods to prepare
     * the transaction for deployment. The resulting signed transaction can be
     * later sent using the `send()` method.
     *
     * @param options - An object containing optional deployment settings, including portalContract, contractAddressSalt, and from.
     * @returns A Promise resolving to an object containing the signed transaction data and other relevant information.
     */
    async create(options = {}) {
        const portalContract = options.portalContract ?? EthAddress.ZERO;
        const contractAddressSalt = options.contractAddressSalt ?? Fr.random();
        const { chainId, protocolVersion } = await this.rpc.getNodeInfo();
        const { completeAddress, constructorHash, functionTreeRoot } = await getContractDeploymentInfo(this.abi, this.args, contractAddressSalt, this.publicKey);
        const contractDeploymentData = new ContractDeploymentData(this.publicKey, constructorHash, functionTreeRoot, contractAddressSalt, portalContract);
        const txContext = new TxContext(false, false, true, contractDeploymentData, new Fr(chainId), new Fr(protocolVersion));
        const args = encodeArguments(this.constructorAbi, this.args);
        const functionData = FunctionData.fromAbi(this.constructorAbi);
        const execution = { args, functionData, to: completeAddress.address };
        const packedArguments = await PackedArguments.fromArgs(execution.args);
        const txRequest = TxExecutionRequest.from({
            origin: execution.to,
            functionData: execution.functionData,
            argsHash: packedArguments.hash,
            txContext,
            packedArguments: [packedArguments],
            authWitnesses: [],
        });
        this.txRequest = txRequest;
        this.completeAddress = completeAddress;
        // TODO: Should we add the contracts to the DB here, or once the tx has been sent or mined?
        await this.rpc.addContracts([{ abi: this.abi, completeAddress, portalContract }]);
        return this.txRequest;
    }
    /**
     * Send the contract deployment transaction using the provided options.
     * This function extends the 'send' method from the ContractFunctionInteraction class,
     * allowing us to send a transaction specifically for contract deployment.
     *
     * @param options - An object containing various deployment options such as portalContract, contractAddressSalt, and from.
     * @returns A SentTx object that returns the receipt and the deployed contract instance.
     */
    send(options = {}) {
        const txHashPromise = super.send(options).getTxHash();
        return new DeploySentTx(this.abi, this.arc, txHashPromise);
    }
    /**
     * Simulate the request.
     * @param options - Deployment options.
     * @returns The simulated tx.
     */
    simulate(options) {
        return super.simulate(options);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95X21ldGhvZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdF9kZXBsb3llci9kZXBsb3lfbWV0aG9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxzQkFBc0IsRUFDdEIsWUFBWSxFQUNaLFNBQVMsRUFDVCx5QkFBeUIsR0FDMUIsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQTRCLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFZLGVBQWUsRUFBaUIsa0JBQWtCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFNUYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFFbkYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBaUJuRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sWUFBd0QsU0FBUSx1QkFBdUI7SUFPbEcsWUFBb0IsU0FBb0IsRUFBVSxHQUFhLEVBQVUsR0FBZ0IsRUFBVSxPQUFjLEVBQUU7UUFDakgsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRE8sY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLFFBQUcsR0FBSCxHQUFHLENBQVU7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFhO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQU5uSCw0Q0FBNEM7UUFDckMsb0JBQWUsR0FBcUIsU0FBUyxDQUFDO1FBT25ELE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsY0FBYztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSSxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQXlCLEVBQUU7UUFDN0MsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGNBQWMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDO1FBQ2pFLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV2RSxNQUFNLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVsRSxNQUFNLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLE1BQU0seUJBQXlCLENBQzVGLElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLElBQUksRUFDVCxtQkFBbUIsRUFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FDZixDQUFDO1FBRUYsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLHNCQUFzQixDQUN2RCxJQUFJLENBQUMsU0FBUyxFQUNkLGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLGNBQWMsQ0FDZixDQUFDO1FBRUYsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQzdCLEtBQUssRUFDTCxLQUFLLEVBQ0wsSUFBSSxFQUNKLHNCQUFzQixFQUN0QixJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFDZixJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FDeEIsQ0FBQztRQUNGLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3RCxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMvRCxNQUFNLFNBQVMsR0FBRyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN0RSxNQUFNLGVBQWUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZFLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQztZQUN4QyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUU7WUFDcEIsWUFBWSxFQUFFLFNBQVMsQ0FBQyxZQUFZO1lBQ3BDLFFBQVEsRUFBRSxlQUFlLENBQUMsSUFBSTtZQUM5QixTQUFTO1lBQ1QsZUFBZSxFQUFFLENBQUMsZUFBZSxDQUFDO1lBQ2xDLGFBQWEsRUFBRSxFQUFFO1NBQ2xCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBRXZDLDJGQUEyRjtRQUMzRixNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWxGLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLElBQUksQ0FBQyxVQUF5QixFQUFFO1FBQ3JDLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDdEQsT0FBTyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxRQUFRLENBQUMsT0FBc0I7UUFDcEMsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDRiJ9