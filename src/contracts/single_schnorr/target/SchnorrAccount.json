{
  "name": "SchnorrAccount",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signing_pub_key_x",
          "type": {
            "kind": "field"
          },
          "visibility": "public"
        },
        {
          "name": "signing_pub_key_y",
          "type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "debug": {
    "debugSymbols": [
      "eJzt3c2O5EZ2huF76bVg8PxGULdieCHYY2CAgcawtBvo3ocCOqtKYKjZrYhsvknGajxwVufHQ/THw5p+yH99+sc///unX//+z59/+fTjvz4t/7F++vE///Xpl//76eff//svv/70/79++nH54dPffv6f7T9/++HT//79H3/79KP89sPuU2qZ5fMnt/+7ytunfWl+vCz+9vEi9ePH/+uHLYsspDBCCqOkMEYK46QwQQqTpDCFFKaSwpAaWEkNrKQGVlIDK6mBldTASmpgJTWwkhpYSQ2spAY2UgMbqYGN1MBGamAjNbCRGthIDWykBjZSAxupgZ3UwE5qYCc1sJMa2EkN7KQGdlIDO6mBndTATmrgIDVwkBo4SA0cpAYOUgMHqYGD1MBBauAgNXCQGjhJDZykBk5SAyepgZPUwElq4CQ1cJIaOEkNnKQGLqQGLqQGLqQGLqQGLqQGLqQGLqQGLqQGLqQGLqQGrqQGrqQGrqQGrqQGrqQGrqQGrqQGrqQGrqQGrqQGXkkNvJIaeCU18Epq4JXUwCupgVdSA6+kBl5JDbySGlgWUgXLQupgWUglLAuphWUh1bAspB6WhVTEspCaWBZSFcuC6mIYj0N1MQvIsYQci8ixjBwLybGUHIvJoZycoKCcoKScoKicoKycoLCcoLScoLicoLycoMCcoMScoMicoMycoNCcoNScoNicoNycoOCcoOScoOicoOycoPCcoPScoPicoPycoACdoASdoAidoAydoBCdoBSdoBidoBydoCCdoCSdoCidoCydoDCdoDSdoDidoDydoECdoESdoEidoEydoFCdoFSdoFidoFydoGCdoGSdoGidoGydoHCdoHSdoHidoHydoICdoISdoIidoIydoJCdoJSdoJidoJydoKCdoKSdoKidoKydoLCdoLSdoLidoLydoMCdoMSdoMidoMydoNCdoNSdoNidoNydotydotydotydotydLqQuVpS7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7U5S7M5S7M5S7M5S7M5S7s4XUxYZyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd4Zyd45yd45yd45yd45yd76QuthR7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7s5R7i5Q7i5Q7i5Q7i5Q7i4WUhcHyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0Fyt0F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Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Ccv2Kcv2Kcv2Kcv2Kcv26YJqZWXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmXZPmPZPmPZPmPZPmPZPltQrWws22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs22cs2+cs2+cs2+cs2+cs2+cLqpWdZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfucZfuCZfuCZfuCZfuCZftiQbVysGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsGxfsmxfsmxfsmxfsmxfLqhWTpbtS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btS5btKyzbV1i2r7BsX2HZvu0DrDioVi4s21dYtq+wbF9h2b7Csn2FZfsKy/YVlu0rLNtXWLavsGxfYdm+wrJ9hWX7Csv2FZbtKyzbV1i2r7BsX2HZvsKyfYVl+wrL9hWW7Sss21dYtq+wbF9h2b7Csn2FZfsKy/YVlu0rLNtXWLavsGxfYdm+wrJ9hWX7Csv2FZbtKyzbV1i2r7BsX2HZvsKyfYVl+wrL9hWW7Sss21dYtq+wbF9p2z7Xop9/0LWuH0I9fqzZnsc/1my5wx9rm7bjH2u2hlt9+zEvBwOvEo8B1nj/bHjjw2b5+IPNanz88CNQszfODNRsjjMDNbvjzEDN9jgzULM/zgzUbpATA7W76cRA7dY7L1Bbo50ZiNbUbZF2ZiBaU7dV2pmBaE3dlmlnBqI1dVunnRmI1tRtoXZmIFpTt5XamYFoTd2WamcGojV122M9LZDI+vmzou/35LW8xfm+LXQUpy2OnhfH7RHHvRVnwN+vxd7jyEGceM8T8R5ofQ804O/X2EAD/n6NDTRgE/qmQFneApXaCjRgExobaEADjQ00oIO+KdD6aIjfX3a0D1Tb/ujMQAM2obGBBvT0nwZ6fMczy/fxHc/s08d3PLMiH9/xzNZ7fMczi+zxHc/spsd3PLNuPn9H28oM/o5nlsLjO77D3/M2VRn8Hd/h73kblQz+ju/w97zNPwZ/x3f4e96GGmO/o60vBn/Hd/h73nYSg79jwN/zKG/fsR4sMSomjw/LH28VvunDj/QDGuTE9AO66cT0A1rvxPQD+vTE9AOa+sT0A64B56VvK5KXST/gunVi+gFXxBPTv/S1ti1gXib9S19r277mZdK/9LW2rXdeJv1LX2vbNuhl0r/0tbYtj14m/Utfa9uu6WXSv/S1tq2mXib9S19r2ybrZdK/9LW2Lb5eJv1LX2vbnuxl0r/0tbat1V4m/Utfa9sW7mXSv/S19k8E36ukf+lr7Z94xldJ/9LX2hEG88T0L32tHaE7T0z/0tfaAW50Lfn4jnVdv5z+95r4/GFZFztK//YH+/ufm2/R+y+0p0Xvv8qeFr3/EntW9AG+9bTo/RfX06L3X1lPi95/WT0tev819bTo/RfU06K/7tV0gAI+LfrrXk0HyOKzog8wyKdFf92r6QDXfFr0172aDrDSp0V/3atp+22hrxH9da+mA9T7X4/eAowD3PvYQO03kX5LIFv08RsfW6oe/MZnfXtOgZb3jy7ffmrb7yx9heDdV72zgndf884K3n3FOyt49/XurODdV7uzgndf684K3n2lOyt49xXxnOBr/9Mazgr+olfOtf/pD2cFf9Er57q86JVz7X/4xVnBX/TKufY/puOvBrflY/BHnNOuh+04/Vc5kbevkA/PM2rG8fJ43ll4NuL0PydkbJz+K9LQOP3XmaFx+q8eQ+P0XxOGxulv+qFx+vt7aJz+Vh4ap7+Vh8ZhtXL/U13GxmG1cv+zYsbGYbVy/3NixsZhtXL/k1zGxjmvlddWnPNauRmnv5X17WG8223NwT9CzVI/f7Z4NOL0Pw1lbJz+Vh4ap7+Vh8bpb+WhcfpbeWic/lYeGqe/lYfG6W/loXH6W3loHFYr9z83Y2wcViv3P9libBxWK/c/e2JsHFYr9z8dYmyc81q5tuKc18rNOP2t/OevDtl/WNb3h+qvH3RX899myWKPd37K8uHlle0Pb3/e48Ma5csxqjye+Vo/HF37ZqM+MsSHf0v27H94tvY/amKel6ecl/7r9Dwvzzgv/QvLPC/POC/9m9s8L884L/0r7Dwvzzgv/bv8PC/POC/9NzXzvDzjvPTf3c3z8ozz0n+bO8/LM87LvN9Hnpf+x13N8/KU8zLv95nnZd7vM8/LvN9nnpd5v888L/N+n3le5v0+87zM+33meZn3+8zzMu/3keel//Gb87y0z0vjITVr/xND57S/Ydrz3vzLHw15m3YefHScr+5/fus8K084K/O+nHhW5l058azMe3LiWZl35MSzMu/HiWdl3o0Dz0r/w7vnWXnCWZn37MSzMu/tiWdl3tsTz8q8tyeelXlvTzwr896eeFbmvT3xrMx7e+JZmff2zzgrzafhDnjpyJz11876nvfh5ZFitc6H9Q14X8vNB3jPu9uBA7znjejAAd7znnHgAO95ezdwgPe8Exs4wHveNA0c4D3vb0YNUJcB73u6+QDnnUjnAOedSOcA551I5wDnnUjnAOedSOcA551I5wDnnUjnAOedyNcPcP9+j22A806kb4AD3t4HGaCmPz5schDjyw8K36ZymduLoVO5zD3D0Klc5kZg6FQus90PncplVvahU7nMHj50KpdZrodO5TIb89CpXGYNHjmVAe9AveJU5m7bmsrcbVtTmbttaypzt21NZe62ranM3bY1ldvvtvsXsG1Tuf1u25wKebd9f1e1yIdfxTY/HPFAA1Hef8Gb2kqsjwwWH3yBPGYy4D3S15sJea89aybkrfasmZB32rNmQt5oz5oJeZ89aybkbfasmZB32bNmQt5kz5rJ3GN3M/G5x+5nMvfY/UzmHrufydxj9zOZe+x+JnOP3c9k7rH7mcw9dj+TucfuZzL32N1MYu6x+5nMPXY/k7nH7mcy99j9TOYeu5/J3GP3M5l77H4mc4/dz2TusfuZzD12NxP0q+fPmsncY/czmXvsfiZzj93PZO6x+5nMPXY/k7nH7mcy99j9TOYeu5/J3GN3M0G/Uvmsmcw9dj+TucfuZzL32P1M5h67n8ncY/czmXvsfiZzj93PZO6x+5nMPXY3E/TrSM+aydxj9zOZe+x+JnOP3c/kjnvs2xMQrdbWTO64xx7N5I577NFMbrjH+vKw+S6lNZMb7rGHM7nhHns0E/RL+p41E3+8os9DWzO54R57OJMb7rGHM7nhHuv18fyYsD9cixsR3h4fo9XePrr91GN8N1x5R47vhtvxyPHdcJEeOb477twDx3fH9Xzg+O64yQ8bn6BfcvcC47vj/cHA8d3xVmLg+OZdR9f45l1H1/jmXUfX+OZdR9f45l1H1/jmXUfX+OZdR8/40C+0e4HxzbuOrvHNu46u8c27jq7xzbuOrvHNu46vHV+2xjfvOrrGd8O7jvC3txOXxr+5EvTb/s6ayQ3vD45mgn7T3zfNZH3MJO0PM3kc6GXW86MDvcwifXSgl1l5jw70Msvp0YFeZo08OtDLLHxHB3qZ1ezoQC+zbx0d6GWWqIMDvc6b4o4O9C6b0XXe6XZ0oHfZjK7z9rWjA73LZnSd96QdHehdNqPrvNHs6EDvshld591jRwd6l83oOm8JOzrQu2xG13mf19GB3mUzus6bt44O9C6b0XXekXV0oHfZjK7zNqujA73LZnSd904dHehdNqPrvCHq6EDvshld511ORwd6l83oOm9dOjrQu2xG13k/0tGB3mUzus6bjI4O9C6b0XXeOXR0oHfZjK7zdqCjA73LZnSd9/gcHehdNqPrvHHn6EDvshld5904Rwd6l83oOm+xOTrQu2xG13nfzNGB3mUzus6bYY4O9C6b0XXe4XJ0oHfZjK7ztpWjA73LZnSd96IcHehVNqNaHvB+Nf14oPuPasgj8PIeQda3mVxliRo5k6vsWyNncpXVbORMrrLFvf/Ba11/2xfnZd5gcnigV9niDg/0Klvc6vHlA73KFnd4oFfZ4g4P9CpbnCz6OFJZvLWwXuYFGl9xqFfZub7iUK+ySsmy2MGhXmVDOjxUvcwLH77iUMlbksry+LCZffnDKo9fGKh/uNS8HSd5SRp5nOQdaeRxklekkcdJ3pBGHid5PRp5nOTdaORxkhejkcdJ3ooGHif6afQjj/Mm+xD6+e4jj/Mm+xD6iekjj/Mm+xD6GeQjj/Mm+xD6AeAjj/Mm+xD6Qd0jj/Mm+xD6Md0jj/Nl9qH8+OFH+pfZclrp+x8wo1Ue/4OE1lgO0svjXQOi778nru9xuqv62+L447UhktaI0/+wlrFxuovvG+O8/aLevRWnu5/GxumukbFxunthbJzum5SxcbrvJcbG6V75x8b5zq18FOd7t/KX4/Q/KGJsHFYr9z90YWwcViv3P8BgbBxWK/c/DGBsHFYr98P6sXFYrdyP1MfGYbVyP/geG4fVyv14emwcViu32arq41Z628/ef6kibz/VrIejn2qDysOfav5lO/yp9piX9ym//3rj/V+H/YkoOvqp9qXk6KfajX/0U83Jm5e3nzqAIW7+9tH33wPI422m2vYSI7+geT5HfkGzDr/lC97sjOfS+oJmwY38gmZlDfmC3377NzYuXRI=",
      "eJzlmctqG0EQRf+l10J0PfqlXwlZiMQBg5FDpJ3Qv3ssqXsGuZhGi3QuZGUbqovj2zWnRujs3t5/7E+v74ej252duN23szv+3h8+/zqe9n9Obuc37uXwc/p52bhfr28vbkeXzZcqkpDCvXL6vaRWLckqV+XamDR4WZZ/3ziFIQkwJBGGJMGQZBiSAkNCHgeFcFAYBwXHs4QjWsIxLeGolnBcSziyJRzbMo5tGce2jGNbxrEt49iWcWzLOLZlHNsyjm0Zx7aCY1vBsa3g2FZwbCsjbRuyNJQYyyPKSNt2UEbatoMy0rYdlJG27aCMtO06io60bQdlpG07KCNt20EZadsOCo5tFce2imNbxbGt4thWcWwbTNtS8u0lJyVeB8ql8ZQwvw8lMYpzbrXez33TjcXU7T9iMX37DAt7KfdapqjrLKnUvlliK1XrRjXX0uXbZ1AzjkgtjkVxsfpOkBVX5ymJ1zBM4yOEEaiFEf16GFz4Xio8PzTBPxmFuXH+zyjMjffXoihSPVaKLKP4RDE33hCU/IhibrzJRvOTmGgVZbqTejthETldu5tL7JnumrWOieRld0MfKddI8uJzbr6CmCvsGZCgNfCQ8sO/Ge2tlLnOLXteX5NcKojkuVL5NrhbM0YNtX2gRfC3YU9bc8aY29h8vay0NYehc8Zk65wxb2PtTPRb+yvb4OuhKGE+NF365fIBTOvVTw==",
      "",
      "",
      "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8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Fq8h6vJu/xavIerybv8WryHq8m7/Hq8h6vLu/x6vIery7v8eoP9Z3c5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV5d3uPV5T1eXd7j1eU9Xl3e49XlPV4m7/EyeY+XyXu8TN7jZQ/1nWzyHi+T93iZvMfL5D1eJu/xMnmPl8l7vEze42XyHi+T93iZvMfL5D1eJu/xMnmPl8l7vEze42XyHi+T93iZvMfL5D1eJu/xMnmPl8l7vEze42XyHi+T93iZvMfL5D1eJu/xMnmPl8l7vEze42XyHi+T93iZvMfL5D1eJu/xMnmPl8l7vEze42XyHi+T93iZvMfL5D1eJu/xMnmPl8l7vEze42XyHi+T93iZvMfL5D1eJu/xMnmPl8l7vEze42XyHi+T93iZvMfL5D1eJu/xMnmPl8l7vEze42XyHi+T93iZvMfL5D1eJu/xMnmPl8l7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",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod public_key_note;\n\n// Account contract that uses Schnorr signatures for authentication.\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\ncontract SchnorrAccount {\n    use dep::std;\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        log::emit_encrypted_log,\n        note::{ note_header::NoteHeader, utils as note_utils },\n        oracle::get_public_key::get_public_key,\n        state_vars::immutable_singleton::ImmutableSingleton,\n    };\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n\n    use crate::public_key_note::{PublicKeyNote, PublicKeyNoteMethods, PUBLIC_KEY_NOTE_LEN};\n\n    struct Storage {\n        // docs:start:storage\n        signing_public_key: ImmutableSingleton<PublicKeyNote, PUBLIC_KEY_NOTE_LEN>,\n        // docs:end:storage\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                // docs:start:storage_init\n                signing_public_key: ImmutableSingleton::new(context, 1, PublicKeyNoteMethods),\n                // docs:end:storage_init\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n\n    // Constructs the contract\n    #[aztec(private)]\n    fn constructor(\n        signing_pub_key_x: pub Field,\n        signing_pub_key_y: pub Field,\n    ) {\n        let this = context.this_address();\n        // docs:start:initialize\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.signing_public_key.initialize(&mut pub_key_note, Option::none());\n        // docs:end:initialize\n        \n        emit_encrypted_log(\n            &mut context,\n            this,\n            storage.signing_public_key.storage_slot,\n            get_public_key(this),\n            pub_key_note.serialize(),\n        );\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        // docs:start:entrypoint\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n        // docs:start:get_note\n        let public_key = storage.signing_public_key.get_note();\n        // docs:end:get_note\n        // Load auth witness\n        let witness: [Field; 64] = get_auth_witness(message_hash);\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 { signature[i] = witness[i] as u8; }\n\n        // Verify signature of the payload bytes\n        let verification = std::schnorr::verify_signature(public_key.x, public_key.y, signature, message_hash.to_be_bytes(32));\n        assert(verification == true);\n        // docs:end:entrypoint\n        true\n    }\n\n    // Computes notes hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(PublicKeyNoteMethods, note_header, preimage)\n    }\n}",
        "path": "/Users/lucas/code/puzzle/sandcastle/contracts/single_schnorr/src/main"
      },
      "6": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "18": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "19": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "23": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "34": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option"
      },
      "37": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n\n    // TODO: include globals in here and check them elsewhere\n    // https://github.com/AztecProtocol/aztec-packages/issues/1567\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        // We do not include block_data since it's not in the cpp hash\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize()); // see https://github.com/AztecProtocol/aztec-packages/issues/1473\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/abi"
      },
      "38": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/address"
      },
      "40": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/context"
      },
      "42": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/log"
      },
      "47": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "48": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "50": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "54": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "57": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/oracle/call_private_function"
      },
      "61": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "62": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "64": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "66": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "67": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "68": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/oracle/logs"
      },
      "69": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/private_call_stack_item"
      },
      "70": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "74": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "75": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        _: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "77": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALISATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse dep::std::hash::pedersen_with_separator;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_with_separator(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    } else {\n        pedersen_with_separator(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALISATION_NULLIFIER,\n        )[0]\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note, owner: Option<Field>) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface);\n\n        note\n    }\n    // docs:end:get_note\n\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n}\n",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/state_vars/singleton"
      },
      "81": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "83": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/types/type_serialization/bool_serialization"
      },
      "87": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/aztec/src/utils"
      },
      "89": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/authwit/src/auth_witness"
      },
      "91": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;    \nuse dep::aztec::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nuse dep::std::hash;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    hash::pedersen_with_separator(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )[0]\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/Users/lucas/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.9/yarn-project/aztec-nr/authwit/src/entrypoint"
      },
      "97": {
        "source": "use dep::aztec::note::note_interface::NoteInterface;\nuse dep::aztec::note::note_header::NoteHeader;\nuse dep::aztec::note::utils::compute_unique_siloed_note_hash;\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal PUBLIC_KEY_NOTE_LEN: Field = 3;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct PublicKeyNote {\n    x: Field,\n    y: Field,\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier\n    header: NoteHeader,\n}\n\nimpl PublicKeyNote {\n    pub fn new(x: Field, y: Field, owner: Field) -> Self {\n        PublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // serialize the note as 3 fields\n    pub fn serialize(self) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n        [self.x, self.y, self.owner]\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(PublicKeyNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        dep::std::hash::pedersen([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ])[0]\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> PublicKeyNote {\n    PublicKeyNote {\n        x: preimage[0],\n        y: preimage[1],\n        owner: preimage[2],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: PublicKeyNote) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: PublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    dep::std::hash::pedersen(note.serialize())[0]\n}\n\nfn compute_nullifier(note: PublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: PublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut PublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\nglobal PublicKeyNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n};",
        "path": "/Users/lucas/code/puzzle/sandcastle/contracts/single_schnorr/src/public_key_note"
      }
    }
  }
}